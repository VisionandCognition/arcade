#ifndef _WINUSER_
#define _WINUSER_
#define WINUSERAPI DECLSPEC_IMPORT
#ifdef _MAC
#include <macwin32.h>
#endif
#ifndef WINVER
#define WINVER 1280 
#endif 
#include <stdarg.h>

#define NOMSG

#ifndef NOUSER
typedef HANDLE HDWP;
typedef VOID MENUTEMPLATEA;
typedef VOID MENUTEMPLATEW;
#ifdef UNICODE
typedef MENUTEMPLATEW MENUTEMPLATE;
#else
typedef MENUTEMPLATEA MENUTEMPLATE;
#endif 
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;
#ifdef UNICODE
typedef LPMENUTEMPLATEW LPMENUTEMPLATE;
#else
typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
#endif 
typedef LRESULT (CALLBACK* WNDPROC)(HWND,UINT,WPARAM,LPARAM);
#ifdef STRICT
typedef INT_PTR (CALLBACK* DLGPROC)(HWND,UINT,WPARAM,LPARAM);
typedef VOID (CALLBACK* TIMERPROC)(HWND,UINT,UINT_PTR,DWORD);
typedef BOOL (CALLBACK* GRAYSTRINGPROC)(HDC,LPARAM,int);
typedef BOOL (CALLBACK* WNDENUMPROC)(HWND,LPARAM);
typedef LRESULT (CALLBACK* HOOKPROC)(int code,WPARAM wParam,LPARAM lParam);
typedef VOID (CALLBACK* SENDASYNCPROC)(HWND,UINT,ULONG_PTR,LRESULT);
typedef BOOL (CALLBACK* PROPENUMPROCA)(HWND,LPCSTR,HANDLE);
typedef BOOL (CALLBACK* PROPENUMPROCW)(HWND,LPCWSTR,HANDLE);
typedef BOOL (CALLBACK* PROPENUMPROCEXA)(HWND,LPSTR,HANDLE,ULONG_PTR);
typedef BOOL (CALLBACK* PROPENUMPROCEXW)(HWND,LPWSTR,HANDLE,ULONG_PTR);
typedef int (CALLBACK* EDITWORDBREAKPROCA)(LPSTR lpch,int ichCurrent,int cch,int code);
typedef int (CALLBACK* EDITWORDBREAKPROCW)(LPWSTR lpch,int ichCurrent,int cch,int code);
#if(WINVER >=0x0400)
typedef BOOL (CALLBACK* DRAWSTATEPROC)(HDC hdc,LPARAM lData,WPARAM wData,int cx,int cy);
#endif 
#else 
typedef FARPROC DLGPROC;
typedef FARPROC TIMERPROC;
typedef FARPROC GRAYSTRINGPROC;
typedef FARPROC WNDENUMPROC;
typedef FARPROC HOOKPROC;
typedef FARPROC SENDASYNCPROC;
typedef FARPROC EDITWORDBREAKPROCA;
typedef FARPROC EDITWORDBREAKPROCW;
typedef FARPROC PROPENUMPROCA;
typedef FARPROC PROPENUMPROCW;
typedef FARPROC PROPENUMPROCEXA;
typedef FARPROC PROPENUMPROCEXW;
#if(WINVER >=0x0400)
typedef FARPROC DRAWSTATEPROC;
#endif 
#endif 
#ifdef UNICODE
typedef PROPENUMPROCW PROPENUMPROC;
typedef PROPENUMPROCEXW PROPENUMPROCEX;
typedef EDITWORDBREAKPROCW EDITWORDBREAKPROC;
#else 
typedef PROPENUMPROCA PROPENUMPROC;
typedef PROPENUMPROCEXA PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;
#endif 
#ifdef STRICT
typedef BOOL (CALLBACK* NAMEENUMPROCA)(LPSTR,LPARAM);
typedef BOOL (CALLBACK* NAMEENUMPROCW)(LPWSTR,LPARAM);
typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
#else 
typedef FARPROC NAMEENUMPROCA;
typedef FARPROC NAMEENUMPROCW;
typedef FARPROC WINSTAENUMPROCA;
typedef FARPROC DESKTOPENUMPROCA;
typedef FARPROC WINSTAENUMPROCW;
typedef FARPROC DESKTOPENUMPROCW;
#endif 
#ifdef UNICODE
typedef WINSTAENUMPROCW WINSTAENUMPROC;
typedef DESKTOPENUMPROCW DESKTOPENUMPROC;
#else 
typedef WINSTAENUMPROCA WINSTAENUMPROC;
typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
#endif 
#define IS_INTRESOURCE(_r) ((((ULONG_PTR)(_r)) >> 16)==0)
#define MAKEINTRESOURCEA(i) ((LPSTR)((ULONG_PTR)((WORD)(i))))
#define MAKEINTRESOURCEW(i) ((LPWSTR)((ULONG_PTR)((WORD)(i))))
#ifdef UNICODE
#define MAKEINTRESOURCE MAKEINTRESOURCEW
#else
#define MAKEINTRESOURCE MAKEINTRESOURCEA
#endif 
#ifndef NORESOURCE
#define RT_CURSOR MAKEINTRESOURCE(1)
#define RT_BITMAP MAKEINTRESOURCE(2)
#define RT_ICON MAKEINTRESOURCE(3)
#define RT_MENU MAKEINTRESOURCE(4)
#define RT_DIALOG MAKEINTRESOURCE(5)
#define RT_STRING MAKEINTRESOURCE(6)
#define RT_FONTDIR MAKEINTRESOURCE(7)
#define RT_FONT MAKEINTRESOURCE(8)
#define RT_ACCELERATOR MAKEINTRESOURCE(9)
#define RT_RCDATA MAKEINTRESOURCE(10)
#define RT_MESSAGETABLE MAKEINTRESOURCE(11)
#define DIFFERENCE 11
#define RT_GROUP_CURSOR MAKEINTRESOURCE((ULONG_PTR)RT_CURSOR + DIFFERENCE)
#define RT_GROUP_ICON MAKEINTRESOURCE((ULONG_PTR)RT_ICON + DIFFERENCE)
#define RT_VERSION MAKEINTRESOURCE(16)
#define RT_DLGINCLUDE MAKEINTRESOURCE(17)
#if(WINVER >=0x0400)
#define RT_PLUGPLAY MAKEINTRESOURCE(19)
#define RT_VXD MAKEINTRESOURCE(20)
#define RT_ANICURSOR MAKEINTRESOURCE(21)
#define RT_ANIICON MAKEINTRESOURCE(22)
#endif 
#define RT_HTML MAKEINTRESOURCE(23)
#ifdef RC_INVOKED
#define RT_MANIFEST 24
#define CREATEPROCESS_MANIFEST_RESOURCE_ID 1
#define ISOLATIONAWARE_MANIFEST_RESOURCE_ID 2
#define ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID 3
#define MINIMUM_RESERVED_MANIFEST_RESOURCE_ID 1 
#define MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID 16 
#else 
#define RT_MANIFEST MAKEINTRESOURCE(24)
#define CREATEPROCESS_MANIFEST_RESOURCE_ID MAKEINTRESOURCE(1)
#define ISOLATIONAWARE_MANIFEST_RESOURCE_ID MAKEINTRESOURCE(2)
#define ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID MAKEINTRESOURCE(3)
#define MINIMUM_RESERVED_MANIFEST_RESOURCE_ID MAKEINTRESOURCE(1 )
#define MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID MAKEINTRESOURCE(16 )
#endif 
#endif 
/*
WINUSERAPI int WINAPI wvsprintfA(LPSTR,LPCSTR,va_list arglist);
WINUSERAPI int WINAPI wvsprintfW(LPWSTR,LPCWSTR,va_list arglist);
#ifdef UNICODE
#define wvsprintf wvsprintfW
#else
#define wvsprintf wvsprintfA
#endif 
WINUSERAPI int WINAPIV wsprintfA(LPSTR,LPCSTR,...);
WINUSERAPI int WINAPIV wsprintfW(LPWSTR,LPCWSTR,...);
#ifdef UNICODE
#define wsprintf wsprintfW
#else
#define wsprintf wsprintfA
#endif 
*/
#define SETWALLPAPER_DEFAULT ((LPWSTR)-1)
#ifndef NOSCROLL
#define SB_HORZ 0
#define SB_VERT 1
#define SB_CTL 2
#define SB_BOTH 3
#define SB_LINEUP 0
#define SB_LINELEFT 0
#define SB_LINEDOWN 1
#define SB_LINERIGHT 1
#define SB_PAGEUP 2
#define SB_PAGELEFT 2
#define SB_PAGEDOWN 3
#define SB_PAGERIGHT 3
#define SB_THUMBPOSITION 4
#define SB_THUMBTRACK 5
#define SB_TOP 6
#define SB_LEFT 6
#define SB_BOTTOM 7
#define SB_RIGHT 7
#define SB_ENDSCROLL 8
#endif 
#ifndef NOSHOWWINDOW
#define SW_HIDE 0
#define SW_SHOWNORMAL 1
#define SW_NORMAL 1
#define SW_SHOWMINIMIZED 2
#define SW_SHOWMAXIMIZED 3
#define SW_MAXIMIZE 3
#define SW_SHOWNOACTIVATE 4
#define SW_SHOW 5
#define SW_MINIMIZE 6
#define SW_SHOWMINNOACTIVE 7
#define SW_SHOWNA 8
#define SW_RESTORE 9
#define SW_SHOWDEFAULT 10
#define SW_FORCEMINIMIZE 11
#define SW_MAX 11
#define HIDE_WINDOW 0
#define SHOW_OPENWINDOW 1
#define SHOW_ICONWINDOW 2
#define SHOW_FULLSCREEN 3
#define SHOW_OPENNOACTIVATE 4
#define SW_PARENTCLOSING 1
#define SW_OTHERZOOM 2
#define SW_PARENTOPENING 3
#define SW_OTHERUNZOOM 4
#endif 
#if(WINVER >=0x0500)
#define AW_HOR_POSITIVE 1
#define AW_HOR_NEGATIVE 2
#define AW_VER_POSITIVE 4
#define AW_VER_NEGATIVE 8
#define AW_CENTER 16
#define AW_HIDE 0x10000
#define AW_ACTIVATE 0x20000
#define AW_SLIDE 0x40000
#define AW_BLEND 0x80000
#endif 
#define KF_EXTENDED 256
#define KF_DLGMODE 2048
#define KF_MENUMODE 0x1000
#define KF_ALTDOWN 0x2000
#define KF_REPEAT 0x4000
#define KF_UP 0x8000
#ifndef NOVIRTUALKEYCODES
#define VK_LBUTTON 1
#define VK_RBUTTON 2
#define VK_CANCEL 3
#define VK_MBUTTON 4 
#if(_WIN32_WINNT >=0x0500)
#define VK_XBUTTON1 5 
#define VK_XBUTTON2 6 
#endif 
#define VK_BACK 8
#define VK_TAB 9
#define VK_CLEAR 12
#define VK_RETURN 13
#define VK_SHIFT 16
#define VK_CONTROL 17
#define VK_MENU 18
#define VK_PAUSE 19
#define VK_CAPITAL 20
#define VK_KANA 21
#define VK_HANGEUL 21 
#define VK_HANGUL 21
#define VK_JUNJA 23
#define VK_FINAL 24
#define VK_HANJA 25
#define VK_KANJI 25
#define VK_ESCAPE 27
#define VK_CONVERT 28
#define VK_NONCONVERT 29
#define VK_ACCEPT 30
#define VK_MODECHANGE 31
#define VK_SPACE 32
#define VK_PRIOR 33
#define VK_NEXT 34
#define VK_END 35
#define VK_HOME 36
#define VK_LEFT 37
#define VK_UP 38
#define VK_RIGHT 39
#define VK_DOWN 40
#define VK_SELECT 41
#define VK_PRINT 42
#define VK_EXECUTE 43
#define VK_SNAPSHOT 44
#define VK_INSERT 45
#define VK_DELETE 46
#define VK_HELP 47
#define VK_LWIN 91
#define VK_RWIN 92
#define VK_APPS 93
#define VK_SLEEP 95
#define VK_NUMPAD0 96
#define VK_NUMPAD1 97
#define VK_NUMPAD2 98
#define VK_NUMPAD3 99
#define VK_NUMPAD4 100
#define VK_NUMPAD5 101
#define VK_NUMPAD6 102
#define VK_NUMPAD7 103
#define VK_NUMPAD8 104
#define VK_NUMPAD9 105
#define VK_MULTIPLY 106
#define VK_ADD 107
#define VK_SEPARATOR 108
#define VK_SUBTRACT 109
#define VK_DECIMAL 110
#define VK_DIVIDE 111
#define VK_F1 112
#define VK_F2 113
#define VK_F3 114
#define VK_F4 115
#define VK_F5 116
#define VK_F6 117
#define VK_F7 118
#define VK_F8 119
#define VK_F9 120
#define VK_F10 121
#define VK_F11 122
#define VK_F12 123
#define VK_F13 124
#define VK_F14 125
#define VK_F15 126
#define VK_F16 127
#define VK_F17 128
#define VK_F18 129
#define VK_F19 130
#define VK_F20 131
#define VK_F21 132
#define VK_F22 133
#define VK_F23 134
#define VK_F24 135
#define VK_NUMLOCK 144
#define VK_SCROLL 145
#define VK_OEM_NEC_EQUAL 146 
#define VK_OEM_FJ_JISHO 146 
#define VK_OEM_FJ_MASSHOU 147 
#define VK_OEM_FJ_TOUROKU 148 
#define VK_OEM_FJ_LOYA 149 
#define VK_OEM_FJ_ROYA 150 
#define VK_LSHIFT 160
#define VK_RSHIFT 161
#define VK_LCONTROL 162
#define VK_RCONTROL 163
#define VK_LMENU 164
#define VK_RMENU 165
#if(_WIN32_WINNT >=0x0500)
#define VK_BROWSER_BACK 166
#define VK_BROWSER_FORWARD 167
#define VK_BROWSER_REFRESH 168
#define VK_BROWSER_STOP 169
#define VK_BROWSER_SEARCH 170
#define VK_BROWSER_FAVORITES 171
#define VK_BROWSER_HOME 172
#define VK_VOLUME_MUTE 173
#define VK_VOLUME_DOWN 174
#define VK_VOLUME_UP 175
#define VK_MEDIA_NEXT_TRACK 176
#define VK_MEDIA_PREV_TRACK 177
#define VK_MEDIA_STOP 178
#define VK_MEDIA_PLAY_PAUSE 179
#define VK_LAUNCH_MAIL 180
#define VK_LAUNCH_MEDIA_SELECT 181
#define VK_LAUNCH_APP1 182
#define VK_LAUNCH_APP2 183
#endif 
#define VK_OEM_1 186 
#define VK_OEM_PLUS 187 
#define VK_OEM_COMMA 188 
#define VK_OEM_MINUS 189 
#define VK_OEM_PERIOD 190 
#define VK_OEM_2 191 
#define VK_OEM_3 192 
#define VK_OEM_4 219 
#define VK_OEM_5 220 
#define VK_OEM_6 221 
#define VK_OEM_7 222 
#define VK_OEM_8 223
#define VK_OEM_AX 225 
#define VK_OEM_102 226 
#define VK_ICO_HELP 227 
#define VK_ICO_00 228 
#if(WINVER >=0x0400)
#define VK_PROCESSKEY 229
#endif 
#define VK_ICO_CLEAR 230
#if(_WIN32_WINNT >=0x0500)
#define VK_PACKET 231
#endif 
#define VK_OEM_RESET 233
#define VK_OEM_JUMP 234
#define VK_OEM_PA1 235
#define VK_OEM_PA2 236
#define VK_OEM_PA3 237
#define VK_OEM_WSCTRL 238
#define VK_OEM_CUSEL 239
#define VK_OEM_ATTN 240
#define VK_OEM_FINISH 241
#define VK_OEM_COPY 242
#define VK_OEM_AUTO 243
#define VK_OEM_ENLW 244
#define VK_OEM_BACKTAB 245
#define VK_ATTN 246
#define VK_CRSEL 247
#define VK_EXSEL 248
#define VK_EREOF 249
#define VK_PLAY 250
#define VK_ZOOM 251
#define VK_NONAME 252
#define VK_PA1 253
#define VK_OEM_CLEAR 254
#endif 
#ifndef NOWH
#define WH_MIN (-1)
#define WH_MSGFILTER (-1)
#define WH_JOURNALRECORD 0
#define WH_JOURNALPLAYBACK 1
#define WH_KEYBOARD 2
#define WH_GETMESSAGE 3
#define WH_CALLWNDPROC 4
#define WH_CBT 5
#define WH_SYSMSGFILTER 6
#define WH_MOUSE 7
#if defined(_WIN32_WINDOWS)
#define WH_HARDWARE 8
#endif
#define WH_DEBUG 9
#define WH_SHELL 10
#define WH_FOREGROUNDIDLE 11
#if(WINVER >=0x0400)
#define WH_CALLWNDPROCRET 12
#endif 
#if (_WIN32_WINNT >=0x0400)
#define WH_KEYBOARD_LL 13
#define WH_MOUSE_LL 14
#endif 
#if(WINVER >=0x0400)
#if (_WIN32_WINNT >=0x0400)
#define WH_MAX 14
#else
#define WH_MAX 12
#endif 
#else
#define WH_MAX 11
#endif
#define WH_MINHOOK WH_MIN
#define WH_MAXHOOK WH_MAX
#define HC_ACTION 0
#define HC_GETNEXT 1
#define HC_SKIP 2
#define HC_NOREMOVE 3
#define HC_NOREM HC_NOREMOVE
#define HC_SYSMODALON 4
#define HC_SYSMODALOFF 5
#define HCBT_MOVESIZE 0
#define HCBT_MINMAX 1
#define HCBT_QS 2
#define HCBT_CREATEWND 3
#define HCBT_DESTROYWND 4
#define HCBT_ACTIVATE 5
#define HCBT_CLICKSKIPPED 6
#define HCBT_KEYSKIPPED 7
#define HCBT_SYSCOMMAND 8
#define HCBT_SETFOCUS 9
/*
typedef struct tagCBT_CREATEWNDA {
	struct tagCREATESTRUCTA *lpcs;
	HWND hwndInsertAfter;
} CBT_CREATEWNDA,*LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW {
	struct tagCREATESTRUCTW *lpcs;
	HWND hwndInsertAfter;
} CBT_CREATEWNDW,*LPCBT_CREATEWNDW;
#ifdef UNICODE
typedef CBT_CREATEWNDW CBT_CREATEWND;
typedef LPCBT_CREATEWNDW LPCBT_CREATEWND;
#else
typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
#endif 
*/
typedef struct tagCBTACTIVATESTRUCT {
	BOOL fMouse;
	HWND hWndActive;
} CBTACTIVATESTRUCT,*LPCBTACTIVATESTRUCT;
#if(_WIN32_WINNT >=0x0501)
typedef struct tagWTSSESSION_NOTIFICATION {
	DWORD cbSize;
	DWORD dwSessionId;
} WTSSESSION_NOTIFICATION,*PWTSSESSION_NOTIFICATION;
#define WTS_CONSOLE_CONNECT 1
#define WTS_CONSOLE_DISCONNECT 2
#define WTS_REMOTE_CONNECT 3
#define WTS_REMOTE_DISCONNECT 4
#define WTS_SESSION_LOGON 5
#define WTS_SESSION_LOGOFF 6
#define WTS_SESSION_LOCK 7
#define WTS_SESSION_UNLOCK 8
#define WTS_SESSION_REMOTE_CONTROL 9
#endif 
#define MSGF_DIALOGBOX 0
#define MSGF_MESSAGEBOX 1
#define MSGF_MENU 2
#define MSGF_SCROLLBAR 5
#define MSGF_NEXTWINDOW 6
#define MSGF_MAX 8 
#define MSGF_USER 4096
#define HSHELL_WINDOWCREATED 1
#define HSHELL_WINDOWDESTROYED 2
#define HSHELL_ACTIVATESHELLWINDOW 3
#if(WINVER >=0x0400)
#define HSHELL_WINDOWACTIVATED 4
#define HSHELL_GETMINRECT 5
#define HSHELL_REDRAW 6
#define HSHELL_TASKMAN 7
#define HSHELL_LANGUAGE 8
#define HSHELL_SYSMENU 9
#define HSHELL_ENDTASK 10
#endif 
#if(_WIN32_WINNT >=0x0500)
#define HSHELL_ACCESSIBILITYSTATE 11
#define HSHELL_APPCOMMAND 12
#endif 
#if(_WIN32_WINNT >=0x0501)
#define HSHELL_WINDOWREPLACED 13
#define HSHELL_WINDOWREPLACING 14
#endif 
#define HSHELL_HIGHBIT 0x8000
#define HSHELL_FLASH (HSHELL_REDRAW|HSHELL_HIGHBIT)
#define HSHELL_RUDEAPPACTIVATED (HSHELL_WINDOWACTIVATED|HSHELL_HIGHBIT)
#if(_WIN32_WINNT >=0x0500)
#define ACCESS_STICKYKEYS 1
#define ACCESS_FILTERKEYS 2
#define ACCESS_MOUSEKEYS 3
#define APPCOMMAND_BROWSER_BACKWARD 1
#define APPCOMMAND_BROWSER_FORWARD 2
#define APPCOMMAND_BROWSER_REFRESH 3
#define APPCOMMAND_BROWSER_STOP 4
#define APPCOMMAND_BROWSER_SEARCH 5
#define APPCOMMAND_BROWSER_FAVORITES 6
#define APPCOMMAND_BROWSER_HOME 7
#define APPCOMMAND_VOLUME_MUTE 8
#define APPCOMMAND_VOLUME_DOWN 9
#define APPCOMMAND_VOLUME_UP 10
#define APPCOMMAND_MEDIA_NEXTTRACK 11
#define APPCOMMAND_MEDIA_PREVIOUSTRACK 12
#define APPCOMMAND_MEDIA_STOP 13
#define APPCOMMAND_MEDIA_PLAY_PAUSE 14
#define APPCOMMAND_LAUNCH_MAIL 15
#define APPCOMMAND_LAUNCH_MEDIA_SELECT 16
#define APPCOMMAND_LAUNCH_APP1 17
#define APPCOMMAND_LAUNCH_APP2 18
#define APPCOMMAND_BASS_DOWN 19
#define APPCOMMAND_BASS_BOOST 20
#define APPCOMMAND_BASS_UP 21
#define APPCOMMAND_TREBLE_DOWN 22
#define APPCOMMAND_TREBLE_UP 23
#if(_WIN32_WINNT >=0x0501)
#define APPCOMMAND_MICROPHONE_VOLUME_MUTE 24
#define APPCOMMAND_MICROPHONE_VOLUME_DOWN 25
#define APPCOMMAND_MICROPHONE_VOLUME_UP 26
#define APPCOMMAND_HELP 27
#define APPCOMMAND_FIND 28
#define APPCOMMAND_NEW 29
#define APPCOMMAND_OPEN 30
#define APPCOMMAND_CLOSE 31
#define APPCOMMAND_SAVE 32
#define APPCOMMAND_PRINT 33
#define APPCOMMAND_UNDO 34
#define APPCOMMAND_REDO 35
#define APPCOMMAND_COPY 36
#define APPCOMMAND_CUT 37
#define APPCOMMAND_PASTE 38
#define APPCOMMAND_REPLY_TO_MAIL 39
#define APPCOMMAND_FORWARD_MAIL 40
#define APPCOMMAND_SEND_MAIL 41
#define APPCOMMAND_SPELL_CHECK 42
#define APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE 43
#define APPCOMMAND_MIC_ON_OFF_TOGGLE 44
#define APPCOMMAND_CORRECTION_LIST 45
#define APPCOMMAND_MEDIA_PLAY 46
#define APPCOMMAND_MEDIA_PAUSE 47
#define APPCOMMAND_MEDIA_RECORD 48
#define APPCOMMAND_MEDIA_FAST_FORWARD 49
#define APPCOMMAND_MEDIA_REWIND 50
#define APPCOMMAND_MEDIA_CHANNEL_UP 51
#define APPCOMMAND_MEDIA_CHANNEL_DOWN 52
#endif 
#define FAPPCOMMAND_MOUSE 0x8000
#define FAPPCOMMAND_KEY 0
#define FAPPCOMMAND_OEM 0x1000
#define FAPPCOMMAND_MASK 0xf000
#define GET_APPCOMMAND_LPARAM(lParam) ((short)(HIWORD(lParam) & ~FAPPCOMMAND_MASK))
#define GET_DEVICE_LPARAM(lParam)((WORD)(HIWORD(lParam) & FAPPCOMMAND_MASK))
#define GET_MOUSEORKEY_LPARAM GET_DEVICE_LPARAM
#define GET_FLAGS_LPARAM(lParam)(LOWORD(lParam))
#define GET_KEYSTATE_LPARAM(lParam) GET_FLAGS_LPARAM(lParam)
#endif 
typedef struct {
	HWND hwnd;
	RECT rc;
} SHELLHOOKINFO,*LPSHELLHOOKINFO;
typedef struct tagEVENTMSG {
	UINT message;
	UINT paramL;
	UINT paramH;
	DWORD time;
	HWND hwnd;
} EVENTMSG,*PEVENTMSGMSG,*NPEVENTMSGMSG,*LPEVENTMSGMSG;
typedef struct tagEVENTMSG *PEVENTMSG,*NPEVENTMSG,*LPEVENTMSG;
typedef struct tagCWPSTRUCT {
	LPARAM lParam;
	WPARAM wParam;
	UINT message;
	HWND hwnd;
} CWPSTRUCT,*PCWPSTRUCT,*NPCWPSTRUCT,*LPCWPSTRUCT;
#if(WINVER >=0x0400)
typedef struct tagCWPRETSTRUCT {
	LRESULT lResult;
	LPARAM lParam;
	WPARAM wParam;
	UINT message;
	HWND hwnd;
} CWPRETSTRUCT,*PCWPRETSTRUCT,*NPCWPRETSTRUCT,*LPCWPRETSTRUCT;
#endif 
#if (_WIN32_WINNT >=0x0400)
#define LLKHF_EXTENDED (KF_EXTENDED >> 8)
#define LLKHF_INJECTED 16
#define LLKHF_ALTDOWN (KF_ALTDOWN >> 8)
#define LLKHF_UP (KF_UP >> 8)
#define LLMHF_INJECTED 1
typedef struct tagKBDLLHOOKSTRUCT {
	DWORD vkCode;
	DWORD scanCode;
	DWORD flags;
	DWORD time;
	ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT,*LPKBDLLHOOKSTRUCT,*PKBDLLHOOKSTRUCT;
typedef struct tagMSLLHOOKSTRUCT {
	POINT pt;
	DWORD mouseData;
	DWORD flags;
	DWORD time;
	ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT,*LPMSLLHOOKSTRUCT,*PMSLLHOOKSTRUCT;
#endif 
typedef struct tagDEBUGHOOKINFO {
	DWORD idThread;
	DWORD idThreadInstaller;
	LPARAM lParam;
	WPARAM wParam;
	int code;
} DEBUGHOOKINFO,*PDEBUGHOOKINFO,*NPDEBUGHOOKINFO,FAR* LPDEBUGHOOKINFO;
typedef struct tagMOUSEHOOKSTRUCT {
	POINT pt;
	HWND hwnd;
	UINT wHitTestCode;
	ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT,*LPMOUSEHOOKSTRUCT,*PMOUSEHOOKSTRUCT;
#if(_WIN32_WINNT >=0x0500)
#ifdef __cplusplus
typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT {
	DWORD mouseData;
} MOUSEHOOKSTRUCTEX,*LPMOUSEHOOKSTRUCTEX,*PMOUSEHOOKSTRUCTEX;
#else 
typedef struct tagMOUSEHOOKSTRUCTEX {
	MOUSEHOOKSTRUCT;
	DWORD mouseData;
} MOUSEHOOKSTRUCTEX,*LPMOUSEHOOKSTRUCTEX,*PMOUSEHOOKSTRUCTEX;
#endif
#endif 
#if(WINVER >=0x0400)
typedef struct tagHARDWAREHOOKSTRUCT {
	HWND hwnd;
	UINT message;
	WPARAM wParam;
	LPARAM lParam;
} HARDWAREHOOKSTRUCT,*LPHARDWAREHOOKSTRUCT,*PHARDWAREHOOKSTRUCT;
#endif 
#endif 
#define HKL_PREV 0
#define HKL_NEXT 1
#define KLF_ACTIVATE 1
#define KLF_SUBSTITUTE_OK 2
#define KLF_REORDER 8
#if(WINVER >=0x0400)
#define KLF_REPLACELANG 16
#define KLF_NOTELLSHELL 128
#endif 
#define KLF_SETFORPROCESS 256
#if(_WIN32_WINNT >=0x0500)
#define KLF_SHIFTLOCK 0x10000
#define KLF_RESET 0x40000000
#endif 
#if(WINVER >=0x0500)
#define INPUTLANGCHANGE_SYSCHARSET 1
#define INPUTLANGCHANGE_FORWARD 2
#define INPUTLANGCHANGE_BACKWARD 4
#endif 
#define KL_NAMELENGTH 9
/*
WINUSERAPI HKL WINAPI LoadKeyboardLayoutA(LPCSTR pwszKLID,UINT Flags);
WINUSERAPI HKL WINAPI LoadKeyboardLayoutW(LPCWSTR pwszKLID,UINT Flags);
#ifdef UNICODE
#define LoadKeyboardLayout LoadKeyboardLayoutW
#else
#define LoadKeyboardLayout LoadKeyboardLayoutA
#endif 
#if(WINVER >=0x0400)
WINUSERAPI HKL WINAPI ActivateKeyboardLayout(HKL hkl,UINT Flags);
#else
WINUSERAPI BOOL WINAPI ActivateKeyboardLayout(HKL hkl,UINT Flags);
#endif 
#if(WINVER >=0x0400)
WINUSERAPI int WINAPI ToUnicodeEx(UINT wVirtKey,UINT wScanCode,CONST BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags,HKL dwhkl);
#endif 
WINUSERAPI BOOL WINAPI UnloadKeyboardLayout(HKL hkl);
WINUSERAPI BOOL WINAPI GetKeyboardLayoutNameA(LPSTR pwszKLID);
WINUSERAPI BOOL WINAPI GetKeyboardLayoutNameW(LPWSTR pwszKLID);
#ifdef UNICODE
#define GetKeyboardLayoutName GetKeyboardLayoutNameW
#else
#define GetKeyboardLayoutName GetKeyboardLayoutNameA
#endif 
#if(WINVER >=0x0400)
WINUSERAPI int WINAPI GetKeyboardLayoutList(int nBuff,HKL *lpList);
WINUSERAPI HKL WINAPI GetKeyboardLayout(DWORD idThread);
#endif 

#if(WINVER >=0x0500)
typedef struct tagMOUSEMOVEPOINT {
	int x;
	int y;
	DWORD time;
	ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT,*PMOUSEMOVEPOINT,FAR* LPMOUSEMOVEPOINT;
#define GMMP_USE_DISPLAY_POINTS 1
#define GMMP_USE_HIGH_RESOLUTION_POINTS 2
WINUSERAPI int WINAPI GetMouseMovePointsEx(UINT cbSize,LPMOUSEMOVEPOINT lppt,LPMOUSEMOVEPOINT lpptBuf,int nBufPoints,DWORD resolution);
#endif 
*/
#ifndef NODESKTOP
#define DESKTOP_READOBJECTS 1
#define DESKTOP_CREATEWINDOW 2
#define DESKTOP_CREATEMENU 4
#define DESKTOP_HOOKCONTROL 8
#define DESKTOP_JOURNALRECORD 16
#define DESKTOP_JOURNALPLAYBACK 32
#define DESKTOP_ENUMERATE 64
#define DESKTOP_WRITEOBJECTS 128
#define DESKTOP_SWITCHDESKTOP 256
#define DF_ALLOWOTHERACCOUNTHOOK 1
#ifdef _WINGDI_
#ifndef NOGDI
WINUSERAPI HDESK WINAPI CreateDesktopA(LPCSTR lpszDesktop,LPCSTR lpszDevice,LPDEVMODEA pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
WINUSERAPI HDESK WINAPI CreateDesktopW(LPCWSTR lpszDesktop,LPCWSTR lpszDevice,LPDEVMODEW pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
#ifdef UNICODE
#define CreateDesktop CreateDesktopW
#else
#define CreateDesktop CreateDesktopA
#endif 
#endif 
#endif 
/*
WINUSERAPI HDESK WINAPI OpenDesktopA(LPCSTR lpszDesktop,DWORD dwFlags,BOOL fInherit,ACCESS_MASK dwDesiredAccess);
WINUSERAPI HDESK WINAPI OpenDesktopW(LPCWSTR lpszDesktop,DWORD dwFlags,BOOL fInherit,ACCESS_MASK dwDesiredAccess);
#ifdef UNICODE
#define OpenDesktop OpenDesktopW
#else
#define OpenDesktop OpenDesktopA
#endif 
WINUSERAPI HDESK WINAPI OpenInputDesktop(DWORD dwFlags,BOOL fInherit,ACCESS_MASK dwDesiredAccess);
WINUSERAPI BOOL WINAPI EnumDesktopsA(HWINSTA hwinsta,DESKTOPENUMPROCA lpEnumFunc,LPARAM lParam);
WINUSERAPI BOOL WINAPI EnumDesktopsW(HWINSTA hwinsta,DESKTOPENUMPROCW lpEnumFunc,LPARAM lParam);
#ifdef UNICODE
#define EnumDesktops EnumDesktopsW
#else
#define EnumDesktops EnumDesktopsA
#endif 
*/
/*
WINUSERAPI BOOL WINAPI EnumDesktopWindows(HDESK hDesktop,WNDENUMPROC lpfn,LPARAM lParam);
WINUSERAPI BOOL WINAPI SwitchDesktop(HDESK hDesktop);
WINUSERAPI BOOL WINAPI SetThreadDesktop(HDESK hDesktop);
WINUSERAPI BOOL WINAPI CloseDesktop(HDESK hDesktop);
WINUSERAPI HDESK WINAPI GetThreadDesktop(DWORD dwThreadId);
*/
#endif 
#ifndef NOWINDOWSTATION
#define WINSTA_ENUMDESKTOPS 1
#define WINSTA_READATTRIBUTES 2
#define WINSTA_ACCESSCLIPBOARD 4
#define WINSTA_CREATEDESKTOP 8
#define WINSTA_WRITEATTRIBUTES 16
#define WINSTA_ACCESSGLOBALATOMS 32
#define WINSTA_EXITWINDOWS 64
#define WINSTA_ENUMERATE 256
#define WINSTA_READSCREEN 512
#define WINSTA_ALL_ACCESS (WINSTA_ENUMDESKTOPS|WINSTA_READATTRIBUTES|WINSTA_ACCESSCLIPBOARD|WINSTA_CREATEDESKTOP|WINSTA_WRITEATTRIBUTES|WINSTA_ACCESSGLOBALATOMS|WINSTA_EXITWINDOWS|WINSTA_ENUMERATE|WINSTA_READSCREEN)
#define CWF_CREATE_ONLY 1
#define WSF_VISIBLE 1
WINUSERAPI HWINSTA WINAPI CreateWindowStationA(LPCSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
WINUSERAPI HWINSTA WINAPI CreateWindowStationW(LPCWSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
#ifdef UNICODE
#define CreateWindowStation CreateWindowStationW
#else
#define CreateWindowStation CreateWindowStationA
#endif 
WINUSERAPI HWINSTA WINAPI OpenWindowStationA(LPCSTR lpszWinSta,BOOL fInherit,ACCESS_MASK dwDesiredAccess);
WINUSERAPI HWINSTA WINAPI OpenWindowStationW(LPCWSTR lpszWinSta,BOOL fInherit,ACCESS_MASK dwDesiredAccess);
#ifdef UNICODE
#define OpenWindowStation OpenWindowStationW
#else
#define OpenWindowStation OpenWindowStationA
#endif 
WINUSERAPI BOOL WINAPI EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc,LPARAM lParam);
WINUSERAPI BOOL WINAPI EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc,LPARAM lParam);
#ifdef UNICODE
#define EnumWindowStations EnumWindowStationsW
#else
#define EnumWindowStations EnumWindowStationsA
#endif 
/*
WINUSERAPI BOOL WINAPI CloseWindowStation(HWINSTA hWinSta);
WINUSERAPI BOOL WINAPI SetProcessWindowStation(HWINSTA hWinSta);
WINUSERAPI HWINSTA WINAPI GetProcessWindowStation(VOID);
*/
#endif 
#ifndef NOSECURITY
WINUSERAPI BOOL WINAPI SetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID);
WINUSERAPI BOOL WINAPI GetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID,DWORD nLength,LPDWORD lpnLengthNeeded);
#define UOI_FLAGS 1
#define UOI_NAME 2
#define UOI_TYPE 3
#define UOI_USER_SID 4
typedef struct tagUSEROBJECTFLAGS {
	BOOL fInherit;
	BOOL fReserved;
	DWORD dwFlags;
} USEROBJECTFLAGS,*PUSEROBJECTFLAGS;
WINUSERAPI BOOL WINAPI GetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
WINUSERAPI BOOL WINAPI GetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
#ifdef UNICODE
#define GetUserObjectInformation GetUserObjectInformationW
#else
#define GetUserObjectInformation GetUserObjectInformationA
#endif 
WINUSERAPI BOOL WINAPI SetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);
WINUSERAPI BOOL WINAPI SetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);
#ifdef UNICODE
#define SetUserObjectInformation SetUserObjectInformationW
#else
#define SetUserObjectInformation SetUserObjectInformationA
#endif 
#endif 
#if(WINVER >=0x0400)
typedef struct tagWNDCLASSEXA {
	UINT cbSize;
	UINT style;
	WNDPROC lpfnWndProc;
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE hInstance;
	HICON hIcon;
	HCURSOR hCursor;
	HBRUSH hbrBackground;
	LPCSTR lpszMenuName;
	LPCSTR lpszClassName;
	HICON hIconSm;
} WNDCLASSEXA,*PWNDCLASSEXA,*NPWNDCLASSEXA,*LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
	UINT cbSize;
	UINT style;
	WNDPROC lpfnWndProc;
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE hInstance;
	HICON hIcon;
	HCURSOR hCursor;
	HBRUSH hbrBackground;
	LPCWSTR lpszMenuName;
	LPCWSTR lpszClassName;
	HICON hIconSm;
} WNDCLASSEXW,*PWNDCLASSEXW,*NPWNDCLASSEXW,*LPWNDCLASSEXW;
#ifdef UNICODE
typedef WNDCLASSEXW WNDCLASSEX;
typedef PWNDCLASSEXW PWNDCLASSEX;
typedef NPWNDCLASSEXW NPWNDCLASSEX;
typedef LPWNDCLASSEXW LPWNDCLASSEX;
#else
typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
#endif 
#endif 
typedef struct tagWNDCLASSA {
	UINT style;
	WNDPROC lpfnWndProc;
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE hInstance;
	HICON hIcon;
	HCURSOR hCursor;
	HBRUSH hbrBackground;
	LPCSTR lpszMenuName;
	LPCSTR lpszClassName;
} WNDCLASSA,*PWNDCLASSA,*NPWNDCLASSA,*LPWNDCLASSA;
typedef struct tagWNDCLASSW {
	UINT style;
	WNDPROC lpfnWndProc;
	int cbClsExtra;
	int cbWndExtra;
	HINSTANCE hInstance;
	HICON hIcon;
	HCURSOR hCursor;
	HBRUSH hbrBackground;
	LPCWSTR lpszMenuName;
	LPCWSTR lpszClassName;
} WNDCLASSW,*PWNDCLASSW,*NPWNDCLASSW,*LPWNDCLASSW;
#ifdef UNICODE
typedef WNDCLASSW WNDCLASS;
typedef PWNDCLASSW PWNDCLASS;
typedef NPWNDCLASSW NPWNDCLASS;
typedef LPWNDCLASSW LPWNDCLASS;
#else
typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
#endif 
// WINUSERAPI BOOL WINAPI IsHungAppWindow(HWND hwnd);
#if(WINVER >=0x0501)
// WINUSERAPI VOID WINAPI DisableProcessWindowsGhosting(VOID);
#endif 
#ifndef NOMSG
typedef struct tagMSG {
	HWND hwnd;
	UINT message;
	WPARAM wParam;
	LPARAM lParam;
	DWORD time;
	POINT pt;
#ifdef _MAC
	DWORD lPrivate;
#endif
} MSG,*PMSG,*NPMSG,*LPMSG;
#define POINTSTOPOINT(pt,pts) { (pt).x=(LONG)(SHORT)LOWORD(*(LONG*)&pts);(pt).y=(LONG)(SHORT)HIWORD(*(LONG*)&pts); }
#define POINTTOPOINTS(pt)(MAKELONG((short)((pt).x),(short)((pt).y)))
#define MAKEWPARAM(l,h)((WPARAM)(DWORD)MAKELONG(l,h))
#define MAKELPARAM(l,h)((LPARAM)(DWORD)MAKELONG(l,h))
#define MAKELRESULT(l,h)((LRESULT)(DWORD)MAKELONG(l,h))
#endif 
#ifndef NOWINOFFSETS
#define GWL_WNDPROC (-4)
#define GWL_HINSTANCE (-6)
#define GWL_HWNDPARENT (-8)
#define GWL_STYLE (-16)
#define GWL_EXSTYLE (-20)
#define GWL_USERDATA (-21)
#define GWL_ID (-12)
#ifdef _WIN64
#undef GWL_WNDPROC
#undef GWL_HINSTANCE
#undef GWL_HWNDPARENT
#undef GWL_USERDATA
#endif 
#define GWLP_WNDPROC (-4)
#define GWLP_HINSTANCE (-6)
#define GWLP_HWNDPARENT (-8)
#define GWLP_USERDATA (-21)
#define GWLP_ID (-12)
#define GCL_MENUNAME (-8)
#define GCL_HBRBACKGROUND (-10)
#define GCL_HCURSOR (-12)
#define GCL_HICON (-14)
#define GCL_HMODULE (-16)
#define GCL_CBWNDEXTRA (-18)
#define GCL_CBCLSEXTRA (-20)
#define GCL_WNDPROC (-24)
#define GCL_STYLE (-26)
#define GCW_ATOM (-32)
#if(WINVER >=0x0400)
#define GCL_HICONSM (-34)
#endif 
#ifdef _WIN64
#undef GCL_MENUNAME
#undef GCL_HBRBACKGROUND
#undef GCL_HCURSOR
#undef GCL_HICON
#undef GCL_HMODULE
#undef GCL_WNDPROC
#undef GCL_HICONSM
#endif 
#define GCLP_MENUNAME (-8)
#define GCLP_HBRBACKGROUND (-10)
#define GCLP_HCURSOR (-12)
#define GCLP_HICON (-14)
#define GCLP_HMODULE (-16)
#define GCLP_WNDPROC (-24)
#define GCLP_HICONSM (-34)
#endif 
#ifndef NOWINMESSAGES
#define WM_NULL 0
#define WM_CREATE 1
#define WM_DESTROY 2
#define WM_MOVE 3
#define WM_SIZE 5
#define WM_ACTIVATE 6
#define WA_INACTIVE 0
#define WA_ACTIVE 1
#define WA_CLICKACTIVE 2
#define WM_SETFOCUS 7
#define WM_KILLFOCUS 8
#define WM_ENABLE 10
#define WM_SETREDRAW 11
#define WM_SETTEXT 12
#define WM_GETTEXT 13
#define WM_GETTEXTLENGTH 14
#define WM_PAINT 15
#define WM_CLOSE 16
#ifndef _WIN32_WCE
#define WM_QUERYENDSESSION 17
#define WM_QUERYOPEN 19
#define WM_ENDSESSION 22
#endif
#define WM_QUIT 18
#define WM_ERASEBKGND 20
#define WM_SYSCOLORCHANGE 21
#define WM_SHOWWINDOW 24
#define WM_WININICHANGE 26
#if(WINVER >=0x0400)
#define WM_SETTINGCHANGE WM_WININICHANGE
#endif 
#define WM_DEVMODECHANGE 27
#define WM_ACTIVATEAPP 28
#define WM_FONTCHANGE 29
#define WM_TIMECHANGE 30
#define WM_CANCELMODE 31
#define WM_SETCURSOR 32
#define WM_MOUSEACTIVATE 33
#define WM_CHILDACTIVATE 34
#define WM_QUEUESYNC 35
#define WM_GETMINMAXINFO 36
typedef struct tagMINMAXINFO {
	POINT ptReserved;
	POINT ptMaxSize;
	POINT ptMaxPosition;
	POINT ptMinTrackSize;
	POINT ptMaxTrackSize;
} MINMAXINFO,*PMINMAXINFO,*LPMINMAXINFO;
#define WM_PAINTICON 38
#define WM_ICONERASEBKGND 39
#define WM_NEXTDLGCTL 40
#define WM_SPOOLERSTATUS 42
#define WM_DRAWITEM 43
#define WM_MEASUREITEM 44
#define WM_DELETEITEM 45
#define WM_VKEYTOITEM 46
#define WM_CHARTOITEM 47
#define WM_SETFONT 48
#define WM_GETFONT 49
#define WM_SETHOTKEY 50
#define WM_GETHOTKEY 51
#define WM_QUERYDRAGICON 55
#define WM_COMPAREITEM 57
#if(WINVER >=0x0500)
#ifndef _WIN32_WCE
#define WM_GETOBJECT 61
#endif
#endif 
#define WM_COMPACTING 65
#define WM_COMMNOTIFY 68 
#define WM_WINDOWPOSCHANGING 70
#define WM_WINDOWPOSCHANGED 71
#define WM_POWER 72
#define PWR_OK 1
#define PWR_FAIL (-1)
#define PWR_SUSPENDREQUEST 1
#define PWR_SUSPENDRESUME 2
#define PWR_CRITICALRESUME 3
#define WM_COPYDATA 74
#define WM_CANCELJOURNAL 75
typedef struct tagCOPYDATASTRUCT {
	ULONG_PTR dwData;
	DWORD cbData;
	PVOID lpData;
} COPYDATASTRUCT,*PCOPYDATASTRUCT;
#if(WINVER >=0x0400)
typedef struct tagMDINEXTMENU {
	HMENU hmenuIn;
	HMENU hmenuNext;
	HWND hwndNext;
} MDINEXTMENU,* PMDINEXTMENU,* LPMDINEXTMENU;
#endif 
#if(WINVER >=0x0400)
#define WM_NOTIFY 78
#define WM_INPUTLANGCHANGEREQUEST 80
#define WM_INPUTLANGCHANGE 81
#define WM_TCARD 82
#define WM_HELP 83
#define WM_USERCHANGED 84
#define WM_NOTIFYFORMAT 85
#define NFR_ANSI 1
#define NFR_UNICODE 2
#define NF_QUERY 3
#define NF_REQUERY 4
#define WM_CONTEXTMENU 123
#define WM_STYLECHANGING 124
#define WM_STYLECHANGED 125
#define WM_DISPLAYCHANGE 126
#define WM_GETICON 127
#define WM_SETICON 128
#endif 
#define WM_NCCREATE 129
#define WM_NCDESTROY 130
#define WM_NCCALCSIZE 131
#define WM_NCHITTEST 132
#define WM_NCPAINT 133
#define WM_NCACTIVATE 134
#define WM_GETDLGCODE 135
#ifndef _WIN32_WCE
#define WM_SYNCPAINT 136
#endif
#define WM_NCMOUSEMOVE 160
#define WM_NCLBUTTONDOWN 161
#define WM_NCLBUTTONUP 162
#define WM_NCLBUTTONDBLCLK 163
#define WM_NCRBUTTONDOWN 164
#define WM_NCRBUTTONUP 165
#define WM_NCRBUTTONDBLCLK 166
#define WM_NCMBUTTONDOWN 167
#define WM_NCMBUTTONUP 168
#define WM_NCMBUTTONDBLCLK 169
#if(_WIN32_WINNT >=0x0500)
#define WM_NCXBUTTONDOWN 171
#define WM_NCXBUTTONUP 172
#define WM_NCXBUTTONDBLCLK 173
#endif 
#if(_WIN32_WINNT >=0x0501)
#define WM_INPUT 255
#endif 
#define WM_KEYFIRST 256
#define WM_KEYDOWN 256
#define WM_KEYUP 257
#define WM_CHAR 258
#define WM_DEADCHAR 259
#define WM_SYSKEYDOWN 260
#define WM_SYSKEYUP 261
#define WM_SYSCHAR 262
#define WM_SYSDEADCHAR 263
#if(_WIN32_WINNT >=0x0501)
#define WM_UNICHAR 265
#define WM_KEYLAST 265
#define UNICODE_NOCHAR 0xffff
#else
#define WM_KEYLAST 264
#endif 
#if(WINVER >=0x0400)
#define WM_IME_STARTCOMPOSITION 269
#define WM_IME_ENDCOMPOSITION 270
#define WM_IME_COMPOSITION 271
#define WM_IME_KEYLAST 271
#endif 
#define WM_INITDIALOG 272
#define WM_COMMAND 273
#define WM_SYSCOMMAND 274
#define WM_TIMER 275
#define WM_HSCROLL 276
#define WM_VSCROLL 277
#define WM_INITMENU 278
#define WM_INITMENUPOPUP 279
#define WM_MENUSELECT 287
#define WM_MENUCHAR 288
#define WM_ENTERIDLE 289
#if(WINVER >=0x0500)
#ifndef _WIN32_WCE
#define WM_MENURBUTTONUP 290
#define WM_MENUDRAG 291
#define WM_MENUGETOBJECT 292
#define WM_UNINITMENUPOPUP 293
#define WM_MENUCOMMAND 294
#ifndef _WIN32_WCE
#if(_WIN32_WINNT >=0x0500)
#define WM_CHANGEUISTATE 295
#define WM_UPDATEUISTATE 296
#define WM_QUERYUISTATE 297
#define UIS_SET 1
#define UIS_CLEAR 2
#define UIS_INITIALIZE 3
#define UISF_HIDEFOCUS 1
#define UISF_HIDEACCEL 2
#if(_WIN32_WINNT >=0x0501)
#define UISF_ACTIVE 4
#endif 
#endif 
#endif
#endif
#endif 
#define WM_CTLCOLORMSGBOX 306
#define WM_CTLCOLOREDIT 307
#define WM_CTLCOLORLISTBOX 308
#define WM_CTLCOLORBTN 309
#define WM_CTLCOLORDLG 310
#define WM_CTLCOLORSCROLLBAR 311
#define WM_CTLCOLORSTATIC 312
#define MN_GETHMENU 481
#define WM_MOUSEFIRST 512
#define WM_MOUSEMOVE 512
#define WM_LBUTTONDOWN 513
#define WM_LBUTTONUP 514
#define WM_LBUTTONDBLCLK 515
#define WM_RBUTTONDOWN 516
#define WM_RBUTTONUP 517
#define WM_RBUTTONDBLCLK 518
#define WM_MBUTTONDOWN 519
#define WM_MBUTTONUP 520
#define WM_MBUTTONDBLCLK 521
#if (_WIN32_WINNT >=0x0400)||(_WIN32_WINDOWS > 0x0400)
#define WM_MOUSEWHEEL 522
#endif
#if (_WIN32_WINNT >=0x0500)
#define WM_XBUTTONDOWN 523
#define WM_XBUTTONUP 524
#define WM_XBUTTONDBLCLK 525
#endif
#if (_WIN32_WINNT >=0x0500)
#define WM_MOUSELAST 525
#elif (_WIN32_WINNT >=0x0400)||(_WIN32_WINDOWS > 0x0400)
#define WM_MOUSELAST 522
#else
#define WM_MOUSELAST 521
#endif 
#if(_WIN32_WINNT >=0x0400)
#define WHEEL_DELTA 120
#define GET_WHEEL_DELTA_WPARAM(wParam)((short)HIWORD(wParam))
#define WHEEL_PAGESCROLL (UINT_MAX)
#endif 
#if(_WIN32_WINNT >=0x0500)
#define GET_KEYSTATE_WPARAM(wParam)(LOWORD(wParam))
#define GET_NCHITTEST_WPARAM(wParam)((short)LOWORD(wParam))
#define GET_XBUTTON_WPARAM(wParam)(HIWORD(wParam))
#define XBUTTON1 1
#define XBUTTON2 2
#endif 
#define WM_PARENTNOTIFY 528
#define WM_ENTERMENULOOP 529
#define WM_EXITMENULOOP 530
#if(WINVER >=0x0400)
#define WM_NEXTMENU 531
#define WM_SIZING 532
#define WM_CAPTURECHANGED 533
#define WM_MOVING 534
#endif 
#if(WINVER >=0x0400)
#define WM_POWERBROADCAST 536
#ifndef _WIN32_WCE
#define PBT_APMQUERYSUSPEND 0
#define PBT_APMQUERYSTANDBY 1
#define PBT_APMQUERYSUSPENDFAILED 2
#define PBT_APMQUERYSTANDBYFAILED 3
#define PBT_APMSUSPEND 4
#define PBT_APMSTANDBY 5
#define PBT_APMRESUMECRITICAL 6
#define PBT_APMRESUMESUSPEND 7
#define PBT_APMRESUMESTANDBY 8
#define PBTF_APMRESUMEFROMFAILURE 1
#define PBT_APMBATTERYLOW 9
#define PBT_APMPOWERSTATUSCHANGE 10
#define PBT_APMOEMEVENT 11
#define PBT_APMRESUMEAUTOMATIC 18
#endif
#endif 
#if(WINVER >=0x0400)
#define WM_DEVICECHANGE 537
#endif 
#define WM_MDICREATE 544
#define WM_MDIDESTROY 545
#define WM_MDIACTIVATE 546
#define WM_MDIRESTORE 547
#define WM_MDINEXT 548
#define WM_MDIMAXIMIZE 549
#define WM_MDITILE 550
#define WM_MDICASCADE 551
#define WM_MDIICONARRANGE 552
#define WM_MDIGETACTIVE 553
#define WM_MDISETMENU 560
#define WM_ENTERSIZEMOVE 561
#define WM_EXITSIZEMOVE 562
#define WM_DROPFILES 563
#define WM_MDIREFRESHMENU 564
#if(WINVER >=0x0400)
#define WM_IME_SETCONTEXT 641
#define WM_IME_NOTIFY 642
#define WM_IME_CONTROL 643
#define WM_IME_COMPOSITIONFULL 644
#define WM_IME_SELECT 645
#define WM_IME_CHAR 646
#endif 
#if(WINVER >=0x0500)
#define WM_IME_REQUEST 648
#endif 
#if(WINVER >=0x0400)
#define WM_IME_KEYDOWN 656
#define WM_IME_KEYUP 657
#endif 
#if((_WIN32_WINNT >=0x0400)||(WINVER >=0x0500))
#define WM_MOUSEHOVER 673
#define WM_MOUSELEAVE 675
#endif
#if(WINVER >=0x0500)
#define WM_NCMOUSEHOVER 672
#define WM_NCMOUSELEAVE 674
#endif 
#if(_WIN32_WINNT >=0x0501)
#define WM_WTSSESSION_CHANGE 689
#define WM_TABLET_FIRST 704
#define WM_TABLET_LAST 735
#endif 
#define WM_CUT 768
#define WM_COPY 769
#define WM_PASTE 770
#define WM_CLEAR 771
#define WM_UNDO 772
#define WM_RENDERFORMAT 773
#define WM_RENDERALLFORMATS 774
#define WM_DESTROYCLIPBOARD 775
#define WM_DRAWCLIPBOARD 776
#define WM_PAINTCLIPBOARD 777
#define WM_VSCROLLCLIPBOARD 778
#define WM_SIZECLIPBOARD 779
#define WM_ASKCBFORMATNAME 780
#define WM_CHANGECBCHAIN 781
#define WM_HSCROLLCLIPBOARD 782
#define WM_QUERYNEWPALETTE 783
#define WM_PALETTEISCHANGING 784
#define WM_PALETTECHANGED 785
#define WM_HOTKEY 786
#if(WINVER >=0x0400)
#define WM_PRINT 791
#define WM_PRINTCLIENT 792
#endif 
#if(_WIN32_WINNT >=0x0500)
#define WM_APPCOMMAND 793
#endif 
#if(_WIN32_WINNT >=0x0501)
#define WM_THEMECHANGED 794
#endif 
#if(WINVER >=0x0400)
#define WM_HANDHELDFIRST 856
#define WM_HANDHELDLAST 863
#define WM_AFXFIRST 864
#define WM_AFXLAST 895
#endif 
#define WM_PENWINFIRST 896
#define WM_PENWINLAST 911
#if(WINVER >=0x0400)
#define WM_APP 0x8000
#endif 
#define WM_USER 1024
#if(WINVER >=0x0400)
#define WMSZ_LEFT 1
#define WMSZ_RIGHT 2
#define WMSZ_TOP 3
#define WMSZ_TOPLEFT 4
#define WMSZ_TOPRIGHT 5
#define WMSZ_BOTTOM 6
#define WMSZ_BOTTOMLEFT 7
#define WMSZ_BOTTOMRIGHT 8
#endif 
#ifndef NONCMESSAGES
#define HTERROR (-2)
#define HTTRANSPARENT (-1)
#define HTNOWHERE 0
#define HTCLIENT 1
#define HTCAPTION 2
#define HTSYSMENU 3
#define HTGROWBOX 4
#define HTSIZE HTGROWBOX
#define HTMENU 5
#define HTHSCROLL 6
#define HTVSCROLL 7
#define HTMINBUTTON 8
#define HTMAXBUTTON 9
#define HTLEFT 10
#define HTRIGHT 11
#define HTTOP 12
#define HTTOPLEFT 13
#define HTTOPRIGHT 14
#define HTBOTTOM 15
#define HTBOTTOMLEFT 16
#define HTBOTTOMRIGHT 17
#define HTBORDER 18
#define HTREDUCE HTMINBUTTON
#define HTZOOM HTMAXBUTTON
#define HTSIZEFIRST HTLEFT
#define HTSIZELAST HTBOTTOMRIGHT
#if(WINVER >=0x0400)
#define HTOBJECT 19
#define HTCLOSE 20
#define HTHELP 21
#endif 
#define SMTO_NORMAL 0
#define SMTO_BLOCK 1
#define SMTO_ABORTIFHUNG 2
#if(WINVER >=0x0500)
#define SMTO_NOTIMEOUTIFNOTHUNG 8
#endif 
#endif 
#define MA_ACTIVATE 1
#define MA_ACTIVATEANDEAT 2
#define MA_NOACTIVATE 3
#define MA_NOACTIVATEANDEAT 4
#define ICON_SMALL 0
#define ICON_BIG 1
#if(_WIN32_WINNT >=0x0501)
#define ICON_SMALL2 2
#endif 
/*
WINUSERAPI UINT WINAPI RegisterWindowMessageA(LPCSTR lpString);
WINUSERAPI UINT WINAPI RegisterWindowMessageW(LPCWSTR lpString);
#ifdef UNICODE
#define RegisterWindowMessage RegisterWindowMessageW
#else
#define RegisterWindowMessage RegisterWindowMessageA
#endif 
*/
#define SIZE_RESTORED 0
#define SIZE_MINIMIZED 1
#define SIZE_MAXIMIZED 2
#define SIZE_MAXSHOW 3
#define SIZE_MAXHIDE 4
#define SIZENORMAL SIZE_RESTORED
#define SIZEICONIC SIZE_MINIMIZED
#define SIZEFULLSCREEN SIZE_MAXIMIZED
#define SIZEZOOMSHOW SIZE_MAXSHOW
#define SIZEZOOMHIDE SIZE_MAXHIDE
typedef struct tagWINDOWPOS {
	HWND hwnd;
	HWND hwndInsertAfter;
	int x;
	int y;
	int cx;
	int cy;
	UINT flags;
} WINDOWPOS,*LPWINDOWPOS,*PWINDOWPOS;
typedef struct tagNCCALCSIZE_PARAMS {
	RECT rgrc[3];
	PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS,*LPNCCALCSIZE_PARAMS;
#define WVR_ALIGNTOP 16
#define WVR_ALIGNLEFT 32
#define WVR_ALIGNBOTTOM 64
#define WVR_ALIGNRIGHT 128
#define WVR_HREDRAW 256
#define WVR_VREDRAW 512
#define WVR_REDRAW (WVR_HREDRAW|WVR_VREDRAW)
#define WVR_VALIDRECTS 1024
#ifndef NOKEYSTATES
#define MK_LBUTTON 1
#define MK_RBUTTON 2
#define MK_SHIFT 4
#define MK_CONTROL 8
#define MK_MBUTTON 16
#if(_WIN32_WINNT >=0x0500)
#define MK_XBUTTON1 32
#define MK_XBUTTON2 64
#endif 
#endif 
#if(_WIN32_WINNT >=0x0400)
#ifndef NOTRACKMOUSEEVENT
#define TME_HOVER 1
#define TME_LEAVE 2
#if(WINVER >=0x0500)
#define TME_NONCLIENT 16
#endif 
#define TME_QUERY 0x40000000
#define TME_CANCEL 0x80000000
#define HOVER_DEFAULT 0xffffffff
#endif 
#if(_WIN32_WINNT >=0x0400)
typedef struct tagTRACKMOUSEEVENT {
	DWORD cbSize;
	DWORD dwFlags;
	HWND hwndTrack;
	DWORD dwHoverTime;
} TRACKMOUSEEVENT,*LPTRACKMOUSEEVENT;
WINUSERAPI BOOL WINAPI TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack);
#endif 
#if(_WIN32_WINNT >=0x0400)
#endif 
#endif 
#endif 
#ifndef NOWINSTYLES
#define WS_OVERLAPPED 0
#define WS_POPUP 0x80000000
#define WS_CHILD 0x40000000
#define WS_MINIMIZE 0x20000000
#define WS_VISIBLE 0x10000000
#define WS_DISABLED 0x8000000
#define WS_CLIPSIBLINGS 0x4000000
#define WS_CLIPCHILDREN 0x2000000
#define WS_MAXIMIZE 0x1000000
#define WS_CAPTION 0xc00000 
#define WS_BORDER 0x800000
#define WS_DLGFRAME 0x400000
#define WS_VSCROLL 0x200000
#define WS_HSCROLL 0x100000
#define WS_SYSMENU 0x80000
#define WS_THICKFRAME 0x40000
#define WS_GROUP 0x20000
#define WS_TABSTOP 0x10000
#define WS_MINIMIZEBOX 0x20000
#define WS_MAXIMIZEBOX 0x10000
#define WS_TILED WS_OVERLAPPED
#define WS_ICONIC WS_MINIMIZE
#define WS_SIZEBOX WS_THICKFRAME
#define WS_TILEDWINDOW WS_OVERLAPPEDWINDOW
#define WS_OVERLAPPEDWINDOW (WS_OVERLAPPED|WS_CAPTION|WS_SYSMENU|WS_THICKFRAME|WS_MINIMIZEBOX|WS_MAXIMIZEBOX)
#define WS_POPUPWINDOW (WS_POPUP|WS_BORDER|WS_SYSMENU)
#define WS_CHILDWINDOW (WS_CHILD)
#define WS_EX_DLGMODALFRAME 1
#define WS_EX_NOPARENTNOTIFY 4
#define WS_EX_TOPMOST 8
#define WS_EX_ACCEPTFILES 16
#define WS_EX_TRANSPARENT 32
#if(WINVER >=0x0400)
#define WS_EX_MDICHILD 64
#define WS_EX_TOOLWINDOW 128
#define WS_EX_WINDOWEDGE 256
#define WS_EX_CLIENTEDGE 512
#define WS_EX_CONTEXTHELP 1024
#endif 
#if(WINVER >=0x0400)
#define WS_EX_RIGHT 0x1000
#define WS_EX_LEFT 0
#define WS_EX_RTLREADING 0x2000
#define WS_EX_LTRREADING 0
#define WS_EX_LEFTSCROLLBAR 0x4000
#define WS_EX_RIGHTSCROLLBAR 0
#define WS_EX_CONTROLPARENT 0x10000
#define WS_EX_STATICEDGE 0x20000
#define WS_EX_APPWINDOW 0x40000
#define WS_EX_OVERLAPPEDWINDOW (WS_EX_WINDOWEDGE|WS_EX_CLIENTEDGE)
#define WS_EX_PALETTEWINDOW (WS_EX_WINDOWEDGE|WS_EX_TOOLWINDOW|WS_EX_TOPMOST)
#endif 
#if(_WIN32_WINNT >=0x0500)
#define WS_EX_LAYERED 0x80000
#endif 
#if(WINVER >=0x0500)
#define WS_EX_NOINHERITLAYOUT 0x100000 
#define WS_EX_LAYOUTRTL 0x400000 
#endif 
#if(_WIN32_WINNT >=0x0501)
#define WS_EX_COMPOSITED 0x2000000
#endif 
#if(_WIN32_WINNT >=0x0500)
#define WS_EX_NOACTIVATE 0x8000000
#endif 
#define CS_VREDRAW 1
#define CS_HREDRAW 2
#define CS_DBLCLKS 8
#define CS_OWNDC 32
#define CS_CLASSDC 64
#define CS_PARENTDC 128
#define CS_NOCLOSE 512
#define CS_SAVEBITS 2048
#define CS_BYTEALIGNCLIENT 0x1000
#define CS_BYTEALIGNWINDOW 0x2000
#define CS_GLOBALCLASS 0x4000
#define CS_IME 0x10000
#if(_WIN32_WINNT >=0x0501)
#define CS_DROPSHADOW 0x20000
#endif 
#endif 
#if(WINVER >=0x0400)
#define PRF_CHECKVISIBLE 1
#define PRF_NONCLIENT 2
#define PRF_CLIENT 4
#define PRF_ERASEBKGND 8
#define PRF_CHILDREN 16
#define PRF_OWNED 32
#define BDR_RAISEDOUTER 1
#define BDR_SUNKENOUTER 2
#define BDR_RAISEDINNER 4
#define BDR_SUNKENINNER 8
#define BDR_OUTER (BDR_RAISEDOUTER|BDR_SUNKENOUTER)
#define BDR_INNER (BDR_RAISEDINNER|BDR_SUNKENINNER)
#define BDR_RAISED (BDR_RAISEDOUTER|BDR_RAISEDINNER)
#define BDR_SUNKEN (BDR_SUNKENOUTER|BDR_SUNKENINNER)
#define EDGE_RAISED (BDR_RAISEDOUTER|BDR_RAISEDINNER)
#define EDGE_SUNKEN (BDR_SUNKENOUTER|BDR_SUNKENINNER)
#define EDGE_ETCHED (BDR_SUNKENOUTER|BDR_RAISEDINNER)
#define EDGE_BUMP (BDR_RAISEDOUTER|BDR_SUNKENINNER)
#define BF_LEFT 1
#define BF_TOP 2
#define BF_RIGHT 4
#define BF_BOTTOM 8
#define BF_TOPLEFT (BF_TOP|BF_LEFT)
#define BF_TOPRIGHT (BF_TOP|BF_RIGHT)
#define BF_BOTTOMLEFT (BF_BOTTOM|BF_LEFT)
#define BF_BOTTOMRIGHT (BF_BOTTOM|BF_RIGHT)
#define BF_RECT (BF_LEFT|BF_TOP|BF_RIGHT|BF_BOTTOM)
#define BF_DIAGONAL 16
#define BF_DIAGONAL_ENDTOPRIGHT (BF_DIAGONAL|BF_TOP|BF_RIGHT)
#define BF_DIAGONAL_ENDTOPLEFT (BF_DIAGONAL|BF_TOP|BF_LEFT)
#define BF_DIAGONAL_ENDBOTTOMLEFT (BF_DIAGONAL|BF_BOTTOM|BF_LEFT)
#define BF_DIAGONAL_ENDBOTTOMRIGHT (BF_DIAGONAL|BF_BOTTOM|BF_RIGHT)
#define BF_MIDDLE 2048 
#define BF_SOFT 0x1000 
#define BF_ADJUST 0x2000 
#define BF_FLAT 0x4000 
#define BF_MONO 0x8000 
// WINUSERAPI BOOL WINAPI DrawEdge(HDC hdc,LPRECT qrc,UINT edge,UINT grfFlags);
#define DFC_CAPTION 1
#define DFC_MENU 2
#define DFC_SCROLL 3
#define DFC_BUTTON 4
#if(WINVER >=0x0500)
#define DFC_POPUPMENU 5
#endif 
#define DFCS_CAPTIONCLOSE 0
#define DFCS_CAPTIONMIN 1
#define DFCS_CAPTIONMAX 2
#define DFCS_CAPTIONRESTORE 3
#define DFCS_CAPTIONHELP 4
#define DFCS_MENUARROW 0
#define DFCS_MENUCHECK 1
#define DFCS_MENUBULLET 2
#define DFCS_MENUARROWRIGHT 4
#define DFCS_SCROLLUP 0
#define DFCS_SCROLLDOWN 1
#define DFCS_SCROLLLEFT 2
#define DFCS_SCROLLRIGHT 3
#define DFCS_SCROLLCOMBOBOX 5
#define DFCS_SCROLLSIZEGRIP 8
#define DFCS_SCROLLSIZEGRIPRIGHT 16
#define DFCS_BUTTONCHECK 0
#define DFCS_BUTTONRADIOIMAGE 1
#define DFCS_BUTTONRADIOMASK 2
#define DFCS_BUTTONRADIO 4
#define DFCS_BUTTON3STATE 8
#define DFCS_BUTTONPUSH 16
#define DFCS_INACTIVE 256
#define DFCS_PUSHED 512
#define DFCS_CHECKED 1024
#if(WINVER >=0x0500)
#define DFCS_TRANSPARENT 2048
#define DFCS_HOT 0x1000
#endif 
#define DFCS_ADJUSTRECT 0x2000
#define DFCS_FLAT 0x4000
#define DFCS_MONO 0x8000
// WINUSERAPI BOOL WINAPI DrawFrameControl(HDC,LPRECT,UINT,UINT);
#define DC_ACTIVE 1
#define DC_SMALLCAP 2
#define DC_ICON 4
#define DC_TEXT 8
#define DC_INBUTTON 16
#if(WINVER >=0x0500)
#define DC_GRADIENT 32
#endif 
#if(_WIN32_WINNT >=0x0501)
#define DC_BUTTONS 0x1000
#endif 
// WINUSERAPI BOOL WINAPI DrawCaption(HWND hwnd,HDC hdc,CONST RECT * lprect,UINT flags);
#define IDANI_OPEN 1
#define IDANI_CAPTION 3
// WINUSERAPI BOOL WINAPI DrawAnimatedRects(HWND hwnd,int idAni,CONST RECT * lprcFrom,CONST RECT * lprcTo);
#endif 
#ifndef NOCLIPBOARD
#define CF_TEXT 1
#define CF_BITMAP 2
#define CF_METAFILEPICT 3
#define CF_SYLK 4
#define CF_DIF 5
#define CF_TIFF 6
#define CF_OEMTEXT 7
#define CF_DIB 8
#define CF_PALETTE 9
#define CF_PENDATA 10
#define CF_RIFF 11
#define CF_WAVE 12
#define CF_UNICODETEXT 13
#define CF_ENHMETAFILE 14
#if(WINVER >=0x0400)
#define CF_HDROP 15
#define CF_LOCALE 16
#endif 
#if(WINVER >=0x0500)
#define CF_DIBV5 17
#endif 
#if(WINVER >=0x0500)
#define CF_MAX 18
#elif(WINVER >=0x0400)
#define CF_MAX 17
#else
#define CF_MAX 15
#endif
#define CF_OWNERDISPLAY 128
#define CF_DSPTEXT 129
#define CF_DSPBITMAP 130
#define CF_DSPMETAFILEPICT 131
#define CF_DSPENHMETAFILE 142
#define CF_PRIVATEFIRST 512
#define CF_PRIVATELAST 767
#define CF_GDIOBJFIRST 768
#define CF_GDIOBJLAST 1023
#endif 
#define FVIRTKEY TRUE 
#define FNOINVERT 2
#define FSHIFT 4
#define FCONTROL 8
#define FALT 16
typedef struct tagACCEL {
#ifndef _MAC
	BYTE fVirt; 
	WORD key;
	WORD cmd;
#else
	WORD fVirt; 
	WORD key;
	DWORD cmd;
#endif
} ACCEL,*LPACCEL;
typedef struct tagPAINTSTRUCT {
	HDC hdc;
	BOOL fErase;
	RECT rcPaint;
	BOOL fRestore;
	BOOL fIncUpdate;
	BYTE rgbReserved[32];
} PAINTSTRUCT,*PPAINTSTRUCT,*NPPAINTSTRUCT,*LPPAINTSTRUCT;
typedef struct tagCREATESTRUCTA {
	LPVOID lpCreateParams;
	HINSTANCE hInstance;
	HMENU hMenu;
	HWND hwndParent;
	int cy;
	int cx;
	int y;
	int x;
	LONG style;
	LPCSTR lpszName;
	LPCSTR lpszClass;
	DWORD dwExStyle;
} CREATESTRUCTA,*LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
	LPVOID lpCreateParams;
	HINSTANCE hInstance;
	HMENU hMenu;
	HWND hwndParent;
	int cy;
	int cx;
	int y;
	int x;
	LONG style;
	LPCWSTR lpszName;
	LPCWSTR lpszClass;
	DWORD dwExStyle;
} CREATESTRUCTW,*LPCREATESTRUCTW;
#ifdef UNICODE
typedef CREATESTRUCTW CREATESTRUCT;
typedef LPCREATESTRUCTW LPCREATESTRUCT;
#else
typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
#endif 
typedef struct tagWINDOWPLACEMENT {
	UINT length;
	UINT flags;
	UINT showCmd;
	POINT ptMinPosition;
	POINT ptMaxPosition;
	RECT rcNormalPosition;
#ifdef _MAC
	RECT rcDevice;
#endif
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT,*LPWINDOWPLACEMENT;
#define WPF_SETMINPOSITION 1
#define WPF_RESTORETOMAXIMIZED 2
#if(_WIN32_WINNT >=0x0500)
#define WPF_ASYNCWINDOWPLACEMENT 4
#endif 
#if(WINVER >=0x0400)
typedef struct tagNMHDR {
	HWND hwndFrom;
	UINT_PTR idFrom;
	UINT code; 
} NMHDR;
typedef NMHDR * LPNMHDR;
typedef struct tagSTYLESTRUCT {
	DWORD styleOld;
	DWORD styleNew;
} STYLESTRUCT,* LPSTYLESTRUCT;
#endif 
#define ODT_MENU 1
#define ODT_LISTBOX 2
#define ODT_COMBOBOX 3
#define ODT_BUTTON 4
#if(WINVER >=0x0400)
#define ODT_STATIC 5
#endif 
#define ODA_DRAWENTIRE 1
#define ODA_SELECT 2
#define ODA_FOCUS 4
#define ODS_SELECTED 1
#define ODS_GRAYED 2
#define ODS_DISABLED 4
#define ODS_CHECKED 8
#define ODS_FOCUS 16
#if(WINVER >=0x0400)
#define ODS_DEFAULT 32
#define ODS_COMBOBOXEDIT 0x1000
#endif 
#if(WINVER >=0x0500)
#define ODS_HOTLIGHT 64
#define ODS_INACTIVE 128
#if(_WIN32_WINNT >=0x0500)
#define ODS_NOACCEL 256
#define ODS_NOFOCUSRECT 512
#endif 
#endif 
typedef struct tagMEASUREITEMSTRUCT {
	UINT CtlType;
	UINT CtlID;
	UINT itemID;
	UINT itemWidth;
	UINT itemHeight;
	ULONG_PTR itemData;
} MEASUREITEMSTRUCT,*PMEASUREITEMSTRUCT,*LPMEASUREITEMSTRUCT;
typedef struct tagDRAWITEMSTRUCT {
	UINT CtlType;
	UINT CtlID;
	UINT itemID;
	UINT itemAction;
	UINT itemState;
	HWND hwndItem;
	HDC hDC;
	RECT rcItem;
	ULONG_PTR itemData;
} DRAWITEMSTRUCT,*PDRAWITEMSTRUCT,*LPDRAWITEMSTRUCT;
typedef struct tagDELETEITEMSTRUCT {
	UINT CtlType;
	UINT CtlID;
	UINT itemID;
	HWND hwndItem;
	ULONG_PTR itemData;
} DELETEITEMSTRUCT,*PDELETEITEMSTRUCT,*LPDELETEITEMSTRUCT;
typedef struct tagCOMPAREITEMSTRUCT {
	UINT CtlType;
	UINT CtlID;
	HWND hwndItem;
	UINT itemID1;
	ULONG_PTR itemData1;
	UINT itemID2;
	ULONG_PTR itemData2;
	DWORD dwLocaleId;
} COMPAREITEMSTRUCT,*PCOMPAREITEMSTRUCT,*LPCOMPAREITEMSTRUCT;
#ifndef NOMSG
WINUSERAPI BOOL WINAPI GetMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
WINUSERAPI BOOL WINAPI GetMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
#ifdef UNICODE
#define GetMessage GetMessageW
#else
#define GetMessage GetMessageA
#endif 
WINUSERAPI BOOL WINAPI TranslateMessage(CONST MSG *lpMsg);
WINUSERAPI LRESULT WINAPI DispatchMessageA(CONST MSG *lpMsg);
WINUSERAPI LRESULT WINAPI DispatchMessageW(CONST MSG *lpMsg);
#ifdef UNICODE
#define DispatchMessage DispatchMessageW
#else
#define DispatchMessage DispatchMessageA
#endif 
WINUSERAPI BOOL WINAPI SetMessageQueue(int cMessagesMax);
WINUSERAPI BOOL WINAPI PeekMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
WINUSERAPI BOOL WINAPI PeekMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
#ifdef UNICODE
#define PeekMessage PeekMessageW
#else
#define PeekMessage PeekMessageA
#endif 
#define PM_NOREMOVE 0
#define PM_REMOVE 1
#define PM_NOYIELD 2
#if(WINVER >=0x0500)
#define PM_QS_INPUT (QS_INPUT << 16)
#define PM_QS_POSTMESSAGE ((QS_POSTMESSAGE|QS_HOTKEY|QS_TIMER) << 16)
#define PM_QS_PAINT (QS_PAINT << 16)
#define PM_QS_SENDMESSAGE (QS_SENDMESSAGE << 16)
#endif 
#endif 
// WINUSERAPI BOOL WINAPI RegisterHotKey(HWND hWnd,int id,UINT fsModifiers,UINT vk);
// WINUSERAPI BOOL WINAPI UnregisterHotKey(HWND hWnd,int id);
#define MOD_ALT 1
#define MOD_CONTROL 2
#define MOD_SHIFT 4
#define MOD_WIN 8
#define IDHOT_SNAPWINDOW (-1) 
#define IDHOT_SNAPDESKTOP (-2) 
#ifdef WIN_INTERNAL
	#ifndef LSTRING
	#define NOLSTRING
	#endif 
	#ifndef LFILEIO
	#define NOLFILEIO
	#endif 
#endif 
#if(WINVER >=0x0400)
#define ENDSESSION_LOGOFF 0x80000000
#endif 
#define EWX_LOGOFF 0
#define EWX_SHUTDOWN 1
#define EWX_REBOOT 2
#define EWX_FORCE 4
#define EWX_POWEROFF 8
#if(_WIN32_WINNT >=0x0500)
#define EWX_FORCEIFHUNG 16
#endif 
// #define ExitWindows(dwReserved,Code) ExitWindowsEx(EWX_LOGOFF,0xFFFFFFFF)
// WINUSERAPI BOOL WINAPI ExitWindowsEx(UINT uFlags,DWORD dwReason);
// WINUSERAPI BOOL WINAPI SwapMouseButton(BOOL fSwap);
// WINUSERAPI DWORD WINAPI GetMessagePos(VOID);
// WINUSERAPI LONG WINAPI GetMessageTime(VOID);
// WINUSERAPI LPARAM WINAPI GetMessageExtraInfo(VOID);
#if(_WIN32_WINNT >=0x0501)
WINUSERAPI BOOL WINAPI IsWow64Message(VOID);
#endif 
#if(WINVER >=0x0400)
// WINUSERAPI LPARAM WINAPI SetMessageExtraInfo(LPARAM lParam);
#endif 
/*
WINUSERAPI LRESULT WINAPI SendMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI LRESULT WINAPI SendMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define SendMessage SendMessageW
#else
#define SendMessage SendMessageA
#endif 
WINUSERAPI LRESULT WINAPI SendMessageTimeoutA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
WINUSERAPI LRESULT WINAPI SendMessageTimeoutW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
#ifdef UNICODE
#define SendMessageTimeout SendMessageTimeoutW
#else
#define SendMessageTimeout SendMessageTimeoutA
#endif 
WINUSERAPI BOOL WINAPI SendNotifyMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI BOOL WINAPI SendNotifyMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define SendNotifyMessage SendNotifyMessageW
#else
#define SendNotifyMessage SendNotifyMessageA
#endif 
WINUSERAPI BOOL WINAPI SendMessageCallbackA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);
WINUSERAPI BOOL WINAPI SendMessageCallbackW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);
#ifdef UNICODE
#define SendMessageCallback SendMessageCallbackW
#else
#define SendMessageCallback SendMessageCallbackA
#endif 
*/
#if(_WIN32_WINNT >=0x0501)
typedef struct {
	UINT cbSize;
	HDESK hdesk;
	HWND hwnd;
	LUID luid;
} BSMINFO,*PBSMINFO;
WINUSERAPI long WINAPI BroadcastSystemMessageExA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
WINUSERAPI long WINAPI BroadcastSystemMessageExW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
#ifdef UNICODE
#define BroadcastSystemMessageEx BroadcastSystemMessageExW
#else
#define BroadcastSystemMessageEx BroadcastSystemMessageExA
#endif 
#endif 
#if(WINVER >=0x0400)
#if defined(_WIN32_WINNT)
WINUSERAPI long WINAPI BroadcastSystemMessageA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI long WINAPI BroadcastSystemMessageW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define BroadcastSystemMessage BroadcastSystemMessageW
#else
#define BroadcastSystemMessage BroadcastSystemMessageA
#endif 
#elif defined(_WIN32_WINDOWS)
WINUSERAPI long WINAPI BroadcastSystemMessage(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
#endif
#define BSM_ALLCOMPONENTS 0
#define BSM_VXDS 1
#define BSM_NETDRIVER 2
#define BSM_INSTALLABLEDRIVERS 4
#define BSM_APPLICATIONS 8
#define BSM_ALLDESKTOPS 16
#define BSF_QUERY 1
#define BSF_IGNORECURRENTTASK 2
#define BSF_FLUSHDISK 4
#define BSF_NOHANG 8
#define BSF_POSTMESSAGE 16
#define BSF_FORCEIFHUNG 32
#define BSF_NOTIMEOUTIFNOTHUNG 64
#if(_WIN32_WINNT >=0x0500)
#define BSF_ALLOWSFW 128
#define BSF_SENDNOTIFYMESSAGE 256
#endif 
#if(_WIN32_WINNT >=0x0501)
#define BSF_RETURNHDESK 512
#define BSF_LUID 1024
#endif 
#define BROADCAST_QUERY_DENY 0x424d5144 
#endif 
/*
#if(WINVER >=0x0500)
typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;
#define DEVICE_NOTIFY_WINDOW_HANDLE 0
#define DEVICE_NOTIFY_SERVICE_HANDLE 1
#if(_WIN32_WINNT >=0x0501)
#define DEVICE_NOTIFY_ALL_INTERFACE_CLASSES 4
#endif 
WINUSERAPI HDEVNOTIFY WINAPI RegisterDeviceNotificationA(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
WINUSERAPI HDEVNOTIFY WINAPI RegisterDeviceNotificationW(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
#ifdef UNICODE
#define RegisterDeviceNotification RegisterDeviceNotificationW
#else
#define RegisterDeviceNotification RegisterDeviceNotificationA
#endif 
// WINUSERAPI BOOL WINAPI UnregisterDeviceNotification(HDEVNOTIFY Handle);
#endif 
WINUSERAPI BOOL WINAPI PostMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI BOOL WINAPI PostMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define PostMessage PostMessageW
#else
#define PostMessage PostMessageA
#endif 
WINUSERAPI BOOL WINAPI PostThreadMessageA(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI BOOL WINAPI PostThreadMessageW(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define PostThreadMessage PostThreadMessageW
#else
#define PostThreadMessage PostThreadMessageA
#endif 
#define PostAppMessageA(idThread,wMsg,wParam,lParam) PostThreadMessageA((DWORD)idThread,wMsg,wParam,lParam)
#define PostAppMessageW(idThread,wMsg,wParam,lParam) PostThreadMessageW((DWORD)idThread,wMsg,wParam,lParam)
#ifdef UNICODE
#define PostAppMessage PostAppMessageW
#else
#define PostAppMessage PostAppMessageA
#endif 
*/
#define HWND_BROADCAST ((HWND)0xffff)
#if(WINVER >=0x0500)
#define HWND_MESSAGE ((HWND)-3)
#endif 
/*
WINUSERAPI BOOL WINAPI AttachThreadInput(DWORD idAttach,DWORD idAttachTo,BOOL fAttach);
// WINUSERAPI BOOL WINAPI ReplyMessage(LRESULT lResult);
// WINUSERAPI BOOL WINAPI WaitMessage(VOID);
WINUSERAPI DWORD WINAPI WaitForInputIdle(HANDLE hProcess,DWORD dwMilliseconds);
WINUSERAPI 
#ifndef _MAC
LRESULT WINAPI 
#else
LRESULT CALLBACK 
#endif
DefWindowProcA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI 
#ifndef _MAC
LRESULT WINAPI 
#else
LRESULT CALLBACK 
#endif
DefWindowProcW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define DefWindowProc DefWindowProcW
#else
#define DefWindowProc DefWindowProcA
#endif 
// WINUSERAPI VOID WINAPI PostQuitMessage(int nExitCode);
#ifdef STRICT
WINUSERAPI LRESULT WINAPI CallWindowProcA(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI LRESULT WINAPI CallWindowProcW(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define CallWindowProc CallWindowProcW
#else
#define CallWindowProc CallWindowProcA
#endif 
#else 
WINUSERAPI LRESULT WINAPI CallWindowProcA(FARPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI LRESULT WINAPI CallWindowProcW(FARPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define CallWindowProc CallWindowProcW
#else
#define CallWindowProc CallWindowProcA
#endif 
#endif 
*/
// WINUSERAPI BOOL WINAPI InSendMessage(VOID);
#if(WINVER >=0x0500)
// WINUSERAPI DWORD WINAPI InSendMessageEx(LPVOID lpReserved);
#define ISMEX_NOSEND 0
#define ISMEX_SEND 1
#define ISMEX_NOTIFY 2
#define ISMEX_CALLBACK 4
#define ISMEX_REPLIED 8
#endif 
// WINUSERAPI UINT WINAPI GetDoubleClickTime(VOID);
// WINUSERAPI BOOL WINAPI SetDoubleClickTime(UINT);
// WINUSERAPI ATOM WINAPI RegisterClassA(CONST WNDCLASSA *lpWndClass);
// WINUSERAPI ATOM WINAPI RegisterClassW(CONST WNDCLASSW *lpWndClass);
/*
#ifdef UNICODE
#define RegisterClass RegisterClassW
#else
#define RegisterClass RegisterClassA
#endif 
WINUSERAPI BOOL WINAPI UnregisterClassA(LPCSTR lpClassName,HINSTANCE hInstance);
WINUSERAPI BOOL WINAPI UnregisterClassW(LPCWSTR lpClassName,HINSTANCE hInstance);
#ifdef UNICODE
#define UnregisterClass UnregisterClassW
#else
#define UnregisterClass UnregisterClassA
#endif 
// WINUSERAPI BOOL WINAPI GetClassInfoA(HINSTANCE hInstance,LPCSTR lpClassName,LPWNDCLASSA lpWndClass);
// WINUSERAPI BOOL WINAPI GetClassInfoW(HINSTANCE hInstance,LPCWSTR lpClassName,LPWNDCLASSW lpWndClass);
#ifdef UNICODE
#define GetClassInfo GetClassInfoW
#else
#define GetClassInfo GetClassInfoA
#endif 
#if(WINVER >=0x0400)
WINUSERAPI ATOM WINAPI RegisterClassExA(CONST WNDCLASSEXA *);
WINUSERAPI ATOM WINAPI RegisterClassExW(CONST WNDCLASSEXW *);
#ifdef UNICODE
#define RegisterClassEx RegisterClassExW
#else
#define RegisterClassEx RegisterClassExA
#endif 
WINUSERAPI BOOL WINAPI GetClassInfoExA(HINSTANCE hInstance,LPCSTR lpszClass,LPWNDCLASSEXA lpwcx);
WINUSERAPI BOOL WINAPI GetClassInfoExW(HINSTANCE hInstance,LPCWSTR lpszClass,LPWNDCLASSEXW lpwcx);
#ifdef UNICODE
#define GetClassInfoEx GetClassInfoExW
#else
#define GetClassInfoEx GetClassInfoExA
#endif 
#endif 

#define CW_USEDEFAULT ((int)0x80000000)
#define HWND_DESKTOP ((HWND)0)
#if(_WIN32_WINNT >=0x0501)
typedef BOOLEAN (WINAPI * PREGISTERCLASSNAMEW)(LPCWSTR);
#endif 
WINUSERAPI HWND WINAPI CreateWindowExA(DWORD dwExStyle,LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);
WINUSERAPI HWND WINAPI CreateWindowExW(DWORD dwExStyle,LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);
#ifdef UNICODE
#define CreateWindowEx CreateWindowExW
#else
#define CreateWindowEx CreateWindowExA
#endif 
#define CreateWindowA(lpClassName,lpWindowName,dwStyle,x,y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam) CreateWindowExA(0L,lpClassName,lpWindowName,dwStyle,x,y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam)
#define CreateWindowW(lpClassName,lpWindowName,dwStyle,x,y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam) CreateWindowExW(0L,lpClassName,lpWindowName,dwStyle,x,y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam)
#ifdef UNICODE
#define CreateWindow CreateWindowW
#else
#define CreateWindow CreateWindowA
#endif 
*/
// WINUSERAPI BOOL WINAPI IsWindow(HWND hWnd);
// WINUSERAPI BOOL WINAPI IsMenu(HMENU hMenu);
// WINUSERAPI BOOL WINAPI IsChild(HWND hWndParent,HWND hWnd);
// WINUSERAPI BOOL WINAPI DestroyWindow(HWND hWnd);
// WINUSERAPI BOOL WINAPI ShowWindow(HWND hWnd,int nCmdShow);
#if(WINVER >=0x0500)
// WINUSERAPI BOOL WINAPI AnimateWindow(HWND hWnd,DWORD dwTime,DWORD dwFlags);
#endif 
#if(_WIN32_WINNT >=0x0500)
#if defined(_WINGDI_) && !defined(NOGDI)
WINUSERAPI BOOL WINAPI UpdateLayeredWindow(HWND hWnd,HDC hdcDst,POINT *pptDst,SIZE *psize,HDC hdcSrc,POINT *pptSrc,COLORREF crKey,BLENDFUNCTION *pblend,DWORD dwFlags);
typedef struct tagUPDATELAYEREDWINDOWINFO {
	DWORD cbSize;
	HDC hdcDst;
	POINT CONST *pptDst;
	SIZE CONST *psize;
	HDC hdcSrc;
	POINT CONST *pptSrc;
	COLORREF crKey;
	BLENDFUNCTION CONST *pblend;
	DWORD dwFlags;
	RECT CONST *prcDirty;
} UPDATELAYEREDWINDOWINFO,*PUPDATELAYEREDWINDOWINFO;
#if (_WIN32_WINNT < 0x0502)
typedef 
#endif 
WINUSERAPI BOOL WINAPI UpdateLayeredWindowIndirect(HWND hWnd,UPDATELAYEREDWINDOWINFO CONST *pULWInfo);
#endif
#if(_WIN32_WINNT >=0x0501)
WINUSERAPI BOOL WINAPI GetLayeredWindowAttributes(HWND hwnd,COLORREF *pcrKey,BYTE *pbAlpha,DWORD *pdwFlags);
#define PW_CLIENTONLY 1
WINUSERAPI BOOL WINAPI PrintWindow(HWND hwnd,HDC hdcBlt,UINT nFlags);
#endif 
WINUSERAPI BOOL WINAPI SetLayeredWindowAttributes(HWND hwnd,COLORREF crKey,BYTE bAlpha,DWORD dwFlags);
#define LWA_COLORKEY 1
#define LWA_ALPHA 2
#define ULW_COLORKEY 1
#define ULW_ALPHA 2
#define ULW_OPAQUE 4
#define ULW_EX_NORESIZE 8
#endif 
#if(WINVER >=0x0400)
// WINUSERAPI BOOL WINAPI ShowWindowAsync(HWND hWnd,int nCmdShow);
#endif 
// WINUSERAPI BOOL WINAPI FlashWindow(HWND hWnd,BOOL bInvert);
/*
#if(WINVER >=0x0500)
typedef struct {
	UINT cbSize;
	HWND hwnd;
	DWORD dwFlags;
	UINT uCount;
	DWORD dwTimeout;
} FLASHWINFO,*PFLASHWINFO;
WINUSERAPI BOOL WINAPI FlashWindowEx(PFLASHWINFO pfwi);

#define FLASHW_STOP 0
#define FLASHW_CAPTION 1
#define FLASHW_TRAY 2
#define FLASHW_ALL (FLASHW_CAPTION|FLASHW_TRAY)
#define FLASHW_TIMER 4
#define FLASHW_TIMERNOFG 12
#endif 
WINUSERAPI BOOL WINAPI ShowOwnedPopups(HWND hWnd,BOOL fShow);
WINUSERAPI BOOL WINAPI OpenIcon(HWND hWnd);
WINUSERAPI BOOL WINAPI CloseWindow(HWND hWnd);
WINUSERAPI BOOL WINAPI MoveWindow(HWND hWnd,int X,int Y,int nWidth,int nHeight,BOOL bRepaint);
WINUSERAPI BOOL WINAPI SetWindowPos(HWND hWnd,HWND hWndInsertAfter,int X,int Y,int cx,int cy,UINT uFlags);
WINUSERAPI BOOL WINAPI GetWindowPlacement(HWND hWnd,WINDOWPLACEMENT *lpwndpl);
WINUSERAPI BOOL WINAPI SetWindowPlacement(HWND hWnd,CONST WINDOWPLACEMENT *lpwndpl);
*/
#define NODEFERWINDOWPOS

#ifndef NODEFERWINDOWPOS
WINUSERAPI HDWP WINAPI BeginDeferWindowPos(int nNumWindows);
WINUSERAPI HDWP WINAPI DeferWindowPos(HDWP hWinPosInfo,HWND hWnd,HWND hWndInsertAfter,int x,int y,int cx,int cy,UINT uFlags);
WINUSERAPI BOOL WINAPI EndDeferWindowPos(HDWP hWinPosInfo);
#endif 
/*
WINUSERAPI BOOL WINAPI IsWindowVisible(HWND hWnd);
WINUSERAPI BOOL WINAPI IsIconic(HWND hWnd);
WINUSERAPI BOOL WINAPI AnyPopup(VOID);
WINUSERAPI BOOL WINAPI BringWindowToTop(HWND hWnd);
WINUSERAPI BOOL WINAPI IsZoomed(HWND hWnd);
*/
#define SWP_NOSIZE 1
#define SWP_NOMOVE 2
#define SWP_NOZORDER 4
#define SWP_NOREDRAW 8
#define SWP_NOACTIVATE 16
#define SWP_FRAMECHANGED 32 
#define SWP_SHOWWINDOW 64
#define SWP_HIDEWINDOW 128
#define SWP_NOCOPYBITS 256
#define SWP_NOOWNERZORDER 512 
#define SWP_NOSENDCHANGING 1024 
#define SWP_DRAWFRAME SWP_FRAMECHANGED
#define SWP_NOREPOSITION SWP_NOOWNERZORDER
#if(WINVER >=0x0400)
#define SWP_DEFERERASE 0x2000
#define SWP_ASYNCWINDOWPOS 0x4000
#endif 
#define HWND_TOP ((HWND)0)
#define HWND_BOTTOM ((HWND)1)
#define HWND_TOPMOST ((HWND)-1)
#define HWND_NOTOPMOST ((HWND)-2)
#ifndef NOCTLMGR
#include <pshpack2.h>
typedef struct {
	DWORD style;
	DWORD dwExtendedStyle;
	WORD cdit;
	short x;
	short y;
	short cx;
	short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;
#ifdef UNICODE
typedef LPDLGTEMPLATEW LPDLGTEMPLATE;
#else
typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
#endif 
typedef CONST DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef CONST DLGTEMPLATE *LPCDLGTEMPLATEW;
#ifdef UNICODE
typedef LPCDLGTEMPLATEW LPCDLGTEMPLATE;
#else
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
#endif 
typedef struct {
	DWORD style;
	DWORD dwExtendedStyle;
	short x;
	short y;
	short cx;
	short cy;
	WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
#ifdef UNICODE
typedef PDLGITEMTEMPLATEW PDLGITEMTEMPLATE;
#else
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
#endif 
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
#ifdef UNICODE
typedef LPDLGITEMTEMPLATEW LPDLGITEMTEMPLATE;
#else
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
#endif 
#include <poppack.h> 
WINUSERAPI HWND WINAPI CreateDialogParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
WINUSERAPI HWND WINAPI CreateDialogParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
#ifdef UNICODE
#define CreateDialogParam CreateDialogParamW
#else
#define CreateDialogParam CreateDialogParamA
#endif 
WINUSERAPI HWND WINAPI CreateDialogIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
WINUSERAPI HWND WINAPI CreateDialogIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
#ifdef UNICODE
#define CreateDialogIndirectParam CreateDialogIndirectParamW
#else
#define CreateDialogIndirectParam CreateDialogIndirectParamA
#endif 
#define CreateDialogA(hInstance,lpName,hWndParent,lpDialogFunc) CreateDialogParamA(hInstance,lpName,hWndParent,lpDialogFunc,0L)
#define CreateDialogW(hInstance,lpName,hWndParent,lpDialogFunc) CreateDialogParamW(hInstance,lpName,hWndParent,lpDialogFunc,0L)
#ifdef UNICODE
#define CreateDialog CreateDialogW
#else
#define CreateDialog CreateDialogA
#endif 
#define CreateDialogIndirectA(hInstance,lpTemplate,hWndParent,lpDialogFunc) CreateDialogIndirectParamA(hInstance,lpTemplate,hWndParent,lpDialogFunc,0L)
#define CreateDialogIndirectW(hInstance,lpTemplate,hWndParent,lpDialogFunc) CreateDialogIndirectParamW(hInstance,lpTemplate,hWndParent,lpDialogFunc,0L)
#ifdef UNICODE
#define CreateDialogIndirect CreateDialogIndirectW
#else
#define CreateDialogIndirect CreateDialogIndirectA
#endif 
WINUSERAPI INT_PTR WINAPI DialogBoxParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
WINUSERAPI INT_PTR WINAPI DialogBoxParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
#ifdef UNICODE
#define DialogBoxParam DialogBoxParamW
#else
#define DialogBoxParam DialogBoxParamA
#endif 
WINUSERAPI INT_PTR WINAPI DialogBoxIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
WINUSERAPI INT_PTR WINAPI DialogBoxIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
#ifdef UNICODE
#define DialogBoxIndirectParam DialogBoxIndirectParamW
#else
#define DialogBoxIndirectParam DialogBoxIndirectParamA
#endif 
#define DialogBoxA(hInstance,lpTemplate,hWndParent,lpDialogFunc) DialogBoxParamA(hInstance,lpTemplate,hWndParent,lpDialogFunc,0L)
#define DialogBoxW(hInstance,lpTemplate,hWndParent,lpDialogFunc) DialogBoxParamW(hInstance,lpTemplate,hWndParent,lpDialogFunc,0L)
#ifdef UNICODE
#define DialogBox DialogBoxW
#else
#define DialogBox DialogBoxA
#endif 
#define DialogBoxIndirectA(hInstance,lpTemplate,hWndParent,lpDialogFunc) DialogBoxIndirectParamA(hInstance,lpTemplate,hWndParent,lpDialogFunc,0L)
#define DialogBoxIndirectW(hInstance,lpTemplate,hWndParent,lpDialogFunc) DialogBoxIndirectParamW(hInstance,lpTemplate,hWndParent,lpDialogFunc,0L)
#ifdef UNICODE
#define DialogBoxIndirect DialogBoxIndirectW
#else
#define DialogBoxIndirect DialogBoxIndirectA
#endif 
WINUSERAPI BOOL WINAPI EndDialog(HWND hDlg,INT_PTR nResult);
WINUSERAPI HWND WINAPI GetDlgItem(HWND hDlg,int nIDDlgItem);
WINUSERAPI BOOL WINAPI SetDlgItemInt(HWND hDlg,int nIDDlgItem,UINT uValue,BOOL bSigned);
WINUSERAPI UINT WINAPI GetDlgItemInt(HWND hDlg,int nIDDlgItem,BOOL *lpTranslated,BOOL bSigned);
WINUSERAPI BOOL WINAPI SetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPCSTR lpString);
WINUSERAPI BOOL WINAPI SetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPCWSTR lpString);
#ifdef UNICODE
#define SetDlgItemText SetDlgItemTextW
#else
#define SetDlgItemText SetDlgItemTextA
#endif 
WINUSERAPI UINT WINAPI GetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPSTR lpString,int cchMax);
WINUSERAPI UINT WINAPI GetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPWSTR lpString,int cchMax);
#ifdef UNICODE
#define GetDlgItemText GetDlgItemTextW
#else
#define GetDlgItemText GetDlgItemTextA
#endif 
WINUSERAPI BOOL WINAPI CheckDlgButton(HWND hDlg,int nIDButton,UINT uCheck);
WINUSERAPI BOOL WINAPI CheckRadioButton(HWND hDlg,int nIDFirstButton,int nIDLastButton,int nIDCheckButton);
WINUSERAPI UINT WINAPI IsDlgButtonChecked(HWND hDlg,int nIDButton);
WINUSERAPI LRESULT WINAPI SendDlgItemMessageA(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI LRESULT WINAPI SendDlgItemMessageW(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define SendDlgItemMessage SendDlgItemMessageW
#else
#define SendDlgItemMessage SendDlgItemMessageA
#endif 
WINUSERAPI HWND WINAPI GetNextDlgGroupItem(HWND hDlg,HWND hCtl,BOOL bPrevious);
WINUSERAPI HWND WINAPI GetNextDlgTabItem(HWND hDlg,HWND hCtl,BOOL bPrevious);
// WINUSERAPI int WINAPI GetDlgCtrlID(HWND hWnd);
// WINUSERAPI long WINAPI GetDialogBaseUnits(VOID);
WINUSERAPI 
#ifndef _MAC
LRESULT WINAPI 
#else
LRESULT CALLBACK 
#endif
DefDlgProcA(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
WINUSERAPI 
#ifndef _MAC
LRESULT WINAPI 
#else
LRESULT CALLBACK 
#endif
DefDlgProcW(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define DefDlgProc DefDlgProcW
#else
#define DefDlgProc DefDlgProcA
#endif 
#ifndef _MAC
#define DLGWINDOWEXTRA 30
#else
#define DLGWINDOWEXTRA 48
#endif
#endif 

#ifndef NOMSG
WINUSERAPI BOOL WINAPI CallMsgFilterA(LPMSG lpMsg,int nCode);
WINUSERAPI BOOL WINAPI CallMsgFilterW(LPMSG lpMsg,int nCode);
#ifdef UNICODE
#define CallMsgFilter CallMsgFilterW
#else
#define CallMsgFilter CallMsgFilterA
#endif 
#endif 

#define NOCLIPBOARD

#ifndef NOCLIPBOARD
WINUSERAPI BOOL WINAPI OpenClipboard(HWND hWndNewOwner);
WINUSERAPI BOOL WINAPI CloseClipboard(VOID);
#if(WINVER >=0x0500)
WINUSERAPI DWORD WINAPI GetClipboardSequenceNumber(VOID);
#endif 
WINUSERAPI HWND WINAPI GetClipboardOwner(VOID);
WINUSERAPI HWND WINAPI SetClipboardViewer(HWND hWndNewViewer);
WINUSERAPI HWND WINAPI GetClipboardViewer(VOID);
WINUSERAPI BOOL WINAPI ChangeClipboardChain(HWND hWndRemove,HWND hWndNewNext);
WINUSERAPI HANDLE WINAPI SetClipboardData(UINT uFormat,HANDLE hMem);
WINUSERAPI HANDLE WINAPI GetClipboardData(UINT uFormat);
WINUSERAPI UINT WINAPI RegisterClipboardFormatA(LPCSTR lpszFormat);
WINUSERAPI UINT WINAPI RegisterClipboardFormatW(LPCWSTR lpszFormat);
#ifdef UNICODE
#define RegisterClipboardFormat RegisterClipboardFormatW
#else
#define RegisterClipboardFormat RegisterClipboardFormatA
#endif 
WINUSERAPI int WINAPI CountClipboardFormats(VOID);
WINUSERAPI UINT WINAPI EnumClipboardFormats(UINT format);
WINUSERAPI int WINAPI GetClipboardFormatNameA(UINT format,LPSTR lpszFormatName,int cchMaxCount);
WINUSERAPI int WINAPI GetClipboardFormatNameW(UINT format,LPWSTR lpszFormatName,int cchMaxCount);
#ifdef UNICODE
#define GetClipboardFormatName GetClipboardFormatNameW
#else
#define GetClipboardFormatName GetClipboardFormatNameA
#endif 
WINUSERAPI BOOL WINAPI EmptyClipboard(VOID);
WINUSERAPI BOOL WINAPI IsClipboardFormatAvailable(UINT format);
WINUSERAPI int WINAPI GetPriorityClipboardFormat(UINT *paFormatPriorityList,int cFormats);
WINUSERAPI HWND WINAPI GetOpenClipboardWindow(VOID);
#endif 
/*
WINUSERAPI BOOL WINAPI CharToOemA(LPCSTR lpszSrc,LPSTR lpszDst);
WINUSERAPI BOOL WINAPI CharToOemW(LPCWSTR lpszSrc,LPSTR lpszDst);
#ifdef UNICODE
#define CharToOem CharToOemW
#else
#define CharToOem CharToOemA
#endif 
WINUSERAPI BOOL WINAPI OemToCharA(LPCSTR lpszSrc,LPSTR lpszDst);
WINUSERAPI BOOL WINAPI OemToCharW(LPCSTR lpszSrc,LPWSTR lpszDst);
#ifdef UNICODE
#define OemToChar OemToCharW
#else
#define OemToChar OemToCharA
#endif 
WINUSERAPI BOOL WINAPI CharToOemBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
WINUSERAPI BOOL WINAPI CharToOemBuffW(LPCWSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
#ifdef UNICODE
#define CharToOemBuff CharToOemBuffW
#else
#define CharToOemBuff CharToOemBuffA
#endif 
WINUSERAPI BOOL WINAPI OemToCharBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
WINUSERAPI BOOL WINAPI OemToCharBuffW(LPCSTR lpszSrc,LPWSTR lpszDst,DWORD cchDstLength);
#ifdef UNICODE
#define OemToCharBuff OemToCharBuffW
#else
#define OemToCharBuff OemToCharBuffA
#endif 
WINUSERAPI LPSTR WINAPI CharUpperA(LPSTR lpsz);
WINUSERAPI LPWSTR WINAPI CharUpperW(LPWSTR lpsz);
#ifdef UNICODE
#define CharUpper CharUpperW
#else
#define CharUpper CharUpperA
#endif 
WINUSERAPI DWORD WINAPI CharUpperBuffA(LPSTR lpsz,DWORD cchLength);
WINUSERAPI DWORD WINAPI CharUpperBuffW(LPWSTR lpsz,DWORD cchLength);
#ifdef UNICODE
#define CharUpperBuff CharUpperBuffW
#else
#define CharUpperBuff CharUpperBuffA
#endif 
WINUSERAPI LPSTR WINAPI CharLowerA(LPSTR lpsz);
WINUSERAPI LPWSTR WINAPI CharLowerW(LPWSTR lpsz);
#ifdef UNICODE
#define CharLower CharLowerW
#else
#define CharLower CharLowerA
#endif 
WINUSERAPI DWORD WINAPI CharLowerBuffA(LPSTR lpsz,DWORD cchLength);
WINUSERAPI DWORD WINAPI CharLowerBuffW(LPWSTR lpsz,DWORD cchLength);
#ifdef UNICODE
#define CharLowerBuff CharLowerBuffW
#else
#define CharLowerBuff CharLowerBuffA
#endif 
WINUSERAPI LPSTR WINAPI CharNextA(LPCSTR lpsz);
WINUSERAPI LPWSTR WINAPI CharNextW(LPCWSTR lpsz);
#ifdef UNICODE
#define CharNext CharNextW
#else
#define CharNext CharNextA
#endif 
WINUSERAPI LPSTR WINAPI CharPrevA(LPCSTR lpszStart,LPCSTR lpszCurrent);
WINUSERAPI LPWSTR WINAPI CharPrevW(LPCWSTR lpszStart,LPCWSTR lpszCurrent);
#ifdef UNICODE
#define CharPrev CharPrevW
#else
#define CharPrev CharPrevA
#endif 
#if(WINVER >=0x0400)
WINUSERAPI LPSTR WINAPI CharNextExA(WORD CodePage,LPCSTR lpCurrentChar,DWORD dwFlags);
WINUSERAPI LPSTR WINAPI CharPrevExA(WORD CodePage,LPCSTR lpStart,LPCSTR lpCurrentChar,DWORD dwFlags);
#endif 
*/
#define AnsiToOem CharToOemA
#define OemToAnsi OemToCharA
#define AnsiToOemBuff CharToOemBuffA
#define OemToAnsiBuff OemToCharBuffA
#define AnsiUpper CharUpperA
#define AnsiUpperBuff CharUpperBuffA
#define AnsiLower CharLowerA
#define AnsiLowerBuff CharLowerBuffA
#define AnsiNext CharNextA
#define AnsiPrev CharPrevA

#define NOLANGUAGE

#ifndef NOLANGUAGE
WINUSERAPI BOOL WINAPI IsCharAlphaA(CHAR ch);
WINUSERAPI BOOL WINAPI IsCharAlphaW(WCHAR ch);
#ifdef UNICODE
#define IsCharAlpha IsCharAlphaW
#else
#define IsCharAlpha IsCharAlphaA
#endif 
WINUSERAPI BOOL WINAPI IsCharAlphaNumericA(CHAR ch);
WINUSERAPI BOOL WINAPI IsCharAlphaNumericW(WCHAR ch);
#ifdef UNICODE
#define IsCharAlphaNumeric IsCharAlphaNumericW
#else
#define IsCharAlphaNumeric IsCharAlphaNumericA
#endif 
WINUSERAPI BOOL WINAPI IsCharUpperA(CHAR ch);
WINUSERAPI BOOL WINAPI IsCharUpperW(WCHAR ch);
#ifdef UNICODE
#define IsCharUpper IsCharUpperW
#else
#define IsCharUpper IsCharUpperA
#endif 
WINUSERAPI BOOL WINAPI IsCharLowerA(CHAR ch);
WINUSERAPI BOOL WINAPI IsCharLowerW(WCHAR ch);
#ifdef UNICODE
#define IsCharLower IsCharLowerW
#else
#define IsCharLower IsCharLowerA
#endif 
#endif 
/*
WINUSERAPI HWND WINAPI SetFocus(HWND hWnd);
WINUSERAPI HWND WINAPI GetActiveWindow(VOID);
WINUSERAPI HWND WINAPI GetFocus(VOID);
WINUSERAPI UINT WINAPI GetKBCodePage(VOID);
WINUSERAPI SHORT WINAPI GetKeyState(int nVirtKey);
WINUSERAPI SHORT WINAPI GetAsyncKeyState(int vKey);
WINUSERAPI BOOL WINAPI GetKeyboardState(PBYTE lpKeyState);
WINUSERAPI BOOL WINAPI SetKeyboardState(LPBYTE lpKeyState);
WINUSERAPI int WINAPI GetKeyNameTextA(LONG lParam,LPSTR lpString,int cchSize);
WINUSERAPI int WINAPI GetKeyNameTextW(LONG lParam,LPWSTR lpString,int cchSize);
#ifdef UNICODE
#define GetKeyNameText GetKeyNameTextW
#else
#define GetKeyNameText GetKeyNameTextA
#endif 
WINUSERAPI int WINAPI GetKeyboardType(int nTypeFlag);
WINUSERAPI int WINAPI ToAscii(UINT uVirtKey,UINT uScanCode,CONST BYTE *lpKeyState,LPWORD lpChar,UINT uFlags);
#if(WINVER >=0x0400)
WINUSERAPI int WINAPI ToAsciiEx(UINT uVirtKey,UINT uScanCode,CONST BYTE *lpKeyState,LPWORD lpChar,UINT uFlags,HKL dwhkl);
#endif 
WINUSERAPI int WINAPI ToUnicode(UINT wVirtKey,UINT wScanCode,CONST BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags);
WINUSERAPI DWORD WINAPI OemKeyScan(WORD wOemChar);
WINUSERAPI SHORT WINAPI VkKeyScanA(CHAR ch);
WINUSERAPI SHORT WINAPI VkKeyScanW(WCHAR ch);
#ifdef UNICODE
#define VkKeyScan VkKeyScanW
#else
#define VkKeyScan VkKeyScanA
#endif 
#if(WINVER >=0x0400)
WINUSERAPI SHORT WINAPI VkKeyScanExA(CHAR ch,HKL dwhkl);
WINUSERAPI SHORT WINAPI VkKeyScanExW(WCHAR ch,HKL dwhkl);
#ifdef UNICODE
#define VkKeyScanEx VkKeyScanExW
#else
#define VkKeyScanEx VkKeyScanExA
#endif 
#endif 
*/
#define KEYEVENTF_EXTENDEDKEY 1
#define KEYEVENTF_KEYUP 2
#if(_WIN32_WINNT >=0x0500)
#define KEYEVENTF_UNICODE 4
#define KEYEVENTF_SCANCODE 8
#endif 
// WINUSERAPI VOID WINAPI keybd_event(BYTE bVk,BYTE bScan,DWORD dwFlags,ULONG_PTR dwExtraInfo);
#define MOUSEEVENTF_MOVE 1 
#define MOUSEEVENTF_LEFTDOWN 2 
#define MOUSEEVENTF_LEFTUP 4 
#define MOUSEEVENTF_RIGHTDOWN 8 
#define MOUSEEVENTF_RIGHTUP 16 
#define MOUSEEVENTF_MIDDLEDOWN 32 
#define MOUSEEVENTF_MIDDLEUP 64 
#define MOUSEEVENTF_XDOWN 128 
#define MOUSEEVENTF_XUP 256 
#define MOUSEEVENTF_WHEEL 2048 
#define MOUSEEVENTF_VIRTUALDESK 0x4000 
#define MOUSEEVENTF_ABSOLUTE 0x8000 
// WINUSERAPI VOID WINAPI mouse_event(DWORD dwFlags,DWORD dx,DWORD dy,DWORD dwData,ULONG_PTR dwExtraInfo);
#if (_WIN32_WINNT > 0x0400)
typedef struct tagMOUSEINPUT {
	LONG dx;
	LONG dy;
	DWORD mouseData;
	DWORD dwFlags;
	DWORD time;
	ULONG_PTR dwExtraInfo;
} MOUSEINPUT,*PMOUSEINPUT,FAR* LPMOUSEINPUT;
typedef struct tagKEYBDINPUT {
	WORD wVk;
	WORD wScan;
	DWORD dwFlags;
	DWORD time;
	ULONG_PTR dwExtraInfo;
} KEYBDINPUT,*PKEYBDINPUT,FAR* LPKEYBDINPUT;
typedef struct tagHARDWAREINPUT {
	DWORD uMsg;
	WORD wParamL;
	WORD wParamH;
} HARDWAREINPUT,*PHARDWAREINPUT,FAR* LPHARDWAREINPUT;
#define INPUT_MOUSE 0
#define INPUT_KEYBOARD 1
#define INPUT_HARDWARE 2
typedef struct tagINPUT {
	DWORD type;
union 
	{
		MOUSEINPUT mi;
		KEYBDINPUT ki;
		HARDWAREINPUT hi;
	};
} INPUT,*PINPUT,FAR* LPINPUT;
WINUSERAPI UINT WINAPI SendInput(UINT cInputs,LPINPUT pInputs,int cbSize); 
#endif 
#if(_WIN32_WINNT >=0x0500)
typedef struct tagLASTINPUTINFO {
	UINT cbSize;
	DWORD dwTime;
} LASTINPUTINFO,* PLASTINPUTINFO;
WINUSERAPI BOOL WINAPI GetLastInputInfo(PLASTINPUTINFO plii);
#endif 
/*
WINUSERAPI UINT WINAPI MapVirtualKeyA(UINT uCode,UINT uMapType);
WINUSERAPI UINT WINAPI MapVirtualKeyW(UINT uCode,UINT uMapType);
#ifdef UNICODE
#define MapVirtualKey MapVirtualKeyW
#else
#define MapVirtualKey MapVirtualKeyA
#endif 

#if(WINVER >=0x0400)
WINUSERAPI UINT WINAPI MapVirtualKeyExA(UINT uCode,UINT uMapType,HKL dwhkl);
WINUSERAPI UINT WINAPI MapVirtualKeyExW(UINT uCode,UINT uMapType,HKL dwhkl);
#ifdef UNICODE
#define MapVirtualKeyEx MapVirtualKeyExW
#else
#define MapVirtualKeyEx MapVirtualKeyExA
#endif 
#endif 

WINUSERAPI BOOL WINAPI GetInputState(VOID);
WINUSERAPI DWORD WINAPI GetQueueStatus(UINT flags);
WINUSERAPI HWND WINAPI GetCapture(VOID);
WINUSERAPI HWND WINAPI SetCapture(HWND hWnd);
WINUSERAPI BOOL WINAPI ReleaseCapture(VOID);
WINUSERAPI DWORD WINAPI MsgWaitForMultipleObjects(DWORD nCount,CONST HANDLE *pHandles,BOOL fWaitAll,DWORD dwMilliseconds,DWORD dwWakeMask);
WINUSERAPI DWORD WINAPI MsgWaitForMultipleObjectsEx(DWORD nCount,CONST HANDLE *pHandles,DWORD dwMilliseconds,DWORD dwWakeMask,DWORD dwFlags);
*/
#define MWMO_WAITALL 1
#define MWMO_ALERTABLE 2
#define MWMO_INPUTAVAILABLE 4
#define QS_KEY 1
#define QS_MOUSEMOVE 2
#define QS_MOUSEBUTTON 4
#define QS_POSTMESSAGE 8
#define QS_TIMER 16
#define QS_PAINT 32
#define QS_SENDMESSAGE 64
#define QS_HOTKEY 128
#define QS_ALLPOSTMESSAGE 256
#if(_WIN32_WINNT >=0x0501)
#define QS_RAWINPUT 1024
#endif 
#define QS_MOUSE (QS_MOUSEMOVE|QS_MOUSEBUTTON)
#if (_WIN32_WINNT >=0x0501)
#define QS_INPUT (QS_MOUSE|QS_KEY|QS_RAWINPUT)
#else
#define QS_INPUT (QS_MOUSE|QS_KEY)
#endif 
#define QS_ALLEVENTS (QS_INPUT|QS_POSTMESSAGE|QS_TIMER|QS_PAINT|QS_HOTKEY)
#define QS_ALLINPUT (QS_INPUT|QS_POSTMESSAGE|QS_TIMER|QS_PAINT|QS_HOTKEY|QS_SENDMESSAGE)
#define USER_TIMER_MAXIMUM 0x7fffffff
#define USER_TIMER_MINIMUM 10
/*
WINUSERAPI UINT_PTR WINAPI SetTimer(HWND hWnd,UINT_PTR nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc);
WINUSERAPI BOOL WINAPI KillTimer(HWND hWnd,UINT_PTR uIDEvent);
// WINUSERAPI BOOL WINAPI IsWindowUnicode(HWND hWnd);
WINUSERAPI BOOL WINAPI EnableWindow(HWND hWnd,BOOL bEnable);
// WINUSERAPI BOOL WINAPI IsWindowEnabled(HWND hWnd);
WINUSERAPI HACCEL WINAPI LoadAcceleratorsA(HINSTANCE hInstance,LPCSTR lpTableName);
WINUSERAPI HACCEL WINAPI LoadAcceleratorsW(HINSTANCE hInstance,LPCWSTR lpTableName);
#ifdef UNICODE
#define LoadAccelerators LoadAcceleratorsW
#else
#define LoadAccelerators LoadAcceleratorsA
#endif 
WINUSERAPI HACCEL WINAPI CreateAcceleratorTableA(LPACCEL paccel,int cAccel);
WINUSERAPI HACCEL WINAPI CreateAcceleratorTableW(LPACCEL paccel,int cAccel);
#ifdef UNICODE
#define CreateAcceleratorTable CreateAcceleratorTableW
#else
#define CreateAcceleratorTable CreateAcceleratorTableA
#endif 
// WINUSERAPI BOOL WINAPI DestroyAcceleratorTable(HACCEL hAccel);
WINUSERAPI int WINAPI CopyAcceleratorTableA(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);
WINUSERAPI int WINAPI CopyAcceleratorTableW(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);
#ifdef UNICODE
#define CopyAcceleratorTable CopyAcceleratorTableW
#else
#define CopyAcceleratorTable CopyAcceleratorTableA
#endif 
*/
#ifndef NOMSG
WINUSERAPI int WINAPI TranslateAcceleratorA(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
WINUSERAPI int WINAPI TranslateAcceleratorW(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
#ifdef UNICODE
#define TranslateAccelerator TranslateAcceleratorW
#else
#define TranslateAccelerator TranslateAcceleratorA
#endif 
#endif 
#ifndef NOSYSMETRICS
#define SM_CXSCREEN 0
#define SM_CYSCREEN 1
#define SM_CXVSCROLL 2
#define SM_CYHSCROLL 3
#define SM_CYCAPTION 4
#define SM_CXBORDER 5
#define SM_CYBORDER 6
#define SM_CXDLGFRAME 7
#define SM_CYDLGFRAME 8
#define SM_CYVTHUMB 9
#define SM_CXHTHUMB 10
#define SM_CXICON 11
#define SM_CYICON 12
#define SM_CXCURSOR 13
#define SM_CYCURSOR 14
#define SM_CYMENU 15
#define SM_CXFULLSCREEN 16
#define SM_CYFULLSCREEN 17
#define SM_CYKANJIWINDOW 18
#define SM_MOUSEPRESENT 19
#define SM_CYVSCROLL 20
#define SM_CXHSCROLL 21
#define SM_DEBUG 22
#define SM_SWAPBUTTON 23
#define SM_RESERVED1 24
#define SM_RESERVED2 25
#define SM_RESERVED3 26
#define SM_RESERVED4 27
#define SM_CXMIN 28
#define SM_CYMIN 29
#define SM_CXSIZE 30
#define SM_CYSIZE 31
#define SM_CXFRAME 32
#define SM_CYFRAME 33
#define SM_CXMINTRACK 34
#define SM_CYMINTRACK 35
#define SM_CXDOUBLECLK 36
#define SM_CYDOUBLECLK 37
#define SM_CXICONSPACING 38
#define SM_CYICONSPACING 39
#define SM_MENUDROPALIGNMENT 40
#define SM_PENWINDOWS 41
#define SM_DBCSENABLED 42
#define SM_CMOUSEBUTTONS 43
#if(WINVER >=0x0400)
#define SM_CXFIXEDFRAME SM_CXDLGFRAME 
#define SM_CYFIXEDFRAME SM_CYDLGFRAME 
#define SM_CXSIZEFRAME SM_CXFRAME 
#define SM_CYSIZEFRAME SM_CYFRAME 
#define SM_SECURE 44
#define SM_CXEDGE 45
#define SM_CYEDGE 46
#define SM_CXMINSPACING 47
#define SM_CYMINSPACING 48
#define SM_CXSMICON 49
#define SM_CYSMICON 50
#define SM_CYSMCAPTION 51
#define SM_CXSMSIZE 52
#define SM_CYSMSIZE 53
#define SM_CXMENUSIZE 54
#define SM_CYMENUSIZE 55
#define SM_ARRANGE 56
#define SM_CXMINIMIZED 57
#define SM_CYMINIMIZED 58
#define SM_CXMAXTRACK 59
#define SM_CYMAXTRACK 60
#define SM_CXMAXIMIZED 61
#define SM_CYMAXIMIZED 62
#define SM_NETWORK 63
#define SM_CLEANBOOT 67
#define SM_CXDRAG 68
#define SM_CYDRAG 69
#endif 
#define SM_SHOWSOUNDS 70
#if(WINVER >=0x0400)
#define SM_CXMENUCHECK 71 
#define SM_CYMENUCHECK 72
#define SM_SLOWMACHINE 73
#define SM_MIDEASTENABLED 74
#endif 
#if (WINVER >=0x0500)||(_WIN32_WINNT >=0x0400)
#define SM_MOUSEWHEELPRESENT 75
#endif
#if(WINVER >=0x0500)
#define SM_XVIRTUALSCREEN 76
#define SM_YVIRTUALSCREEN 77
#define SM_CXVIRTUALSCREEN 78
#define SM_CYVIRTUALSCREEN 79
#define SM_CMONITORS 80
#define SM_SAMEDISPLAYFORMAT 81
#endif 
#if(_WIN32_WINNT >=0x0500)
#define SM_IMMENABLED 82
#endif 
#if(_WIN32_WINNT >=0x0501)
#define SM_CXFOCUSBORDER 83
#define SM_CYFOCUSBORDER 84
#endif 
#if(_WIN32_WINNT >=0x0501)
#define SM_TABLETPC 86
#define SM_MEDIACENTER 87
#define SM_STARTER 88
#endif 
#if (WINVER < 0x0500) && (!defined(_WIN32_WINNT)||(_WIN32_WINNT < 0x0400))
#define SM_CMETRICS 76
#elif WINVER==0x500
#define SM_CMETRICS 83
#else
#define SM_CMETRICS 89
#endif
#if(WINVER >=0x0500)
#define SM_REMOTESESSION 0x1000
#if(_WIN32_WINNT >=0x0501)
#define SM_SHUTTINGDOWN 0x2000
#endif 
#if(WINVER >=0x0501)
#define SM_REMOTECONTROL 0x2001
#endif 
#if(WINVER >=0x0501)
#define SM_CARETBLINKINGENABLED 0x2002
#endif 
#endif 
// WINUSERAPI int WINAPI GetSystemMetrics(int nIndex);
#endif 

#define NOMENUS

#ifndef NOMENUS
WINUSERAPI HMENU WINAPI LoadMenuA(HINSTANCE hInstance,LPCSTR lpMenuName);
WINUSERAPI HMENU WINAPI LoadMenuW(HINSTANCE hInstance,LPCWSTR lpMenuName);
#ifdef UNICODE
#define LoadMenu LoadMenuW
#else
#define LoadMenu LoadMenuA
#endif 
WINUSERAPI HMENU WINAPI LoadMenuIndirectA(CONST MENUTEMPLATEA *lpMenuTemplate);
WINUSERAPI HMENU WINAPI LoadMenuIndirectW(CONST MENUTEMPLATEW *lpMenuTemplate);
#ifdef UNICODE
#define LoadMenuIndirect LoadMenuIndirectW
#else
#define LoadMenuIndirect LoadMenuIndirectA
#endif 
WINUSERAPI HMENU WINAPI GetMenu(HWND hWnd);
WINUSERAPI BOOL WINAPI SetMenu(HWND hWnd,HMENU hMenu);
WINUSERAPI BOOL WINAPI ChangeMenuA(HMENU hMenu,UINT cmd,LPCSTR lpszNewItem,UINT cmdInsert,UINT flags);
WINUSERAPI BOOL WINAPI ChangeMenuW(HMENU hMenu,UINT cmd,LPCWSTR lpszNewItem,UINT cmdInsert,UINT flags);
#ifdef UNICODE
#define ChangeMenu ChangeMenuW
#else
#define ChangeMenu ChangeMenuA
#endif 
WINUSERAPI BOOL WINAPI HiliteMenuItem(HWND hWnd,HMENU hMenu,UINT uIDHiliteItem,UINT uHilite);
WINUSERAPI int WINAPI GetMenuStringA(HMENU hMenu,UINT uIDItem,LPSTR lpString,int cchMax,UINT flags);
WINUSERAPI int WINAPI GetMenuStringW(HMENU hMenu,UINT uIDItem,LPWSTR lpString,int cchMax,UINT flags);
#ifdef UNICODE
#define GetMenuString GetMenuStringW
#else
#define GetMenuString GetMenuStringA
#endif 
WINUSERAPI UINT WINAPI GetMenuState(HMENU hMenu,UINT uId,UINT uFlags);
WINUSERAPI BOOL WINAPI DrawMenuBar(HWND hWnd);
#if(_WIN32_WINNT >=0x0501)
#define PMB_ACTIVE 1
#endif 
WINUSERAPI HMENU WINAPI GetSystemMenu(HWND hWnd,BOOL bRevert);
WINUSERAPI HMENU WINAPI CreateMenu(VOID);
WINUSERAPI HMENU WINAPI CreatePopupMenu(VOID);
WINUSERAPI BOOL WINAPI DestroyMenu(HMENU hMenu);
WINUSERAPI DWORD WINAPI CheckMenuItem(HMENU hMenu,UINT uIDCheckItem,UINT uCheck);
WINUSERAPI BOOL WINAPI EnableMenuItem(HMENU hMenu,UINT uIDEnableItem,UINT uEnable);
WINUSERAPI HMENU WINAPI GetSubMenu(HMENU hMenu,int nPos);
WINUSERAPI UINT WINAPI GetMenuItemID(HMENU hMenu,int nPos);
WINUSERAPI int WINAPI GetMenuItemCount(HMENU hMenu);
WINUSERAPI BOOL WINAPI InsertMenuA(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
WINUSERAPI BOOL WINAPI InsertMenuW(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
#ifdef UNICODE
#define InsertMenu InsertMenuW
#else
#define InsertMenu InsertMenuA
#endif 
WINUSERAPI BOOL WINAPI AppendMenuA(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
WINUSERAPI BOOL WINAPI AppendMenuW(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
#ifdef UNICODE
#define AppendMenu AppendMenuW
#else
#define AppendMenu AppendMenuA
#endif 
WINUSERAPI BOOL WINAPI ModifyMenuA(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
WINUSERAPI BOOL WINAPI ModifyMenuW(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
#ifdef UNICODE
#define ModifyMenu ModifyMenuW
#else
#define ModifyMenu ModifyMenuA
#endif 
WINUSERAPI BOOL WINAPI RemoveMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
WINUSERAPI BOOL WINAPI DeleteMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
WINUSERAPI BOOL WINAPI SetMenuItemBitmaps(HMENU hMenu,UINT uPosition,UINT uFlags,HBITMAP hBitmapUnchecked,HBITMAP hBitmapChecked);
WINUSERAPI LONG WINAPI GetMenuCheckMarkDimensions(VOID);
WINUSERAPI BOOL WINAPI TrackPopupMenu(HMENU hMenu,UINT uFlags,int x,int y,int nReserved,HWND hWnd,CONST RECT *prcRect);
#if(WINVER >=0x0400)
#define MNC_IGNORE 0
#define MNC_CLOSE 1
#define MNC_EXECUTE 2
#define MNC_SELECT 3
typedef struct tagTPMPARAMS {
	UINT cbSize; 
	RECT rcExclude; 
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;
WINUSERAPI BOOL WINAPI TrackPopupMenuEx(HMENU,UINT,int,int,HWND,LPTPMPARAMS);
#endif 
#if(WINVER >=0x0500)
#define MNS_NOCHECK 0x80000000
#define MNS_MODELESS 0x40000000
#define MNS_DRAGDROP 0x20000000
#define MNS_AUTODISMISS 0x10000000
#define MNS_NOTIFYBYPOS 0x8000000
#define MNS_CHECKORBMP 0x4000000
#define MIM_MAXHEIGHT 1
#define MIM_BACKGROUND 2
#define MIM_HELPID 4
#define MIM_MENUDATA 8
#define MIM_STYLE 16
#define MIM_APPLYTOSUBMENUS 0x80000000
typedef struct tagMENUINFO {
	DWORD cbSize;
	DWORD fMask;
	DWORD dwStyle;
	UINT cyMax;
	HBRUSH hbrBack;
	DWORD dwContextHelpID;
	ULONG_PTR dwMenuData;
} MENUINFO,*LPMENUINFO;
typedef MENUINFO CONST *LPCMENUINFO;
WINUSERAPI BOOL WINAPI GetMenuInfo(HMENU,LPMENUINFO);
WINUSERAPI BOOL WINAPI SetMenuInfo(HMENU,LPCMENUINFO);
WINUSERAPI BOOL WINAPI EndMenu(VOID);
#define MND_CONTINUE 0
#define MND_ENDMENU 1
typedef struct tagMENUGETOBJECTINFO {
	DWORD dwFlags;
	UINT uPos;
	HMENU hmenu;
	PVOID riid;
	PVOID pvObj;
} MENUGETOBJECTINFO,* PMENUGETOBJECTINFO;
#define MNGOF_TOPGAP 1
#define MNGOF_BOTTOMGAP 2
#define MNGO_NOINTERFACE 0
#define MNGO_NOERROR 1
#endif 
#if(WINVER >=0x0400)
#define MIIM_STATE 1
#define MIIM_ID 2
#define MIIM_SUBMENU 4
#define MIIM_CHECKMARKS 8
#define MIIM_TYPE 16
#define MIIM_DATA 32
#endif 
#if(WINVER >=0x0500)
#define MIIM_STRING 64
#define MIIM_BITMAP 128
#define MIIM_FTYPE 256
#define HBMMENU_CALLBACK ((HBITMAP) -1)
#define HBMMENU_SYSTEM ((HBITMAP) 1)
#define HBMMENU_MBAR_RESTORE ((HBITMAP) 2)
#define HBMMENU_MBAR_MINIMIZE ((HBITMAP) 3)
#define HBMMENU_MBAR_CLOSE ((HBITMAP) 5)
#define HBMMENU_MBAR_CLOSE_D ((HBITMAP) 6)
#define HBMMENU_MBAR_MINIMIZE_D ((HBITMAP) 7)
#define HBMMENU_POPUP_CLOSE ((HBITMAP) 8)
#define HBMMENU_POPUP_RESTORE ((HBITMAP) 9)
#define HBMMENU_POPUP_MAXIMIZE ((HBITMAP) 10)
#define HBMMENU_POPUP_MINIMIZE ((HBITMAP) 11)
#endif 
#if(WINVER >=0x0400)
typedef struct tagMENUITEMINFOA {
	UINT cbSize;
	UINT fMask;
	UINT fType; 
	UINT fState; 
	UINT wID; 
	HMENU hSubMenu; 
	HBITMAP hbmpChecked; 
	HBITMAP hbmpUnchecked; 
	ULONG_PTR dwItemData; 
	LPSTR dwTypeData; 
	UINT cch; 
#if(WINVER >=0x0500)
	HBITMAP hbmpItem; 
#endif 
} MENUITEMINFOA,*LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW {
	UINT cbSize;
	UINT fMask;
	UINT fType; 
	UINT fState; 
	UINT wID; 
	HMENU hSubMenu; 
	HBITMAP hbmpChecked; 
	HBITMAP hbmpUnchecked; 
	ULONG_PTR dwItemData; 
	LPWSTR dwTypeData; 
	UINT cch; 
#if(WINVER >=0x0500)
	HBITMAP hbmpItem; 
#endif 
} MENUITEMINFOW,*LPMENUITEMINFOW;
#ifdef UNICODE
typedef MENUITEMINFOW MENUITEMINFO;
typedef LPMENUITEMINFOW LPMENUITEMINFO;
#else
typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
#endif 
typedef MENUITEMINFOA CONST *LPCMENUITEMINFOA;
typedef MENUITEMINFOW CONST *LPCMENUITEMINFOW;
#ifdef UNICODE
typedef LPCMENUITEMINFOW LPCMENUITEMINFO;
#else
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
#endif 
WINUSERAPI BOOL WINAPI InsertMenuItemA(HMENU hmenu,UINT item,BOOL fByPosition,LPCMENUITEMINFOA lpmi);
WINUSERAPI BOOL WINAPI InsertMenuItemW(HMENU hmenu,UINT item,BOOL fByPosition,LPCMENUITEMINFOW lpmi);
#ifdef UNICODE
#define InsertMenuItem InsertMenuItemW
#else
#define InsertMenuItem InsertMenuItemA
#endif 
WINUSERAPI BOOL WINAPI GetMenuItemInfoA(HMENU hmenu,UINT item,BOOL fByPosition,LPMENUITEMINFOA lpmii);
WINUSERAPI BOOL WINAPI GetMenuItemInfoW(HMENU hmenu,UINT item,BOOL fByPosition,LPMENUITEMINFOW lpmii);
#ifdef UNICODE
#define GetMenuItemInfo GetMenuItemInfoW
#else
#define GetMenuItemInfo GetMenuItemInfoA
#endif 
WINUSERAPI BOOL WINAPI SetMenuItemInfoA(HMENU hmenu,UINT item,BOOL fByPositon,LPCMENUITEMINFOA lpmii);
WINUSERAPI BOOL WINAPI SetMenuItemInfoW(HMENU hmenu,UINT item,BOOL fByPositon,LPCMENUITEMINFOW lpmii);
#ifdef UNICODE
#define SetMenuItemInfo SetMenuItemInfoW
#else
#define SetMenuItemInfo SetMenuItemInfoA
#endif 
#define GMDI_USEDISABLED 1
#define GMDI_GOINTOPOPUPS 2
WINUSERAPI UINT WINAPI GetMenuDefaultItem(HMENU hMenu,UINT fByPos,UINT gmdiFlags);
WINUSERAPI BOOL WINAPI SetMenuDefaultItem(HMENU hMenu,UINT uItem,UINT fByPos);
WINUSERAPI BOOL WINAPI GetMenuItemRect(HWND hWnd,HMENU hMenu,UINT uItem,LPRECT lprcItem);
WINUSERAPI int WINAPI MenuItemFromPoint(HWND hWnd,HMENU hMenu,POINT ptScreen);
#endif 
#define TPM_LEFTBUTTON 0
#define TPM_RIGHTBUTTON 2
#define TPM_LEFTALIGN 0
#define TPM_CENTERALIGN 4
#define TPM_RIGHTALIGN 8
#if(WINVER >=0x0400)
#define TPM_TOPALIGN 0
#define TPM_VCENTERALIGN 16
#define TPM_BOTTOMALIGN 32
#define TPM_HORIZONTAL 0 
#define TPM_VERTICAL 64 
#define TPM_NONOTIFY 128 
#define TPM_RETURNCMD 256
#endif 
#if(WINVER >=0x0500)
#define TPM_RECURSE 1
#define TPM_HORPOSANIMATION 1024
#define TPM_HORNEGANIMATION 2048
#define TPM_VERPOSANIMATION 0x1000
#define TPM_VERNEGANIMATION 0x2000
#if(_WIN32_WINNT >=0x0500)
#define TPM_NOANIMATION 0x4000
#endif 
#if(_WIN32_WINNT >=0x0501)
#define TPM_LAYOUTRTL 0x8000
#endif 
#endif 
#endif 
/*
#if(WINVER >=0x0400)
typedef struct tagDROPSTRUCT {
	HWND hwndSource;
	HWND hwndSink;
	DWORD wFmt;
	ULONG_PTR dwData;
	POINT ptDrop;
	DWORD dwControlData;
} DROPSTRUCT,*PDROPSTRUCT,*LPDROPSTRUCT;
#define DOF_EXECUTABLE 0x8001 
#define DOF_DOCUMENT 0x8002
#define DOF_DIRECTORY 0x8003
#define DOF_MULTIPLE 0x8004
#define DOF_PROGMAN 1
#define DOF_SHELLDATA 2
#define DO_DROPFILE 0x454c4946
#define DO_PRINTFILE 0x544e5250
WINUSERAPI DWORD WINAPI DragObject(HWND hwndParent,HWND hwndFrom,UINT fmt,ULONG_PTR data,HCURSOR hcur);
WINUSERAPI BOOL WINAPI DragDetect(HWND hwnd,POINT pt);
#endif 
WINUSERAPI BOOL WINAPI DrawIcon(HDC hDC,int X,int Y,HICON hIcon);
*/
#ifndef NODRAWTEXT
#define DT_TOP 0
#define DT_LEFT 0
#define DT_CENTER 1
#define DT_RIGHT 2
#define DT_VCENTER 4
#define DT_BOTTOM 8
#define DT_WORDBREAK 16
#define DT_SINGLELINE 32
#define DT_EXPANDTABS 64
#define DT_TABSTOP 128
#define DT_NOCLIP 256
#define DT_EXTERNALLEADING 512
#define DT_CALCRECT 1024
#define DT_NOPREFIX 2048
#define DT_INTERNAL 0x1000
#if(WINVER >=0x0400)
#define DT_EDITCONTROL 0x2000
#define DT_PATH_ELLIPSIS 0x4000
#define DT_END_ELLIPSIS 0x8000
#define DT_MODIFYSTRING 0x10000
#define DT_RTLREADING 0x20000
#define DT_WORD_ELLIPSIS 0x40000
#if(WINVER >=0x0500)
#define DT_NOFULLWIDTHCHARBREAK 0x80000
#if(_WIN32_WINNT >=0x0500)
#define DT_HIDEPREFIX 0x100000
#define DT_PREFIXONLY 0x200000
#endif 
#endif 
typedef struct tagDRAWTEXTPARAMS {
	UINT cbSize;
	int iTabLength;
	int iLeftMargin;
	int iRightMargin;
	UINT uiLengthDrawn;
} DRAWTEXTPARAMS,*LPDRAWTEXTPARAMS;
#endif 
WINUSERAPI int WINAPI DrawTextA(HDC hdc,LPCSTR lpchText,int cchText,LPRECT lprc,UINT format);
WINUSERAPI int WINAPI DrawTextW(HDC hdc,LPCWSTR lpchText,int cchText,LPRECT lprc,UINT format);
#ifdef UNICODE
#define DrawText DrawTextW
#else
#define DrawText DrawTextA
#endif 
#if(WINVER >=0x0400)
WINUSERAPI int WINAPI DrawTextExA(HDC hdc,LPSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
WINUSERAPI int WINAPI DrawTextExW(HDC hdc,LPWSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
#ifdef UNICODE
#define DrawTextEx DrawTextExW
#else
#define DrawTextEx DrawTextExA
#endif 
#endif 
#endif 
// WINUSERAPI BOOL WINAPI GrayStringA(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
// WINUSERAPI BOOL WINAPI GrayStringW(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
#ifdef UNICODE
#define GrayString GrayStringW
#else
#define GrayString GrayStringA
#endif 
/*
#if(WINVER >=0x0400)
#define DST_COMPLEX 0
#define DST_TEXT 1
#define DST_PREFIXTEXT 2
#define DST_ICON 3
#define DST_BITMAP 4
#define DSS_NORMAL 0
#define DSS_UNION 16 
#define DSS_DISABLED 32
#define DSS_MONO 128
#if(_WIN32_WINNT >=0x0500)
#define DSS_HIDEPREFIX 512
#define DSS_PREFIXONLY 1024
#endif 
#define DSS_RIGHT 0x8000
WINUSERAPI BOOL WINAPI DrawStateA(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
WINUSERAPI BOOL WINAPI DrawStateW(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
#ifdef UNICODE
#define DrawState DrawStateW
#else
#define DrawState DrawStateA
#endif 
#endif 
WINUSERAPI LONG WINAPI TabbedTextOutA(HDC hdc,int x,int y,LPCSTR lpString,int cchChars,int nTabPositions,CONST INT *lpnTabStopPositions,int nTabOrigin);
WINUSERAPI LONG WINAPI TabbedTextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int cchChars,int nTabPositions,CONST INT *lpnTabStopPositions,int nTabOrigin);
#ifdef UNICODE
#define TabbedTextOut TabbedTextOutW
#else
#define TabbedTextOut TabbedTextOutA
#endif 
WINUSERAPI DWORD WINAPI GetTabbedTextExtentA(HDC hdc,LPCSTR lpString,int chCount,int nTabPositions,CONST INT *lpnTabStopPositions);
WINUSERAPI DWORD WINAPI GetTabbedTextExtentW(HDC hdc,LPCWSTR lpString,int chCount,int nTabPositions,CONST INT *lpnTabStopPositions);
#ifdef UNICODE
#define GetTabbedTextExtent GetTabbedTextExtentW
#else
#define GetTabbedTextExtent GetTabbedTextExtentA
#endif 
/*
WINUSERAPI BOOL WINAPI UpdateWindow(HWND hWnd);
WINUSERAPI HWND WINAPI SetActiveWindow(HWND hWnd);
WINUSERAPI HWND WINAPI GetForegroundWindow(VOID);
#if(WINVER >=0x0400)
WINUSERAPI BOOL WINAPI PaintDesktop(HDC hdc);
WINUSERAPI VOID WINAPI SwitchToThisWindow(HWND hwnd,BOOL fUnknown);
#endif 
WINUSERAPI BOOL WINAPI SetForegroundWindow(HWND hWnd);

#if(_WIN32_WINNT >=0x0500)
WINUSERAPI BOOL WINAPI AllowSetForegroundWindow(DWORD dwProcessId);
#define ASFW_ANY ((DWORD)-1)
WINUSERAPI BOOL WINAPI LockSetForegroundWindow(UINT uLockCode);
#define LSFW_LOCK 1
#define LSFW_UNLOCK 2
#endif 

WINUSERAPI HWND WINAPI WindowFromDC(HDC hDC);
WINUSERAPI HDC WINAPI GetDC(HWND hWnd);
WINUSERAPI HDC WINAPI GetDCEx(HWND hWnd,HRGN hrgnClip,DWORD flags);

#define DCX_WINDOW 1
#define DCX_CACHE 2
#define DCX_NORESETATTRS 4
#define DCX_CLIPCHILDREN 8
#define DCX_CLIPSIBLINGS 16
#define DCX_PARENTCLIP 32
#define DCX_EXCLUDERGN 64
#define DCX_INTERSECTRGN 128
#define DCX_EXCLUDEUPDATE 256
#define DCX_INTERSECTUPDATE 512
#define DCX_LOCKWINDOWUPDATE 1024
#define DCX_VALIDATE 0x200000

WINUSERAPI HDC WINAPI GetWindowDC(HWND hWnd);
WINUSERAPI int WINAPI ReleaseDC(HWND hWnd,HDC hDC);
WINUSERAPI HDC WINAPI BeginPaint(HWND hWnd,LPPAINTSTRUCT lpPaint);
WINUSERAPI BOOL WINAPI EndPaint(HWND hWnd,CONST PAINTSTRUCT *lpPaint);
WINUSERAPI BOOL WINAPI GetUpdateRect(HWND hWnd,LPRECT lpRect,BOOL bErase);
WINUSERAPI int WINAPI GetUpdateRgn(HWND hWnd,HRGN hRgn,BOOL bErase);
WINUSERAPI int WINAPI SetWindowRgn(HWND hWnd,HRGN hRgn,BOOL bRedraw);
WINUSERAPI int WINAPI GetWindowRgn(HWND hWnd,HRGN hRgn);
#if(_WIN32_WINNT >=0x0501)
WINUSERAPI int WINAPI GetWindowRgnBox(HWND hWnd,LPRECT lprc);
#endif 
WINUSERAPI int WINAPI ExcludeUpdateRgn(HDC hDC,HWND hWnd);
WINUSERAPI BOOL WINAPI InvalidateRect(HWND hWnd,CONST RECT *lpRect,BOOL bErase);
WINUSERAPI BOOL WINAPI ValidateRect(HWND hWnd,CONST RECT *lpRect);
WINUSERAPI BOOL WINAPI InvalidateRgn(HWND hWnd,HRGN hRgn,BOOL bErase);
WINUSERAPI BOOL WINAPI ValidateRgn(HWND hWnd,HRGN hRgn);
WINUSERAPI BOOL WINAPI RedrawWindow(HWND hWnd,CONST RECT *lprcUpdate,HRGN hrgnUpdate,UINT flags);
#define RDW_INVALIDATE 1
#define RDW_INTERNALPAINT 2
#define RDW_ERASE 4
#define RDW_VALIDATE 8
#define RDW_NOINTERNALPAINT 16
#define RDW_NOERASE 32
#define RDW_NOCHILDREN 64
#define RDW_ALLCHILDREN 128
#define RDW_UPDATENOW 256
#define RDW_ERASENOW 512
#define RDW_FRAME 1024
#define RDW_NOFRAME 2048
// WINUSERAPI BOOL WINAPI LockWindowUpdate(HWND hWndLock);
WINUSERAPI BOOL WINAPI ScrollWindow(HWND hWnd,int XAmount,int YAmount,CONST RECT *lpRect,CONST RECT *lpClipRect);
WINUSERAPI BOOL WINAPI ScrollDC(HDC hDC,int dx,int dy,CONST RECT *lprcScroll,CONST RECT *lprcClip,HRGN hrgnUpdate,LPRECT lprcUpdate);
WINUSERAPI int WINAPI ScrollWindowEx(HWND hWnd,int dx,int dy,CONST RECT *prcScroll,CONST RECT *prcClip,HRGN hrgnUpdate,LPRECT prcUpdate,UINT flags);
*/
#define SW_SCROLLCHILDREN 1 
#define SW_INVALIDATE 2 
#define SW_ERASE 4 
#if(WINVER >=0x0500)
#define SW_SMOOTHSCROLL 16 
#endif 
#ifndef NOSCROLL
WINUSERAPI int WINAPI SetScrollPos(HWND hWnd,int nBar,int nPos,BOOL bRedraw);
WINUSERAPI int WINAPI GetScrollPos(HWND hWnd,int nBar);
WINUSERAPI BOOL WINAPI SetScrollRange(HWND hWnd,int nBar,int nMinPos,int nMaxPos,BOOL bRedraw);
WINUSERAPI BOOL WINAPI GetScrollRange(HWND hWnd,int nBar,LPINT lpMinPos,LPINT lpMaxPos);
WINUSERAPI BOOL WINAPI ShowScrollBar(HWND hWnd,int wBar,BOOL bShow);
WINUSERAPI BOOL WINAPI EnableScrollBar(HWND hWnd,UINT wSBflags,UINT wArrows);
#define ESB_ENABLE_BOTH 0
#define ESB_DISABLE_BOTH 3
#define ESB_DISABLE_LEFT 1
#define ESB_DISABLE_RIGHT 2
#define ESB_DISABLE_UP 1
#define ESB_DISABLE_DOWN 2
#define ESB_DISABLE_LTUP ESB_DISABLE_LEFT
#define ESB_DISABLE_RTDN ESB_DISABLE_RIGHT
#endif 
/*
WINUSERAPI BOOL WINAPI SetPropA(HWND hWnd,LPCSTR lpString,HANDLE hData);
WINUSERAPI BOOL WINAPI SetPropW(HWND hWnd,LPCWSTR lpString,HANDLE hData);
#ifdef UNICODE
#define SetProp SetPropW
#else
#define SetProp SetPropA
#endif 
WINUSERAPI HANDLE WINAPI GetPropA(HWND hWnd,LPCSTR lpString);
WINUSERAPI HANDLE WINAPI GetPropW(HWND hWnd,LPCWSTR lpString);
#ifdef UNICODE
#define GetProp GetPropW
#else
#define GetProp GetPropA
#endif 
WINUSERAPI HANDLE WINAPI RemovePropA(HWND hWnd,LPCSTR lpString);
WINUSERAPI HANDLE WINAPI RemovePropW(HWND hWnd,LPCWSTR lpString);
#ifdef UNICODE
#define RemoveProp RemovePropW
#else
#define RemoveProp RemovePropA
#endif 
WINUSERAPI int WINAPI EnumPropsExA(HWND hWnd,PROPENUMPROCEXA lpEnumFunc,LPARAM lParam);
WINUSERAPI int WINAPI EnumPropsExW(HWND hWnd,PROPENUMPROCEXW lpEnumFunc,LPARAM lParam);
#ifdef UNICODE
#define EnumPropsEx EnumPropsExW
#else
#define EnumPropsEx EnumPropsExA
#endif 
WINUSERAPI int WINAPI EnumPropsA(HWND hWnd,PROPENUMPROCA lpEnumFunc);
WINUSERAPI int WINAPI EnumPropsW(HWND hWnd,PROPENUMPROCW lpEnumFunc);
#ifdef UNICODE
#define EnumProps EnumPropsW
#else
#define EnumProps EnumPropsA
#endif 
WINUSERAPI BOOL WINAPI SetWindowTextA(HWND hWnd,LPCSTR lpString);
WINUSERAPI BOOL WINAPI SetWindowTextW(HWND hWnd,LPCWSTR lpString);
#ifdef UNICODE
#define SetWindowText SetWindowTextW
#else
#define SetWindowText SetWindowTextA
#endif 
WINUSERAPI int WINAPI GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount);
WINUSERAPI int WINAPI GetWindowTextW(HWND hWnd,LPWSTR lpString,int nMaxCount);
#ifdef UNICODE
#define GetWindowText GetWindowTextW
#else
#define GetWindowText GetWindowTextA
#endif 

WINUSERAPI int WINAPI GetWindowTextLengthA(HWND hWnd);
WINUSERAPI int WINAPI GetWindowTextLengthW(HWND hWnd);
#ifdef UNICODE
#define GetWindowTextLength GetWindowTextLengthW
#else
#define GetWindowTextLength GetWindowTextLengthA
#endif 
WINUSERAPI BOOL WINAPI GetClientRect(HWND hWnd,LPRECT lpRect);
WINUSERAPI BOOL WINAPI GetWindowRect(HWND hWnd,LPRECT lpRect);
WINUSERAPI BOOL WINAPI AdjustWindowRect(LPRECT lpRect,DWORD dwStyle,BOOL bMenu);
WINUSERAPI BOOL WINAPI AdjustWindowRectEx(LPRECT lpRect,DWORD dwStyle,BOOL bMenu,DWORD dwExStyle);
*/
#if(WINVER >=0x0400)
#define HELPINFO_WINDOW 1
#define HELPINFO_MENUITEM 2
typedef struct tagHELPINFO  {
	UINT cbSize; 
	int iContextType; 
	int iCtrlId; 
	HANDLE hItemHandle; 
	DWORD_PTR dwContextId; 
	POINT MousePos; 
} HELPINFO,*LPHELPINFO;
/*
WINUSERAPI BOOL WINAPI SetWindowContextHelpId(HWND,DWORD);
WINUSERAPI DWORD WINAPI GetWindowContextHelpId(HWND);
WINUSERAPI BOOL WINAPI SetMenuContextHelpId(HMENU,DWORD);
WINUSERAPI DWORD WINAPI GetMenuContextHelpId(HMENU);
*/
#endif 
#ifndef NOMB
#define MB_OK 0
#define MB_OKCANCEL 1
#define MB_ABORTRETRYIGNORE 2
#define MB_YESNOCANCEL 3
#define MB_YESNO 4
#define MB_RETRYCANCEL 5
#if(WINVER >=0x0500)
#define MB_CANCELTRYCONTINUE 6
#endif 
#define MB_ICONHAND 16
#define MB_ICONQUESTION 32
#define MB_ICONEXCLAMATION 48
#define MB_ICONASTERISK 64
#if(WINVER >=0x0400)
#define MB_USERICON 128
#define MB_ICONWARNING MB_ICONEXCLAMATION
#define MB_ICONERROR MB_ICONHAND
#endif 
#define MB_ICONINFORMATION MB_ICONASTERISK
#define MB_ICONSTOP MB_ICONHAND
#define MB_DEFBUTTON1 0
#define MB_DEFBUTTON2 256
#define MB_DEFBUTTON3 512
#if(WINVER >=0x0400)
#define MB_DEFBUTTON4 768
#endif 
#define MB_APPLMODAL 0
#define MB_SYSTEMMODAL 0x1000
#define MB_TASKMODAL 0x2000
#if(WINVER >=0x0400)
#define MB_HELP 0x4000 
#endif 
#define MB_NOFOCUS 0x8000
#define MB_SETFOREGROUND 0x10000
#define MB_DEFAULT_DESKTOP_ONLY 0x20000
#if(WINVER >=0x0400)
#define MB_TOPMOST 0x40000
#define MB_RIGHT 0x80000
#define MB_RTLREADING 0x100000
#endif 
#ifdef _WIN32_WINNT
#if (_WIN32_WINNT >=0x0400)
#define MB_SERVICE_NOTIFICATION 0x200000
#else
#define MB_SERVICE_NOTIFICATION 0x40000
#endif
#define MB_SERVICE_NOTIFICATION_NT3X 0x40000
#endif
#define MB_TYPEMASK 15
#define MB_ICONMASK 240
#define MB_DEFMASK 3840
#define MB_MODEMASK 0x3000
#define MB_MISCMASK 0xc000
/*
WINUSERAPI int WINAPI MessageBoxA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType);
WINUSERAPI int WINAPI MessageBoxW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType);
#ifdef UNICODE
#define MessageBox MessageBoxW
#else
#define MessageBox MessageBoxA
#endif 
WINUSERAPI int WINAPI MessageBoxExA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType,WORD wLanguageId);
WINUSERAPI int WINAPI MessageBoxExW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType,WORD wLanguageId);
#ifdef UNICODE
#define MessageBoxEx MessageBoxExW
#else
#define MessageBoxEx MessageBoxExA
#endif 
*/
#if(WINVER >=0x0400)
typedef VOID (CALLBACK *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
typedef struct tagMSGBOXPARAMSA {
	UINT cbSize;
	HWND hwndOwner;
	HINSTANCE hInstance;
	LPCSTR lpszText;
	LPCSTR lpszCaption;
	DWORD dwStyle;
	LPCSTR lpszIcon;
	DWORD_PTR dwContextHelpId;
	MSGBOXCALLBACK lpfnMsgBoxCallback;
	DWORD dwLanguageId;
} MSGBOXPARAMSA,*PMSGBOXPARAMSA,*LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW {
	UINT cbSize;
	HWND hwndOwner;
	HINSTANCE hInstance;
	LPCWSTR lpszText;
	LPCWSTR lpszCaption;
	DWORD dwStyle;
	LPCWSTR lpszIcon;
	DWORD_PTR dwContextHelpId;
	MSGBOXCALLBACK lpfnMsgBoxCallback;
	DWORD dwLanguageId;
} MSGBOXPARAMSW,*PMSGBOXPARAMSW,*LPMSGBOXPARAMSW;
#ifdef UNICODE
typedef MSGBOXPARAMSW MSGBOXPARAMS;
typedef PMSGBOXPARAMSW PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSW LPMSGBOXPARAMS;
#else
typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
#endif 
/*
WINUSERAPI int WINAPI MessageBoxIndirectA(CONST MSGBOXPARAMSA * lpmbp);
WINUSERAPI int WINAPI MessageBoxIndirectW(CONST MSGBOXPARAMSW * lpmbp);
#ifdef UNICODE
#define MessageBoxIndirect MessageBoxIndirectW
#else
#define MessageBoxIndirect MessageBoxIndirectA
#endif
*/
#endif 
// WINUSERAPI BOOL WINAPI MessageBeep(UINT uType);
#endif
/*
WINUSERAPI int WINAPI ShowCursor(BOOL bShow);
WINUSERAPI BOOL WINAPI SetCursorPos(int X,int Y);
WINUSERAPI HCURSOR WINAPI SetCursor(HCURSOR hCursor);
WINUSERAPI BOOL WINAPI GetCursorPos(LPPOINT lpPoint);
WINUSERAPI BOOL WINAPI ClipCursor(CONST RECT *lpRect);
WINUSERAPI BOOL WINAPI GetClipCursor(LPRECT lpRect);
WINUSERAPI HCURSOR WINAPI GetCursor(VOID);
WINUSERAPI BOOL WINAPI CreateCaret(HWND hWnd,HBITMAP hBitmap,int nWidth,int nHeight);
WINUSERAPI UINT WINAPI GetCaretBlinkTime(VOID);
WINUSERAPI BOOL WINAPI SetCaretBlinkTime(UINT uMSeconds);
WINUSERAPI BOOL WINAPI DestroyCaret(VOID);
WINUSERAPI BOOL WINAPI HideCaret(HWND hWnd);
WINUSERAPI BOOL WINAPI ShowCaret(HWND hWnd);
WINUSERAPI BOOL WINAPI SetCaretPos(int X,int Y);
WINUSERAPI BOOL WINAPI GetCaretPos(LPPOINT lpPoint);
WINUSERAPI BOOL WINAPI ClientToScreen(HWND hWnd,LPPOINT lpPoint);
WINUSERAPI BOOL WINAPI ScreenToClient(HWND hWnd,LPPOINT lpPoint);
WINUSERAPI int WINAPI MapWindowPoints(HWND hWndFrom,HWND hWndTo,LPPOINT lpPoints,UINT cPoints);
WINUSERAPI HWND WINAPI WindowFromPoint(POINT Point);
WINUSERAPI HWND WINAPI ChildWindowFromPoint(HWND hWndParent,POINT Point);
*/
#if(WINVER >=0x0400)
#define CWP_ALL 0
#define CWP_SKIPINVISIBLE 1
#define CWP_SKIPDISABLED 2
#define CWP_SKIPTRANSPARENT 4
// WINUSERAPI HWND WINAPI ChildWindowFromPointEx(HWND hwnd,POINT pt,UINT flags);
#endif 
#ifndef NOCOLOR
#define CTLCOLOR_MSGBOX 0
#define CTLCOLOR_EDIT 1
#define CTLCOLOR_LISTBOX 2
#define CTLCOLOR_BTN 3
#define CTLCOLOR_DLG 4
#define CTLCOLOR_SCROLLBAR 5
#define CTLCOLOR_STATIC 6
#define CTLCOLOR_MAX 7
#define COLOR_SCROLLBAR 0
#define COLOR_BACKGROUND 1
#define COLOR_ACTIVECAPTION 2
#define COLOR_INACTIVECAPTION 3
#define COLOR_MENU 4
#define COLOR_WINDOW 5
#define COLOR_WINDOWFRAME 6
#define COLOR_MENUTEXT 7
#define COLOR_WINDOWTEXT 8
#define COLOR_CAPTIONTEXT 9
#define COLOR_ACTIVEBORDER 10
#define COLOR_INACTIVEBORDER 11
#define COLOR_APPWORKSPACE 12
#define COLOR_HIGHLIGHT 13
#define COLOR_HIGHLIGHTTEXT 14
#define COLOR_BTNFACE 15
#define COLOR_BTNSHADOW 16
#define COLOR_GRAYTEXT 17
#define COLOR_BTNTEXT 18
#define COLOR_INACTIVECAPTIONTEXT 19
#define COLOR_BTNHIGHLIGHT 20
#if(WINVER >=0x0400)
#define COLOR_3DDKSHADOW 21
#define COLOR_3DLIGHT 22
#define COLOR_INFOTEXT 23
#define COLOR_INFOBK 24
#endif 
#if(WINVER >=0x0500)
#define COLOR_HOTLIGHT 26
#define COLOR_GRADIENTACTIVECAPTION 27
#define COLOR_GRADIENTINACTIVECAPTION 28
#if(WINVER >=0x0501)
#define COLOR_MENUHILIGHT 29
#define COLOR_MENUBAR 30
#endif 
#endif 
#if(WINVER >=0x0400)
#define COLOR_DESKTOP COLOR_BACKGROUND
#define COLOR_3DFACE COLOR_BTNFACE
#define COLOR_3DSHADOW COLOR_BTNSHADOW
#define COLOR_3DHIGHLIGHT COLOR_BTNHIGHLIGHT
#define COLOR_3DHILIGHT COLOR_BTNHIGHLIGHT
#define COLOR_BTNHILIGHT COLOR_BTNHIGHLIGHT
#endif 
// WINUSERAPI DWORD WINAPI GetSysColor(int nIndex);
#if(WINVER >=0x0400)
// WINUSERAPI HBRUSH WINAPI GetSysColorBrush(int nIndex);
#endif 
// WINUSERAPI BOOL WINAPI SetSysColors(int cElements,CONST INT * lpaElements,CONST COLORREF * lpaRgbValues);
#endif 
/*
WINUSERAPI BOOL WINAPI DrawFocusRect(HDC hDC,CONST RECT * lprc);
WINUSERAPI int WINAPI FillRect(HDC hDC,CONST RECT *lprc,HBRUSH hbr);
WINUSERAPI int WINAPI FrameRect(HDC hDC,CONST RECT *lprc,HBRUSH hbr);
WINUSERAPI BOOL WINAPI InvertRect(HDC hDC,CONST RECT *lprc);
WINUSERAPI BOOL WINAPI SetRect(LPRECT lprc,int xLeft,int yTop,int xRight,int yBottom);
WINUSERAPI BOOL WINAPI SetRectEmpty(LPRECT lprc);
WINUSERAPI BOOL WINAPI CopyRect(LPRECT lprcDst,CONST RECT *lprcSrc);
WINUSERAPI BOOL WINAPI InflateRect(LPRECT lprc,int dx,int dy);
WINUSERAPI BOOL WINAPI IntersectRect(LPRECT lprcDst,CONST RECT *lprcSrc1,CONST RECT *lprcSrc2);
WINUSERAPI BOOL WINAPI UnionRect(LPRECT lprcDst,CONST RECT *lprcSrc1,CONST RECT *lprcSrc2);
WINUSERAPI BOOL WINAPI SubtractRect(LPRECT lprcDst,CONST RECT *lprcSrc1,CONST RECT *lprcSrc2);
WINUSERAPI BOOL WINAPI OffsetRect(LPRECT lprc,int dx,int dy);
WINUSERAPI BOOL WINAPI IsRectEmpty(CONST RECT *lprc);
WINUSERAPI BOOL WINAPI EqualRect(CONST RECT *lprc1,CONST RECT *lprc2);
WINUSERAPI BOOL WINAPI PtInRect(CONST RECT *lprc,POINT pt);
*/

#define NOWINOFFSETS

#ifndef NOWINOFFSETS
WINUSERAPI WORD WINAPI GetWindowWord(HWND hWnd,int nIndex);
WINUSERAPI WORD WINAPI SetWindowWord(HWND hWnd,int nIndex,WORD wNewWord);
WINUSERAPI LONG WINAPI GetWindowLongA(HWND hWnd,int nIndex);
WINUSERAPI LONG WINAPI GetWindowLongW(HWND hWnd,int nIndex);
#ifdef UNICODE
#define GetWindowLong GetWindowLongW
#else
#define GetWindowLong GetWindowLongA
#endif 
WINUSERAPI LONG WINAPI SetWindowLongA(HWND hWnd,int nIndex,LONG dwNewLong);
WINUSERAPI LONG WINAPI SetWindowLongW(HWND hWnd,int nIndex,LONG dwNewLong);
#ifdef UNICODE
#define SetWindowLong SetWindowLongW
#else
#define SetWindowLong SetWindowLongA
#endif 
#ifdef _WIN64
WINUSERAPI LONG_PTR WINAPI GetWindowLongPtrA(HWND hWnd,int nIndex);
WINUSERAPI LONG_PTR WINAPI GetWindowLongPtrW(HWND hWnd,int nIndex);
#ifdef UNICODE
#define GetWindowLongPtr GetWindowLongPtrW
#else
#define GetWindowLongPtr GetWindowLongPtrA
#endif 
WINUSERAPI LONG_PTR WINAPI SetWindowLongPtrA(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
WINUSERAPI LONG_PTR WINAPI SetWindowLongPtrW(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
#ifdef UNICODE
#define SetWindowLongPtr SetWindowLongPtrW
#else
#define SetWindowLongPtr SetWindowLongPtrA
#endif 
#else 
#define GetWindowLongPtrA GetWindowLongA
#define GetWindowLongPtrW GetWindowLongW
#ifdef UNICODE
#define GetWindowLongPtr GetWindowLongPtrW
#else
#define GetWindowLongPtr GetWindowLongPtrA
#endif 
#define SetWindowLongPtrA SetWindowLongA
#define SetWindowLongPtrW SetWindowLongW
#ifdef UNICODE
#define SetWindowLongPtr SetWindowLongPtrW
#else
#define SetWindowLongPtr SetWindowLongPtrA
#endif 
#endif 
WINUSERAPI WORD WINAPI GetClassWord(HWND hWnd,int nIndex);
WINUSERAPI WORD WINAPI SetClassWord(HWND hWnd,int nIndex,WORD wNewWord);
WINUSERAPI DWORD WINAPI GetClassLongA(HWND hWnd,int nIndex);
WINUSERAPI DWORD WINAPI GetClassLongW(HWND hWnd,int nIndex);
#ifdef UNICODE
#define GetClassLong GetClassLongW
#else
#define GetClassLong GetClassLongA
#endif 
WINUSERAPI DWORD WINAPI SetClassLongA(HWND hWnd,int nIndex,LONG dwNewLong);
WINUSERAPI DWORD WINAPI SetClassLongW(HWND hWnd,int nIndex,LONG dwNewLong);
#ifdef UNICODE
#define SetClassLong SetClassLongW
#else
#define SetClassLong SetClassLongA
#endif 
#ifdef _WIN64
WINUSERAPI ULONG_PTR WINAPI GetClassLongPtrA(HWND hWnd,int nIndex);
WINUSERAPI ULONG_PTR WINAPI GetClassLongPtrW(HWND hWnd,int nIndex);
#ifdef UNICODE
#define GetClassLongPtr GetClassLongPtrW
#else
#define GetClassLongPtr GetClassLongPtrA
#endif 
WINUSERAPI ULONG_PTR WINAPI SetClassLongPtrA(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
WINUSERAPI ULONG_PTR WINAPI SetClassLongPtrW(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
#ifdef UNICODE
#define SetClassLongPtr SetClassLongPtrW
#else
#define SetClassLongPtr SetClassLongPtrA
#endif 
#else 
#define GetClassLongPtrA GetClassLongA
#define GetClassLongPtrW GetClassLongW
#ifdef UNICODE
#define GetClassLongPtr GetClassLongPtrW
#else
#define GetClassLongPtr GetClassLongPtrA
#endif 
#define SetClassLongPtrA SetClassLongA
#define SetClassLongPtrW SetClassLongW
#ifdef UNICODE
#define SetClassLongPtr SetClassLongPtrW
#else
#define SetClassLongPtr SetClassLongPtrA
#endif 
#endif 
#endif 
/*
#if(WINVER >=0x0500)
// WINUSERAPI BOOL WINAPI GetProcessDefaultLayout(DWORD *pdwDefaultLayout);
// WINUSERAPI BOOL WINAPI SetProcessDefaultLayout(DWORD dwDefaultLayout);
#endif 
// WINUSERAPI HWND WINAPI GetDesktopWindow(VOID);
// WINUSERAPI HWND WINAPI GetParent(HWND hWnd);
WINUSERAPI HWND WINAPI SetParent(HWND hWndChild,HWND hWndNewParent);
WINUSERAPI BOOL WINAPI EnumChildWindows(HWND hWndParent,WNDENUMPROC lpEnumFunc,LPARAM lParam);
WINUSERAPI HWND WINAPI FindWindowA(LPCSTR lpClassName,LPCSTR lpWindowName);
WINUSERAPI HWND WINAPI FindWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName);
#ifdef UNICODE
#define FindWindow FindWindowW
#else
#define FindWindow FindWindowA
#endif 
#if(WINVER >=0x0400)
WINUSERAPI HWND WINAPI FindWindowExA(HWND hWndParent,HWND hWndChildAfter,LPCSTR lpszClass,LPCSTR lpszWindow);
WINUSERAPI HWND WINAPI FindWindowExW(HWND hWndParent,HWND hWndChildAfter,LPCWSTR lpszClass,LPCWSTR lpszWindow);
#ifdef UNICODE
#define FindWindowEx FindWindowExW
#else
#define FindWindowEx FindWindowExA
#endif 
// WINUSERAPI HWND WINAPI GetShellWindow(VOID);
#endif 
// WINUSERAPI BOOL WINAPI RegisterShellHookWindow(HWND hwnd);
// WINUSERAPI BOOL WINAPI DeregisterShellHookWindow(HWND hwnd);
WINUSERAPI BOOL WINAPI EnumWindows(WNDENUMPROC lpEnumFunc,LPARAM lParam);
WINUSERAPI BOOL WINAPI EnumThreadWindows(DWORD dwThreadId,WNDENUMPROC lpfn,LPARAM lParam);
#define EnumTaskWindows(hTask,lpfn,lParam) EnumThreadWindows(HandleToUlong(hTask),lpfn,lParam)
WINUSERAPI int WINAPI GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount);
WINUSERAPI int WINAPI GetClassNameW(HWND hWnd,LPWSTR lpClassName,int nMaxCount);
#ifdef UNICODE
#define GetClassName GetClassNameW
#else
#define GetClassName GetClassNameA
#endif 
// WINUSERAPI HWND WINAPI GetTopWindow(HWND hWnd);
#define GetNextWindow(hWnd,wCmd) GetWindow(hWnd,wCmd)
#define GetSysModalWindow() (NULL)
#define SetSysModalWindow(hWnd) (NULL)
WINUSERAPI DWORD WINAPI GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId);
#if(_WIN32_WINNT >=0x0501)
WINUSERAPI BOOL WINAPI IsGUIThread(BOOL bConvert);
#endif 
*/
#define GetWindowTask(hWnd)((HANDLE)(DWORD_PTR)GetWindowThreadProcessId(hWnd,NULL))
// WINUSERAPI HWND WINAPI GetLastActivePopup(HWND hWnd);
#define GW_HWNDFIRST 0
#define GW_HWNDLAST 1
#define GW_HWNDNEXT 2
#define GW_HWNDPREV 3
#define GW_OWNER 4
#define GW_CHILD 5
#if(WINVER <=0x0400)
#define GW_MAX 5
#else
#define GW_ENABLEDPOPUP 6
#define GW_MAX 6
#endif
// WINUSERAPI HWND WINAPI GetWindow(HWND hWnd,UINT uCmd);
#ifndef NOWH
#ifdef STRICT
WINUSERAPI HHOOK WINAPI SetWindowsHookA(int nFilterType,HOOKPROC pfnFilterProc);
WINUSERAPI HHOOK WINAPI SetWindowsHookW(int nFilterType,HOOKPROC pfnFilterProc);
#ifdef UNICODE
#define SetWindowsHook SetWindowsHookW
#else
#define SetWindowsHook SetWindowsHookA
#endif 
#else 
WINUSERAPI HOOKPROC WINAPI SetWindowsHookA(int nFilterType,HOOKPROC pfnFilterProc);
WINUSERAPI HOOKPROC WINAPI SetWindowsHookW(int nFilterType,HOOKPROC pfnFilterProc);
#ifdef UNICODE
#define SetWindowsHook SetWindowsHookW
#else
#define SetWindowsHook SetWindowsHookA
#endif 
#endif 
WINUSERAPI BOOL WINAPI UnhookWindowsHook(int nCode,HOOKPROC pfnFilterProc);
WINUSERAPI HHOOK WINAPI SetWindowsHookExA(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId);
WINUSERAPI HHOOK WINAPI SetWindowsHookExW(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId);
#ifdef UNICODE
#define SetWindowsHookEx SetWindowsHookExW
#else
#define SetWindowsHookEx SetWindowsHookExA
#endif 
// WINUSERAPI BOOL WINAPI UnhookWindowsHookEx(HHOOK hhk);
WINUSERAPI LRESULT WINAPI CallNextHookEx(HHOOK hhk,int nCode,WPARAM wParam,LPARAM lParam);
#ifdef STRICT
#define DefHookProc(nCode,wParam,lParam,phhk) CallNextHookEx(*phhk,nCode,wParam,lParam)
#else
#define DefHookProc(nCode,wParam,lParam,phhk) CallNextHookEx((HHOOK)*phhk,nCode,wParam,lParam)
#endif 
#endif 
#ifndef NOMENUS
#define MF_INSERT 0
#define MF_CHANGE 128
#define MF_APPEND 256
#define MF_DELETE 512
#define MF_REMOVE 0x1000
#define MF_BYCOMMAND 0
#define MF_BYPOSITION 1024
#define MF_SEPARATOR 2048
#define MF_ENABLED 0
#define MF_GRAYED 1
#define MF_DISABLED 2
#define MF_UNCHECKED 0
#define MF_CHECKED 8
#define MF_USECHECKBITMAPS 512
#define MF_STRING 0
#define MF_BITMAP 4
#define MF_OWNERDRAW 256
#define MF_POPUP 16
#define MF_MENUBARBREAK 32
#define MF_MENUBREAK 64
#define MF_UNHILITE 0
#define MF_HILITE 128
#if(WINVER >=0x0400)
#define MF_DEFAULT 0x1000
#endif 
#define MF_SYSMENU 0x2000
#define MF_HELP 0x4000
#if(WINVER >=0x0400)
#define MF_RIGHTJUSTIFY 0x4000
#endif 
#define MF_MOUSESELECT 0x8000
#if(WINVER >=0x0400)
#define MF_END 128 
#endif 
#if(WINVER >=0x0400)
#define MFT_STRING MF_STRING
#define MFT_BITMAP MF_BITMAP
#define MFT_MENUBARBREAK MF_MENUBARBREAK
#define MFT_MENUBREAK MF_MENUBREAK
#define MFT_OWNERDRAW MF_OWNERDRAW
#define MFT_RADIOCHECK 512
#define MFT_SEPARATOR MF_SEPARATOR
#define MFT_RIGHTORDER 0x2000
#define MFT_RIGHTJUSTIFY MF_RIGHTJUSTIFY
#define MFS_GRAYED 3
#define MFS_DISABLED MFS_GRAYED
#define MFS_CHECKED MF_CHECKED
#define MFS_HILITE MF_HILITE
#define MFS_ENABLED MF_ENABLED
#define MFS_UNCHECKED MF_UNCHECKED
#define MFS_UNHILITE MF_UNHILITE
#define MFS_DEFAULT MF_DEFAULT
#endif 
#if(WINVER >=0x0400)
WINUSERAPI BOOL WINAPI CheckMenuRadioItem(HMENU hmenu,UINT first,UINT last,UINT check,UINT flags);
#endif 
typedef struct {
	WORD versionNumber;
	WORD offset;
} MENUITEMTEMPLATEHEADER,*PMENUITEMTEMPLATEHEADER;
typedef struct { 
	WORD mtOption;
	WORD mtID;
	WCHAR mtString[1];
} MENUITEMTEMPLATE,*PMENUITEMTEMPLATE;
#define MF_END 128
#endif 
#ifndef NOSYSCOMMANDS
#define SC_SIZE 0xf000
#define SC_MOVE 0xf010
#define SC_MINIMIZE 0xf020
#define SC_MAXIMIZE 0xf030
#define SC_NEXTWINDOW 0xf040
#define SC_PREVWINDOW 0xf050
#define SC_CLOSE 0xf060
#define SC_VSCROLL 0xf070
#define SC_HSCROLL 0xf080
#define SC_MOUSEMENU 0xf090
#define SC_KEYMENU 0xf100
#define SC_ARRANGE 0xf110
#define SC_RESTORE 0xf120
#define SC_TASKLIST 0xf130
#define SC_SCREENSAVE 0xf140
#define SC_HOTKEY 0xf150
#if(WINVER >=0x0400)
#define SC_DEFAULT 0xf160
#define SC_MONITORPOWER 0xf170
#define SC_CONTEXTHELP 0xf180
#define SC_SEPARATOR 0xf00f
#endif 
#define SC_ICON SC_MINIMIZE
#define SC_ZOOM SC_MAXIMIZE
#endif 
/*
WINUSERAPI HBITMAP WINAPI LoadBitmapA(HINSTANCE hInstance,LPCSTR lpBitmapName);
WINUSERAPI HBITMAP WINAPI LoadBitmapW(HINSTANCE hInstance,LPCWSTR lpBitmapName);
#ifdef UNICODE
#define LoadBitmap LoadBitmapW
#else
#define LoadBitmap LoadBitmapA
#endif 
WINUSERAPI HCURSOR WINAPI LoadCursorA(HINSTANCE hInstance,LPCSTR lpCursorName);
WINUSERAPI HCURSOR WINAPI LoadCursorW(HINSTANCE hInstance,LPCWSTR lpCursorName);
#ifdef UNICODE
#define LoadCursor LoadCursorW
#else
#define LoadCursor LoadCursorA
#endif 
WINUSERAPI HCURSOR WINAPI LoadCursorFromFileA(LPCSTR lpFileName);
WINUSERAPI HCURSOR WINAPI LoadCursorFromFileW(LPCWSTR lpFileName);
#ifdef UNICODE
#define LoadCursorFromFile LoadCursorFromFileW
#else
#define LoadCursorFromFile LoadCursorFromFileA
#endif 
WINUSERAPI HCURSOR WINAPI CreateCursor(HINSTANCE hInst,int xHotSpot,int yHotSpot,int nWidth,int nHeight,CONST VOID *pvANDPlane,CONST VOID *pvXORPlane);
WINUSERAPI BOOL WINAPI DestroyCursor(HCURSOR hCursor);
*/
#ifndef _MAC
#define CopyCursor(pcur) ((HCURSOR)CopyIcon((HICON)(pcur)))
#else
WINUSERAPI HCURSOR WINAPI CopyCursor(HCURSOR hCursor);
#endif
#define IDC_ARROW MAKEINTRESOURCE(32512)
#define IDC_IBEAM MAKEINTRESOURCE(32513)
#define IDC_WAIT MAKEINTRESOURCE(32514)
#define IDC_CROSS MAKEINTRESOURCE(32515)
#define IDC_UPARROW MAKEINTRESOURCE(32516)
#define IDC_SIZE MAKEINTRESOURCE(32640) 
#define IDC_ICON MAKEINTRESOURCE(32641) 
#define IDC_SIZENWSE MAKEINTRESOURCE(32642)
#define IDC_SIZENESW MAKEINTRESOURCE(32643)
#define IDC_SIZEWE MAKEINTRESOURCE(32644)
#define IDC_SIZENS MAKEINTRESOURCE(32645)
#define IDC_SIZEALL MAKEINTRESOURCE(32646)
#define IDC_NO MAKEINTRESOURCE(32648) 
#if(WINVER >=0x0500)
#define IDC_HAND MAKEINTRESOURCE(32649)
#endif 
#define IDC_APPSTARTING MAKEINTRESOURCE(32650) 
#if(WINVER >=0x0400)
#define IDC_HELP MAKEINTRESOURCE(32651)
#endif 
/*
// WINUSERAPI BOOL WINAPI SetSystemCursor(HCURSOR hcur,DWORD id);
typedef struct _ICONINFO {
	BOOL fIcon;
	DWORD xHotspot;
	DWORD yHotspot;
	HBITMAP hbmMask;
	HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;
WINUSERAPI HICON WINAPI LoadIconA(HINSTANCE hInstance,LPCSTR lpIconName);
WINUSERAPI HICON WINAPI LoadIconW(HINSTANCE hInstance,LPCWSTR lpIconName);
#ifdef UNICODE
#define LoadIcon LoadIconW
#else
#define LoadIcon LoadIconA
#endif 
WINUSERAPI UINT WINAPI PrivateExtractIconsA(LPCSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
WINUSERAPI UINT WINAPI PrivateExtractIconsW(LPCWSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
#ifdef UNICODE
#define PrivateExtractIcons PrivateExtractIconsW
#else
#define PrivateExtractIcons PrivateExtractIconsA
#endif 
WINUSERAPI HICON WINAPI CreateIcon(HINSTANCE hInstance,int nWidth,int nHeight,BYTE cPlanes,BYTE cBitsPixel,CONST BYTE *lpbANDbits,CONST BYTE *lpbXORbits);
// WINUSERAPI BOOL WINAPI DestroyIcon(HICON hIcon);
WINUSERAPI int WINAPI LookupIconIdFromDirectory(PBYTE presbits,BOOL fIcon);
#if(WINVER >=0x0400)
WINUSERAPI int WINAPI LookupIconIdFromDirectoryEx(PBYTE presbits,BOOL fIcon,int cxDesired,int cyDesired,UINT Flags);
#endif 
WINUSERAPI HICON WINAPI CreateIconFromResource(PBYTE presbits,DWORD dwResSize,BOOL fIcon,DWORD dwVer);
#if(WINVER >=0x0400)
WINUSERAPI HICON WINAPI CreateIconFromResourceEx(PBYTE presbits,DWORD dwResSize,BOOL fIcon,DWORD dwVer,int cxDesired,int cyDesired,UINT Flags);
typedef struct tagCURSORSHAPE {
	int xHotSpot;
	int yHotSpot;
	int cx;
	int cy;
	int cbWidth;
	BYTE Planes;
	BYTE BitsPixel;
} CURSORSHAPE,*LPCURSORSHAPE;
#endif 
*/
#define IMAGE_BITMAP 0
#define IMAGE_ICON 1
#define IMAGE_CURSOR 2
#if(WINVER >=0x0400)
#define IMAGE_ENHMETAFILE 3
#define LR_DEFAULTCOLOR 0
#define LR_MONOCHROME 1
#define LR_COLOR 2
#define LR_COPYRETURNORG 4
#define LR_COPYDELETEORG 8
#define LR_LOADFROMFILE 16
#define LR_LOADTRANSPARENT 32
#define LR_DEFAULTSIZE 64
#define LR_VGACOLOR 128
#define LR_LOADMAP3DCOLORS 0x1000
#define LR_CREATEDIBSECTION 0x2000
#define LR_COPYFROMRESOURCE 0x4000
#define LR_SHARED 0x8000
/*
WINUSERAPI HANDLE WINAPI LoadImageA(HINSTANCE hInst,LPCSTR name,UINT type,int cx,int cy,UINT fuLoad);
WINUSERAPI HANDLE WINAPI LoadImageW(HINSTANCE hInst,LPCWSTR name,UINT type,int cx,int cy,UINT fuLoad);
#ifdef UNICODE
#define LoadImage LoadImageW
#else
#define LoadImage LoadImageA
#endif 
WINUSERAPI HANDLE WINAPI CopyImage(HANDLE h,UINT type,int cx,int cy,UINT flags);
*/
#define DI_MASK 1
#define DI_IMAGE 2
#define DI_NORMAL 3
#define DI_COMPAT 4
#define DI_DEFAULTSIZE 8
#if(_WIN32_WINNT >=0x0501)
#define DI_NOMIRROR 16
#endif 
// WINUSERAPI BOOL WINAPI DrawIconEx(HDC hdc,int xLeft,int yTop,HICON hIcon,int cxWidth,int cyWidth,UINT istepIfAniCur,HBRUSH hbrFlickerFreeDraw,UINT diFlags);
#endif 
/*
WINUSERAPI HICON WINAPI CreateIconIndirect(PICONINFO piconinfo);
WINUSERAPI HICON WINAPI CopyIcon(HICON hIcon);
WINUSERAPI BOOL WINAPI GetIconInfo(HICON hIcon,PICONINFO piconinfo);
*/
#if(WINVER >=0x0400)
#define RES_ICON 1
#define RES_CURSOR 2
#endif 
#ifdef OEMRESOURCE
#define OBM_CLOSE 32754
#define OBM_UPARROW 32753
#define OBM_DNARROW 32752
#define OBM_RGARROW 32751
#define OBM_LFARROW 32750
#define OBM_REDUCE 32749
#define OBM_ZOOM 32748
#define OBM_RESTORE 32747
#define OBM_REDUCED 32746
#define OBM_ZOOMD 32745
#define OBM_RESTORED 32744
#define OBM_UPARROWD 32743
#define OBM_DNARROWD 32742
#define OBM_RGARROWD 32741
#define OBM_LFARROWD 32740
#define OBM_MNARROW 32739
#define OBM_COMBO 32738
#define OBM_UPARROWI 32737
#define OBM_DNARROWI 32736
#define OBM_RGARROWI 32735
#define OBM_LFARROWI 32734
#define OBM_OLD_CLOSE 32767
#define OBM_SIZE 32766
#define OBM_OLD_UPARROW 32765
#define OBM_OLD_DNARROW 32764
#define OBM_OLD_RGARROW 32763
#define OBM_OLD_LFARROW 32762
#define OBM_BTSIZE 32761
#define OBM_CHECK 32760
#define OBM_CHECKBOXES 32759
#define OBM_BTNCORNERS 32758
#define OBM_OLD_REDUCE 32757
#define OBM_OLD_ZOOM 32756
#define OBM_OLD_RESTORE 32755
#define OCR_NORMAL 32512
#define OCR_IBEAM 32513
#define OCR_WAIT 32514
#define OCR_CROSS 32515
#define OCR_UP 32516
#define OCR_SIZE 32640 
#define OCR_ICON 32641 
#define OCR_SIZENWSE 32642
#define OCR_SIZENESW 32643
#define OCR_SIZEWE 32644
#define OCR_SIZENS 32645
#define OCR_SIZEALL 32646
#define OCR_ICOCUR 32647 
#define OCR_NO 32648
#if(WINVER >=0x0500)
#define OCR_HAND 32649
#endif 
#if(WINVER >=0x0400)
#define OCR_APPSTARTING 32650
#endif 
#define OIC_SAMPLE 32512
#define OIC_HAND 32513
#define OIC_QUES 32514
#define OIC_BANG 32515
#define OIC_NOTE 32516
#if(WINVER >=0x0400)
#define OIC_WINLOGO 32517
#define OIC_WARNING OIC_BANG
#define OIC_ERROR OIC_HAND
#define OIC_INFORMATION OIC_NOTE
#endif 
#endif 
#define ORD_LANGDRIVER 1 
#ifndef NOICONS
#ifdef RC_INVOKED
#define IDI_APPLICATION 32512
#define IDI_HAND 32513
#define IDI_QUESTION 32514
#define IDI_EXCLAMATION 32515
#define IDI_ASTERISK 32516
#if(WINVER >=0x0400)
#define IDI_WINLOGO 32517
#endif 
#else
#define IDI_APPLICATION MAKEINTRESOURCE(32512)
#define IDI_HAND MAKEINTRESOURCE(32513)
#define IDI_QUESTION MAKEINTRESOURCE(32514)
#define IDI_EXCLAMATION MAKEINTRESOURCE(32515)
#define IDI_ASTERISK MAKEINTRESOURCE(32516)
#if(WINVER >=0x0400)
#define IDI_WINLOGO MAKEINTRESOURCE(32517)
#endif 
#endif 
#if(WINVER >=0x0400)
#define IDI_WARNING IDI_EXCLAMATION
#define IDI_ERROR IDI_HAND
#define IDI_INFORMATION IDI_ASTERISK
#endif 
#endif 
/*
WINUSERAPI int WINAPI LoadStringA(HINSTANCE hInstance,UINT uID,LPSTR lpBuffer,int cchBufferMax);
WINUSERAPI int WINAPI LoadStringW(HINSTANCE hInstance,UINT uID,LPWSTR lpBuffer,int cchBufferMax);
#ifdef UNICODE
#define LoadString LoadStringW
#else
#define LoadString LoadStringA
#endif 
*/
#define IDOK 1
#define IDCANCEL 2
#define IDABORT 3
#define IDRETRY 4
#define IDIGNORE 5
#define IDYES 6
#define IDNO 7
#if(WINVER >=0x0400)
#define IDCLOSE 8
#define IDHELP 9
#endif 
#if(WINVER >=0x0500)
#define IDTRYAGAIN 10
#define IDCONTINUE 11
#endif 
#if(WINVER >=0x0501)
#ifndef IDTIMEOUT
#define IDTIMEOUT 32000
#endif
#endif 
#ifndef NOCTLMGR
#ifndef NOWINSTYLES
#define ES_LEFT 0
#define ES_CENTER 1
#define ES_RIGHT 2
#define ES_MULTILINE 4
#define ES_UPPERCASE 8
#define ES_LOWERCASE 16
#define ES_PASSWORD 32
#define ES_AUTOVSCROLL 64
#define ES_AUTOHSCROLL 128
#define ES_NOHIDESEL 256
#define ES_OEMCONVERT 1024
#define ES_READONLY 2048
#define ES_WANTRETURN 0x1000
#if(WINVER >=0x0400)
#define ES_NUMBER 0x2000
#endif 
#endif 
#define EN_SETFOCUS 256
#define EN_KILLFOCUS 512
#define EN_CHANGE 768
#define EN_UPDATE 1024
#define EN_ERRSPACE 1280
#define EN_MAXTEXT 1281
#define EN_HSCROLL 1537
#define EN_VSCROLL 1538
#if(_WIN32_WINNT >=0x0500)
#define EN_ALIGN_LTR_EC 1792
#define EN_ALIGN_RTL_EC 1793
#endif 
#if(WINVER >=0x0400)
#define EC_LEFTMARGIN 1
#define EC_RIGHTMARGIN 2
#define EC_USEFONTINFO 0xffff
#endif 
#if(WINVER >=0x0500)
#define EMSIS_COMPOSITIONSTRING 1
#define EIMES_GETCOMPSTRATONCE 1
#define EIMES_CANCELCOMPSTRINFOCUS 2
#define EIMES_COMPLETECOMPSTRKILLFOCUS 4
#endif 
#ifndef NOWINMESSAGES
#define EM_GETSEL 176
#define EM_SETSEL 177
#define EM_GETRECT 178
#define EM_SETRECT 179
#define EM_SETRECTNP 180
#define EM_SCROLL 181
#define EM_LINESCROLL 182
#define EM_SCROLLCARET 183
#define EM_GETMODIFY 184
#define EM_SETMODIFY 185
#define EM_GETLINECOUNT 186
#define EM_LINEINDEX 187
#define EM_SETHANDLE 188
#define EM_GETHANDLE 189
#define EM_GETTHUMB 190
#define EM_LINELENGTH 193
#define EM_REPLACESEL 194
#define EM_GETLINE 196
#define EM_LIMITTEXT 197
#define EM_CANUNDO 198
#define EM_UNDO 199
#define EM_FMTLINES 200
#define EM_LINEFROMCHAR 201
#define EM_SETTABSTOPS 203
#define EM_SETPASSWORDCHAR 204
#define EM_EMPTYUNDOBUFFER 205
#define EM_GETFIRSTVISIBLELINE 206
#define EM_SETREADONLY 207
#define EM_SETWORDBREAKPROC 208
#define EM_GETWORDBREAKPROC 209
#define EM_GETPASSWORDCHAR 210
#if(WINVER >=0x0400)
#define EM_SETMARGINS 211
#define EM_GETMARGINS 212
#define EM_SETLIMITTEXT EM_LIMITTEXT 
#define EM_GETLIMITTEXT 213
#define EM_POSFROMCHAR 214
#define EM_CHARFROMPOS 215
#endif 
#if(WINVER >=0x0500)
#define EM_SETIMESTATUS 216
#define EM_GETIMESTATUS 217
#endif 
#endif 
#define WB_LEFT 0
#define WB_RIGHT 1
#define WB_ISDELIMITER 2
#define BS_PUSHBUTTON 0
#define BS_DEFPUSHBUTTON 1
#define BS_CHECKBOX 2
#define BS_AUTOCHECKBOX 3
#define BS_RADIOBUTTON 4
#define BS_3STATE 5
#define BS_AUTO3STATE 6
#define BS_GROUPBOX 7
#define BS_USERBUTTON 8
#define BS_AUTORADIOBUTTON 9
#define BS_PUSHBOX 10
#define BS_OWNERDRAW 11
#define BS_TYPEMASK 15
#define BS_LEFTTEXT 32
#if(WINVER >=0x0400)
#define BS_TEXT 0
#define BS_ICON 64
#define BS_BITMAP 128
#define BS_LEFT 256
#define BS_RIGHT 512
#define BS_CENTER 768
#define BS_TOP 1024
#define BS_BOTTOM 2048
#define BS_VCENTER 3072
#define BS_PUSHLIKE 0x1000
#define BS_MULTILINE 0x2000
#define BS_NOTIFY 0x4000
#define BS_FLAT 0x8000
#define BS_RIGHTBUTTON BS_LEFTTEXT
#endif 
#define BN_CLICKED 0
#define BN_PAINT 1
#define BN_HILITE 2
#define BN_UNHILITE 3
#define BN_DISABLE 4
#define BN_DOUBLECLICKED 5
#if(WINVER >=0x0400)
#define BN_PUSHED BN_HILITE
#define BN_UNPUSHED BN_UNHILITE
#define BN_DBLCLK BN_DOUBLECLICKED
#define BN_SETFOCUS 6
#define BN_KILLFOCUS 7
#endif 
#define BM_GETCHECK 240
#define BM_SETCHECK 241
#define BM_GETSTATE 242
#define BM_SETSTATE 243
#define BM_SETSTYLE 244
#if(WINVER >=0x0400)
#define BM_CLICK 245
#define BM_GETIMAGE 246
#define BM_SETIMAGE 247
#define BST_UNCHECKED 0
#define BST_CHECKED 1
#define BST_INDETERMINATE 2
#define BST_PUSHED 4
#define BST_FOCUS 8
#endif 
#define SS_LEFT 0
#define SS_CENTER 1
#define SS_RIGHT 2
#define SS_ICON 3
#define SS_BLACKRECT 4
#define SS_GRAYRECT 5
#define SS_WHITERECT 6
#define SS_BLACKFRAME 7
#define SS_GRAYFRAME 8
#define SS_WHITEFRAME 9
#define SS_USERITEM 10
#define SS_SIMPLE 11
#define SS_LEFTNOWORDWRAP 12
#if(WINVER >=0x0400)
#define SS_OWNERDRAW 13
#define SS_BITMAP 14
#define SS_ENHMETAFILE 15
#define SS_ETCHEDHORZ 16
#define SS_ETCHEDVERT 17
#define SS_ETCHEDFRAME 18
#define SS_TYPEMASK 31
#endif 
#if(WINVER >=0x0501)
#define SS_REALSIZECONTROL 64
#endif 
#define SS_NOPREFIX 128 
#if(WINVER >=0x0400)
#define SS_NOTIFY 256
#define SS_CENTERIMAGE 512
#define SS_RIGHTJUST 1024
#define SS_REALSIZEIMAGE 2048
#define SS_SUNKEN 0x1000
#define SS_EDITCONTROL 0x2000
#define SS_ENDELLIPSIS 0x4000
#define SS_PATHELLIPSIS 0x8000
#define SS_WORDELLIPSIS 0xc000
#define SS_ELLIPSISMASK 0xc000
#endif 
#ifndef NOWINMESSAGES
#define STM_SETICON 368
#define STM_GETICON 369
#if(WINVER >=0x0400)
#define STM_SETIMAGE 370
#define STM_GETIMAGE 371
#define STN_CLICKED 0
#define STN_DBLCLK 1
#define STN_ENABLE 2
#define STN_DISABLE 3
#endif 
#define STM_MSGMAX 372
#endif 
#define WC_DIALOG (MAKEINTATOM(0x8002))
#define DWL_MSGRESULT 0
#define DWL_DLGPROC 4
#define DWL_USER 8
#ifdef _WIN64
#undef DWL_MSGRESULT
#undef DWL_DLGPROC
#undef DWL_USER
#endif 
#define DWLP_MSGRESULT 0
#define DWLP_DLGPROC DWLP_MSGRESULT + sizeof(LRESULT)
#define DWLP_USER DWLP_DLGPROC + sizeof(DLGPROC)
#ifndef NOMSG
WINUSERAPI BOOL WINAPI IsDialogMessageA(HWND hDlg,LPMSG lpMsg);
WINUSERAPI BOOL WINAPI IsDialogMessageW(HWND hDlg,LPMSG lpMsg);
#ifdef UNICODE
#define IsDialogMessage IsDialogMessageW
#else
#define IsDialogMessage IsDialogMessageA
#endif 
#endif 
WINUSERAPI BOOL WINAPI MapDialogRect(HWND hDlg,LPRECT lpRect);
WINUSERAPI int WINAPI DlgDirListA(HWND hDlg,LPSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
WINUSERAPI int WINAPI DlgDirListW(HWND hDlg,LPWSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
#ifdef UNICODE
#define DlgDirList DlgDirListW
#else
#define DlgDirList DlgDirListA
#endif 
#define DDL_READWRITE 0
#define DDL_READONLY 1
#define DDL_HIDDEN 2
#define DDL_SYSTEM 4
#define DDL_DIRECTORY 16
#define DDL_ARCHIVE 32
#define DDL_POSTMSGS 0x2000
#define DDL_DRIVES 0x4000
#define DDL_EXCLUSIVE 0x8000
WINUSERAPI BOOL WINAPI DlgDirSelectExA(HWND hwndDlg,LPSTR lpString,int chCount,int idListBox);
WINUSERAPI BOOL WINAPI DlgDirSelectExW(HWND hwndDlg,LPWSTR lpString,int chCount,int idListBox);
#ifdef UNICODE
#define DlgDirSelectEx DlgDirSelectExW
#else
#define DlgDirSelectEx DlgDirSelectExA
#endif 
WINUSERAPI int WINAPI DlgDirListComboBoxA(HWND hDlg,LPSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
WINUSERAPI int WINAPI DlgDirListComboBoxW(HWND hDlg,LPWSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
#ifdef UNICODE
#define DlgDirListComboBox DlgDirListComboBoxW
#else
#define DlgDirListComboBox DlgDirListComboBoxA
#endif 
WINUSERAPI BOOL WINAPI DlgDirSelectComboBoxExA(HWND hwndDlg,LPSTR lpString,int cchOut,int idComboBox);
WINUSERAPI BOOL WINAPI DlgDirSelectComboBoxExW(HWND hwndDlg,LPWSTR lpString,int cchOut,int idComboBox);
#ifdef UNICODE
#define DlgDirSelectComboBoxEx DlgDirSelectComboBoxExW
#else
#define DlgDirSelectComboBoxEx DlgDirSelectComboBoxExA
#endif 
#define DS_ABSALIGN 1
#define DS_SYSMODAL 2
#define DS_LOCALEDIT 32 
#define DS_SETFONT 64 
#define DS_MODALFRAME 128 
#define DS_NOIDLEMSG 256 
#define DS_SETFOREGROUND 512 
#if(WINVER >=0x0400)
#define DS_3DLOOK 4
#define DS_FIXEDSYS 8
#define DS_NOFAILCREATE 16
#define DS_CONTROL 1024
#define DS_CENTER 2048
#define DS_CENTERMOUSE 0x1000
#define DS_CONTEXTHELP 0x2000
#define DS_SHELLFONT (DS_SETFONT|DS_FIXEDSYS)
#endif 
#if(_WIN32_WCE >=0x0500)
#define DS_USEPIXELS 0x8000
#endif
#define DM_GETDEFID (WM_USER+0)
#define DM_SETDEFID (WM_USER+1)
#if(WINVER >=0x0400)
#define DM_REPOSITION (WM_USER+2)
#endif 
#define DC_HASDEFID 0x534b
#define DLGC_WANTARROWS 1 
#define DLGC_WANTTAB 2 
#define DLGC_WANTALLKEYS 4 
#define DLGC_WANTMESSAGE 4 
#define DLGC_HASSETSEL 8 
#define DLGC_DEFPUSHBUTTON 16 
#define DLGC_UNDEFPUSHBUTTON 32 
#define DLGC_RADIOBUTTON 64 
#define DLGC_WANTCHARS 128 
#define DLGC_STATIC 256 
#define DLGC_BUTTON 0x2000 
#define LB_CTLCODE 0L
#define LB_OKAY 0
#define LB_ERR (-1)
#define LB_ERRSPACE (-2)
#define LBN_ERRSPACE (-2)
#define LBN_SELCHANGE 1
#define LBN_DBLCLK 2
#define LBN_SELCANCEL 3
#define LBN_SETFOCUS 4
#define LBN_KILLFOCUS 5
#ifndef NOWINMESSAGES
#define LB_ADDSTRING 384
#define LB_INSERTSTRING 385
#define LB_DELETESTRING 386
#define LB_SELITEMRANGEEX 387
#define LB_RESETCONTENT 388
#define LB_SETSEL 389
#define LB_SETCURSEL 390
#define LB_GETSEL 391
#define LB_GETCURSEL 392
#define LB_GETTEXT 393
#define LB_GETTEXTLEN 394
#define LB_GETCOUNT 395
#define LB_SELECTSTRING 396
#define LB_DIR 397
#define LB_GETTOPINDEX 398
#define LB_FINDSTRING 399
#define LB_GETSELCOUNT 400
#define LB_GETSELITEMS 401
#define LB_SETTABSTOPS 402
#define LB_GETHORIZONTALEXTENT 403
#define LB_SETHORIZONTALEXTENT 404
#define LB_SETCOLUMNWIDTH 405
#define LB_ADDFILE 406
#define LB_SETTOPINDEX 407
#define LB_GETITEMRECT 408
#define LB_GETITEMDATA 409
#define LB_SETITEMDATA 410
#define LB_SELITEMRANGE 411
#define LB_SETANCHORINDEX 412
#define LB_GETANCHORINDEX 413
#define LB_SETCARETINDEX 414
#define LB_GETCARETINDEX 415
#define LB_SETITEMHEIGHT 416
#define LB_GETITEMHEIGHT 417
#define LB_FINDSTRINGEXACT 418
#define LB_SETLOCALE 421
#define LB_GETLOCALE 422
#define LB_SETCOUNT 423
#if(WINVER >=0x0400)
#define LB_INITSTORAGE 424
#define LB_ITEMFROMPOINT 425
#endif 
#if(_WIN32_WCE >=0x0400)
#define LB_MULTIPLEADDSTRING 433
#endif
#if(_WIN32_WINNT >=0x0501)
#define LB_GETLISTBOXINFO 434
#endif 
#if(_WIN32_WINNT >=0x0501)
#define LB_MSGMAX 435
#elif(_WIN32_WCE >=0x0400)
#define LB_MSGMAX 433
#elif(WINVER >=0x0400)
#define LB_MSGMAX 432
#else
#define LB_MSGMAX 424
#endif
#endif 
#ifndef NOWINSTYLES
#define LBS_NOTIFY 1
#define LBS_SORT 2
#define LBS_NOREDRAW 4
#define LBS_MULTIPLESEL 8
#define LBS_OWNERDRAWFIXED 16
#define LBS_OWNERDRAWVARIABLE 32
#define LBS_HASSTRINGS 64
#define LBS_USETABSTOPS 128
#define LBS_NOINTEGRALHEIGHT 256
#define LBS_MULTICOLUMN 512
#define LBS_WANTKEYBOARDINPUT 1024
#define LBS_EXTENDEDSEL 2048
#define LBS_DISABLENOSCROLL 0x1000
#define LBS_NODATA 0x2000
#if(WINVER >=0x0400)
#define LBS_NOSEL 0x4000
#endif 
#define LBS_COMBOBOX 0x8000
#define LBS_STANDARD (LBS_NOTIFY|LBS_SORT|WS_VSCROLL|WS_BORDER)
#endif 
#define CB_OKAY 0
#define CB_ERR (-1)
#define CB_ERRSPACE (-2)
#define CBN_ERRSPACE (-1)
#define CBN_SELCHANGE 1
#define CBN_DBLCLK 2
#define CBN_SETFOCUS 3
#define CBN_KILLFOCUS 4
#define CBN_EDITCHANGE 5
#define CBN_EDITUPDATE 6
#define CBN_DROPDOWN 7
#define CBN_CLOSEUP 8
#define CBN_SELENDOK 9
#define CBN_SELENDCANCEL 10
#ifndef NOWINSTYLES
#define CBS_SIMPLE 1
#define CBS_DROPDOWN 2
#define CBS_DROPDOWNLIST 3
#define CBS_OWNERDRAWFIXED 16
#define CBS_OWNERDRAWVARIABLE 32
#define CBS_AUTOHSCROLL 64
#define CBS_OEMCONVERT 128
#define CBS_SORT 256
#define CBS_HASSTRINGS 512
#define CBS_NOINTEGRALHEIGHT 1024
#define CBS_DISABLENOSCROLL 2048
#if(WINVER >=0x0400)
#define CBS_UPPERCASE 0x2000
#define CBS_LOWERCASE 0x4000
#endif 
#endif 
#ifndef NOWINMESSAGES
#define CB_GETEDITSEL 320
#define CB_LIMITTEXT 321
#define CB_SETEDITSEL 322
#define CB_ADDSTRING 323
#define CB_DELETESTRING 324
#define CB_DIR 325
#define CB_GETCOUNT 326
#define CB_GETCURSEL 327
#define CB_GETLBTEXT 328
#define CB_GETLBTEXTLEN 329
#define CB_INSERTSTRING 330
#define CB_RESETCONTENT 331
#define CB_FINDSTRING 332
#define CB_SELECTSTRING 333
#define CB_SETCURSEL 334
#define CB_SHOWDROPDOWN 335
#define CB_GETITEMDATA 336
#define CB_SETITEMDATA 337
#define CB_GETDROPPEDCONTROLRECT 338
#define CB_SETITEMHEIGHT 339
#define CB_GETITEMHEIGHT 340
#define CB_SETEXTENDEDUI 341
#define CB_GETEXTENDEDUI 342
#define CB_GETDROPPEDSTATE 343
#define CB_FINDSTRINGEXACT 344
#define CB_SETLOCALE 345
#define CB_GETLOCALE 346
#if(WINVER >=0x0400)
#define CB_GETTOPINDEX 347
#define CB_SETTOPINDEX 348
#define CB_GETHORIZONTALEXTENT 349
#define CB_SETHORIZONTALEXTENT 350
#define CB_GETDROPPEDWIDTH 351
#define CB_SETDROPPEDWIDTH 352
#define CB_INITSTORAGE 353
#if(_WIN32_WCE >=0x0400)
#define CB_MULTIPLEADDSTRING 355
#endif
#endif 
#if(_WIN32_WINNT >=0x0501)
#define CB_GETCOMBOBOXINFO 356
#endif 
#if(_WIN32_WINNT >=0x0501)
#define CB_MSGMAX 357
#elif(_WIN32_WCE >=0x0400)
#define CB_MSGMAX 355
#elif(WINVER >=0x0400)
#define CB_MSGMAX 354
#else
#define CB_MSGMAX 347
#endif
#endif 
#ifndef NOWINSTYLES
#define SBS_HORZ 0
#define SBS_VERT 1
#define SBS_TOPALIGN 2
#define SBS_LEFTALIGN 2
#define SBS_BOTTOMALIGN 4
#define SBS_RIGHTALIGN 4
#define SBS_SIZEBOXTOPLEFTALIGN 2
#define SBS_SIZEBOXBOTTOMRIGHTALIGN 4
#define SBS_SIZEBOX 8
#if(WINVER >=0x0400)
#define SBS_SIZEGRIP 16
#endif 
#endif 
#ifndef NOWINMESSAGES
#define SBM_SETPOS 224 
#define SBM_GETPOS 225 
#define SBM_SETRANGE 226 
#define SBM_SETRANGEREDRAW 230 
#define SBM_GETRANGE 227 
#define SBM_ENABLE_ARROWS 228 
#if(WINVER >=0x0400)
#define SBM_SETSCROLLINFO 233
#define SBM_GETSCROLLINFO 234
#endif 
#if(_WIN32_WINNT >=0x0501)
#define SBM_GETSCROLLBARINFO 235
#endif 
#if(WINVER >=0x0400)
#define SIF_RANGE 1
#define SIF_PAGE 2
#define SIF_POS 4
#define SIF_DISABLENOSCROLL 8
#define SIF_TRACKPOS 16
#define SIF_ALL (SIF_RANGE|SIF_PAGE|SIF_POS|SIF_TRACKPOS)
typedef struct tagSCROLLINFO {
	UINT cbSize;
	UINT fMask;
	int nMin;
	int nMax;
	UINT nPage;
	int nPos;
	int nTrackPos;
} SCROLLINFO,*LPSCROLLINFO;
typedef SCROLLINFO CONST *LPCSCROLLINFO;
WINUSERAPI int WINAPI SetScrollInfo(HWND hwnd,int nBar,LPCSCROLLINFO lpsi,BOOL redraw);
WINUSERAPI BOOL WINAPI GetScrollInfo(HWND hwnd,int nBar,LPSCROLLINFO lpsi);
#endif 
#endif 
#endif 
#ifndef NOMDI
#define MDIS_ALLCHILDSTYLES 1
#define MDITILE_VERTICAL 0 
#define MDITILE_HORIZONTAL 1 
#define MDITILE_SKIPDISABLED 2 
#if(_WIN32_WINNT >=0x0500)
#define MDITILE_ZORDER 4
#endif 
typedef struct tagMDICREATESTRUCTA {
	LPCSTR szClass;
	LPCSTR szTitle;
	HANDLE hOwner;
	int x;
	int y;
	int cx;
	int cy;
	DWORD style;
	LPARAM lParam; 
} MDICREATESTRUCTA,*LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
	LPCWSTR szClass;
	LPCWSTR szTitle;
	HANDLE hOwner;
	int x;
	int y;
	int cx;
	int cy;
	DWORD style;
	LPARAM lParam; 
} MDICREATESTRUCTW,*LPMDICREATESTRUCTW;
#ifdef UNICODE
typedef MDICREATESTRUCTW MDICREATESTRUCT;
typedef LPMDICREATESTRUCTW LPMDICREATESTRUCT;
#else
typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
#endif 
typedef struct tagCLIENTCREATESTRUCT {
	HANDLE hWindowMenu;
	UINT idFirstChild;
} CLIENTCREATESTRUCT,*LPCLIENTCREATESTRUCT;
/*
WINUSERAPI LRESULT WINAPI DefFrameProcA(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
WINUSERAPI LRESULT WINAPI DefFrameProcW(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define DefFrameProc DefFrameProcW
#else
#define DefFrameProc DefFrameProcA
#endif 

WINUSERAPI 
#ifndef _MAC
LRESULT WINAPI 
#else
LRESULT CALLBACK 
#endif
DefMDIChildProcA(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
WINUSERAPI 
#ifndef _MAC
LRESULT WINAPI 
#else
LRESULT CALLBACK 
#endif
DefMDIChildProcW(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
#ifdef UNICODE
#define DefMDIChildProc DefMDIChildProcW
#else
#define DefMDIChildProc DefMDIChildProcA
#endif 
*/
#ifndef NOMSG
WINUSERAPI BOOL WINAPI TranslateMDISysAccel(HWND hWndClient,LPMSG lpMsg);
#endif 
/*
// WINUSERAPI UINT WINAPI ArrangeIconicWindows(HWND hWnd);
WINUSERAPI HWND WINAPI CreateMDIWindowA(LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
WINUSERAPI HWND WINAPI CreateMDIWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
#ifdef UNICODE
#define CreateMDIWindow CreateMDIWindowW
#else
#define CreateMDIWindow CreateMDIWindowA
#endif 
#if(WINVER >=0x0400)
WINUSERAPI 
WORD 
WINAPI 
TileWindows(HWND hwndParent,UINT wHow,CONST RECT * lpRect,UINT cKids,const HWND * lpKids);
WINUSERAPI WORD WINAPI CascadeWindows(HWND hwndParent,UINT wHow,CONST RECT * lpRect,UINT cKids,const HWND * lpKids);
#endif 
*/
#endif 
#endif 
#ifndef NOHELP
typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {
#ifndef _MAC
	DWORD mkSize;
#else
	WORD mkSize;
#endif
	CHAR mkKeylist;
	CHAR szKeyphrase[1];
} MULTIKEYHELPA,*PMULTIKEYHELPA,*LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {
#ifndef _MAC
	DWORD mkSize;
#else
	WORD mkSize;
#endif
	WCHAR mkKeylist;
	WCHAR szKeyphrase[1];
} MULTIKEYHELPW,*PMULTIKEYHELPW,*LPMULTIKEYHELPW;
#ifdef UNICODE
typedef MULTIKEYHELPW MULTIKEYHELP;
typedef PMULTIKEYHELPW PMULTIKEYHELP;
typedef LPMULTIKEYHELPW LPMULTIKEYHELP;
#else
typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
#endif 
typedef struct tagHELPWININFOA {
	int wStructSize;
	int x;
	int y;
	int dx;
	int dy;
	int wMax;
	CHAR rgchMember[2];
} HELPWININFOA,*PHELPWININFOA,*LPHELPWININFOA;
typedef struct tagHELPWININFOW {
	int wStructSize;
	int x;
	int y;
	int dx;
	int dy;
	int wMax;
	WCHAR rgchMember[2];
} HELPWININFOW,*PHELPWININFOW,*LPHELPWININFOW;
#ifdef UNICODE
typedef HELPWININFOW HELPWININFO;
typedef PHELPWININFOW PHELPWININFO;
typedef LPHELPWININFOW LPHELPWININFO;
#else
typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#endif 
#define HELP_CONTEXT 1 
#define HELP_QUIT 2 
#define HELP_INDEX 3 
#define HELP_CONTENTS 3
#define HELP_HELPONHELP 4 
#define HELP_SETINDEX 5 
#define HELP_SETCONTENTS 5
#define HELP_CONTEXTPOPUP 8
#define HELP_FORCEFILE 9
#define HELP_KEY 257 
#define HELP_COMMAND 258
#define HELP_PARTIALKEY 261
#define HELP_MULTIKEY 513
#define HELP_SETWINPOS 515
#if(WINVER >=0x0400)
#define HELP_CONTEXTMENU 10
#define HELP_FINDER 11
#define HELP_WM_HELP 12
#define HELP_SETPOPUP_POS 13
#define HELP_TCARD 0x8000
#define HELP_TCARD_DATA 16
#define HELP_TCARD_OTHER_CALLER 17
#define IDH_NO_HELP 28440
#define IDH_MISSING_CONTEXT 28441 
#define IDH_GENERIC_HELP_BUTTON 28442 
#define IDH_OK 28443
#define IDH_CANCEL 28444
#define IDH_HELP 28445
#endif 
WINUSERAPI BOOL WINAPI WinHelpA(HWND hWndMain,LPCSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
WINUSERAPI BOOL WINAPI WinHelpW(HWND hWndMain,LPCWSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
#ifdef UNICODE
#define WinHelp WinHelpW
#else
#define WinHelp WinHelpA
#endif 
#endif 
#if(WINVER >=0x0500)
#define GR_GDIOBJECTS 0 
#define GR_USEROBJECTS 1 
// WINUSERAPI DWORD WINAPI GetGuiResources(HANDLE hProcess,DWORD uiFlags);
#endif 
#ifndef NOSYSPARAMSINFO
#define SPI_GETBEEP 1
#define SPI_SETBEEP 2
#define SPI_GETMOUSE 3
#define SPI_SETMOUSE 4
#define SPI_GETBORDER 5
#define SPI_SETBORDER 6
#define SPI_GETKEYBOARDSPEED 10
#define SPI_SETKEYBOARDSPEED 11
#define SPI_LANGDRIVER 12
#define SPI_ICONHORIZONTALSPACING 13
#define SPI_GETSCREENSAVETIMEOUT 14
#define SPI_SETSCREENSAVETIMEOUT 15
#define SPI_GETSCREENSAVEACTIVE 16
#define SPI_SETSCREENSAVEACTIVE 17
#define SPI_GETGRIDGRANULARITY 18
#define SPI_SETGRIDGRANULARITY 19
#define SPI_SETDESKWALLPAPER 20
#define SPI_SETDESKPATTERN 21
#define SPI_GETKEYBOARDDELAY 22
#define SPI_SETKEYBOARDDELAY 23
#define SPI_ICONVERTICALSPACING 24
#define SPI_GETICONTITLEWRAP 25
#define SPI_SETICONTITLEWRAP 26
#define SPI_GETMENUDROPALIGNMENT 27
#define SPI_SETMENUDROPALIGNMENT 28
#define SPI_SETDOUBLECLKWIDTH 29
#define SPI_SETDOUBLECLKHEIGHT 30
#define SPI_GETICONTITLELOGFONT 31
#define SPI_SETDOUBLECLICKTIME 32
#define SPI_SETMOUSEBUTTONSWAP 33
#define SPI_SETICONTITLELOGFONT 34
#define SPI_GETFASTTASKSWITCH 35
#define SPI_SETFASTTASKSWITCH 36
#if(WINVER >=0x0400)
#define SPI_SETDRAGFULLWINDOWS 37
#define SPI_GETDRAGFULLWINDOWS 38
#define SPI_GETNONCLIENTMETRICS 41
#define SPI_SETNONCLIENTMETRICS 42
#define SPI_GETMINIMIZEDMETRICS 43
#define SPI_SETMINIMIZEDMETRICS 44
#define SPI_GETICONMETRICS 45
#define SPI_SETICONMETRICS 46
#define SPI_SETWORKAREA 47
#define SPI_GETWORKAREA 48
#define SPI_SETPENWINDOWS 49
#define SPI_GETHIGHCONTRAST 66
#define SPI_SETHIGHCONTRAST 67
#define SPI_GETKEYBOARDPREF 68
#define SPI_SETKEYBOARDPREF 69
#define SPI_GETSCREENREADER 70
#define SPI_SETSCREENREADER 71
#define SPI_GETANIMATION 72
#define SPI_SETANIMATION 73
#define SPI_GETFONTSMOOTHING 74
#define SPI_SETFONTSMOOTHING 75
#define SPI_SETDRAGWIDTH 76
#define SPI_SETDRAGHEIGHT 77
#define SPI_SETHANDHELD 78
#define SPI_GETLOWPOWERTIMEOUT 79
#define SPI_GETPOWEROFFTIMEOUT 80
#define SPI_SETLOWPOWERTIMEOUT 81
#define SPI_SETPOWEROFFTIMEOUT 82
#define SPI_GETLOWPOWERACTIVE 83
#define SPI_GETPOWEROFFACTIVE 84
#define SPI_SETLOWPOWERACTIVE 85
#define SPI_SETPOWEROFFACTIVE 86
#define SPI_SETCURSORS 87
#define SPI_SETICONS 88
#define SPI_GETDEFAULTINPUTLANG 89
#define SPI_SETDEFAULTINPUTLANG 90
#define SPI_SETLANGTOGGLE 91
#define SPI_GETWINDOWSEXTENSION 92
#define SPI_SETMOUSETRAILS 93
#define SPI_GETMOUSETRAILS 94
#define SPI_SETSCREENSAVERRUNNING 97
#define SPI_SCREENSAVERRUNNING SPI_SETSCREENSAVERRUNNING
#endif 
#define SPI_GETFILTERKEYS 50
#define SPI_SETFILTERKEYS 51
#define SPI_GETTOGGLEKEYS 52
#define SPI_SETTOGGLEKEYS 53
#define SPI_GETMOUSEKEYS 54
#define SPI_SETMOUSEKEYS 55
#define SPI_GETSHOWSOUNDS 56
#define SPI_SETSHOWSOUNDS 57
#define SPI_GETSTICKYKEYS 58
#define SPI_SETSTICKYKEYS 59
#define SPI_GETACCESSTIMEOUT 60
#define SPI_SETACCESSTIMEOUT 61
#if(WINVER >=0x0400)
#define SPI_GETSERIALKEYS 62
#define SPI_SETSERIALKEYS 63
#endif 
#define SPI_GETSOUNDSENTRY 64
#define SPI_SETSOUNDSENTRY 65
#if(_WIN32_WINNT >=0x0400)
#define SPI_GETSNAPTODEFBUTTON 95
#define SPI_SETSNAPTODEFBUTTON 96
#endif 
#if (_WIN32_WINNT >=0x0400)||(_WIN32_WINDOWS > 0x0400)
#define SPI_GETMOUSEHOVERWIDTH 98
#define SPI_SETMOUSEHOVERWIDTH 99
#define SPI_GETMOUSEHOVERHEIGHT 100
#define SPI_SETMOUSEHOVERHEIGHT 101
#define SPI_GETMOUSEHOVERTIME 102
#define SPI_SETMOUSEHOVERTIME 103
#define SPI_GETWHEELSCROLLLINES 104
#define SPI_SETWHEELSCROLLLINES 105
#define SPI_GETMENUSHOWDELAY 106
#define SPI_SETMENUSHOWDELAY 107
#define SPI_GETSHOWIMEUI 110
#define SPI_SETSHOWIMEUI 111
#endif
#if(WINVER >=0x0500)
#define SPI_GETMOUSESPEED 112
#define SPI_SETMOUSESPEED 113
#define SPI_GETSCREENSAVERRUNNING 114
#define SPI_GETDESKWALLPAPER 115
#endif 
#if(WINVER >=0x0500)
#define SPI_GETACTIVEWINDOWTRACKING 0x1000
#define SPI_SETACTIVEWINDOWTRACKING 0x1001
#define SPI_GETMENUANIMATION 0x1002
#define SPI_SETMENUANIMATION 0x1003
#define SPI_GETCOMBOBOXANIMATION 0x1004
#define SPI_SETCOMBOBOXANIMATION 0x1005
#define SPI_GETLISTBOXSMOOTHSCROLLING 0x1006
#define SPI_SETLISTBOXSMOOTHSCROLLING 0x1007
#define SPI_GETGRADIENTCAPTIONS 0x1008
#define SPI_SETGRADIENTCAPTIONS 0x1009
#define SPI_GETKEYBOARDCUES 0x100a
#define SPI_SETKEYBOARDCUES 0x100b
#define SPI_GETMENUUNDERLINES SPI_GETKEYBOARDCUES
#define SPI_SETMENUUNDERLINES SPI_SETKEYBOARDCUES
#define SPI_GETACTIVEWNDTRKZORDER 0x100c
#define SPI_SETACTIVEWNDTRKZORDER 0x100d
#define SPI_GETHOTTRACKING 0x100e
#define SPI_SETHOTTRACKING 0x100f
#define SPI_GETMENUFADE 0x1012
#define SPI_SETMENUFADE 0x1013
#define SPI_GETSELECTIONFADE 0x1014
#define SPI_SETSELECTIONFADE 0x1015
#define SPI_GETTOOLTIPANIMATION 0x1016
#define SPI_SETTOOLTIPANIMATION 0x1017
#define SPI_GETTOOLTIPFADE 0x1018
#define SPI_SETTOOLTIPFADE 0x1019
#define SPI_GETCURSORSHADOW 0x101a
#define SPI_SETCURSORSHADOW 0x101b
#if(_WIN32_WINNT >=0x0501)
#define SPI_GETMOUSESONAR 0x101c
#define SPI_SETMOUSESONAR 0x101d
#define SPI_GETMOUSECLICKLOCK 0x101e
#define SPI_SETMOUSECLICKLOCK 0x101f
#define SPI_GETMOUSEVANISH 0x1020
#define SPI_SETMOUSEVANISH 0x1021
#define SPI_GETFLATMENU 0x1022
#define SPI_SETFLATMENU 0x1023
#define SPI_GETDROPSHADOW 0x1024
#define SPI_SETDROPSHADOW 0x1025
#define SPI_GETBLOCKSENDINPUTRESETS 0x1026
#define SPI_SETBLOCKSENDINPUTRESETS 0x1027
#endif 
#define SPI_GETUIEFFECTS 0x103e
#define SPI_SETUIEFFECTS 0x103f
#define SPI_GETFOREGROUNDLOCKTIMEOUT 0x2000
#define SPI_SETFOREGROUNDLOCKTIMEOUT 0x2001
#define SPI_GETACTIVEWNDTRKTIMEOUT 0x2002
#define SPI_SETACTIVEWNDTRKTIMEOUT 0x2003
#define SPI_GETFOREGROUNDFLASHCOUNT 0x2004
#define SPI_SETFOREGROUNDFLASHCOUNT 0x2005
#define SPI_GETCARETWIDTH 0x2006
#define SPI_SETCARETWIDTH 0x2007
#if(_WIN32_WINNT >=0x0501)
#define SPI_GETMOUSECLICKLOCKTIME 0x2008
#define SPI_SETMOUSECLICKLOCKTIME 0x2009
#define SPI_GETFONTSMOOTHINGTYPE 0x200a
#define SPI_SETFONTSMOOTHINGTYPE 0x200b
#define FE_FONTSMOOTHINGSTANDARD 1
#define FE_FONTSMOOTHINGCLEARTYPE 2
#define FE_FONTSMOOTHINGDOCKING 0x8000
#define SPI_GETFONTSMOOTHINGCONTRAST 0x200c
#define SPI_SETFONTSMOOTHINGCONTRAST 0x200d
#define SPI_GETFOCUSBORDERWIDTH 0x200e
#define SPI_SETFOCUSBORDERWIDTH 0x200f
#define SPI_GETFOCUSBORDERHEIGHT 0x2010
#define SPI_SETFOCUSBORDERHEIGHT 0x2011
#define SPI_GETFONTSMOOTHINGORIENTATION 0x2012
#define SPI_SETFONTSMOOTHINGORIENTATION 0x2013
#define FE_FONTSMOOTHINGORIENTATIONBGR 0
#define FE_FONTSMOOTHINGORIENTATIONRGB 1
#endif 
#endif 
#define SPIF_UPDATEINIFILE 1
#define SPIF_SENDWININICHANGE 2
#define SPIF_SENDCHANGE SPIF_SENDWININICHANGE
#define METRICS_USEDEFAULT -1
#ifdef _WINGDI_
#ifndef NOGDI
typedef struct tagNONCLIENTMETRICSA {
	UINT cbSize;
	int iBorderWidth;
	int iScrollWidth;
	int iScrollHeight;
	int iCaptionWidth;
	int iCaptionHeight;
	LOGFONTA lfCaptionFont;
	int iSmCaptionWidth;
	int iSmCaptionHeight;
	LOGFONTA lfSmCaptionFont;
	int iMenuWidth;
	int iMenuHeight;
	LOGFONTA lfMenuFont;
	LOGFONTA lfStatusFont;
	LOGFONTA lfMessageFont;
} NONCLIENTMETRICSA,*PNONCLIENTMETRICSA,FAR* LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW {
	UINT cbSize;
	int iBorderWidth;
	int iScrollWidth;
	int iScrollHeight;
	int iCaptionWidth;
	int iCaptionHeight;
	LOGFONTW lfCaptionFont;
	int iSmCaptionWidth;
	int iSmCaptionHeight;
	LOGFONTW lfSmCaptionFont;
	int iMenuWidth;
	int iMenuHeight;
	LOGFONTW lfMenuFont;
	LOGFONTW lfStatusFont;
	LOGFONTW lfMessageFont;
} NONCLIENTMETRICSW,*PNONCLIENTMETRICSW,FAR* LPNONCLIENTMETRICSW;
#ifdef UNICODE
typedef NONCLIENTMETRICSW NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSW PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSW LPNONCLIENTMETRICS;
#else
typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#endif 
#endif 
#endif 
#define ARW_BOTTOMLEFT 0
#define ARW_BOTTOMRIGHT 1
#define ARW_TOPLEFT 2
#define ARW_TOPRIGHT 3
#define ARW_STARTMASK 3
#define ARW_STARTRIGHT 1
#define ARW_STARTTOP 2
#define ARW_LEFT 0
#define ARW_RIGHT 0
#define ARW_UP 4
#define ARW_DOWN 4
#define ARW_HIDE 8
typedef struct tagMINIMIZEDMETRICS {
	UINT cbSize;
	int iWidth;
	int iHorzGap;
	int iVertGap;
	int iArrange;
} MINIMIZEDMETRICS,*PMINIMIZEDMETRICS,*LPMINIMIZEDMETRICS;
#ifdef _WINGDI_
#ifndef NOGDI
typedef struct tagICONMETRICSA {
	UINT cbSize;
	int iHorzSpacing;
	int iVertSpacing;
	int iTitleWrap;
	LOGFONTA lfFont;
} ICONMETRICSA,*PICONMETRICSA,*LPICONMETRICSA;
typedef struct tagICONMETRICSW {
	UINT cbSize;
	int iHorzSpacing;
	int iVertSpacing;
	int iTitleWrap;
	LOGFONTW lfFont;
} ICONMETRICSW,*PICONMETRICSW,*LPICONMETRICSW;
#ifdef UNICODE
typedef ICONMETRICSW ICONMETRICS;
typedef PICONMETRICSW PICONMETRICS;
typedef LPICONMETRICSW LPICONMETRICS;
#else
typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
#endif 
#endif 
#endif 
typedef struct tagANIMATIONINFO {
	UINT cbSize;
	int iMinAnimate;
} ANIMATIONINFO,*LPANIMATIONINFO;
typedef struct tagSERIALKEYSA {
	UINT cbSize;
	DWORD dwFlags;
	LPSTR lpszActivePort;
	LPSTR lpszPort;
	UINT iBaudRate;
	UINT iPortState;
	UINT iActive;
} SERIALKEYSA,*LPSERIALKEYSA;
typedef struct tagSERIALKEYSW {
	UINT cbSize;
	DWORD dwFlags;
	LPWSTR lpszActivePort;
	LPWSTR lpszPort;
	UINT iBaudRate;
	UINT iPortState;
	UINT iActive;
} SERIALKEYSW,*LPSERIALKEYSW;
#ifdef UNICODE
typedef SERIALKEYSW SERIALKEYS;
typedef LPSERIALKEYSW LPSERIALKEYS;
#else
typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#endif 
#define SERKF_SERIALKEYSON 1
#define SERKF_AVAILABLE 2
#define SERKF_INDICATOR 4
typedef struct tagHIGHCONTRASTA {
	UINT cbSize;
	DWORD dwFlags;
	LPSTR lpszDefaultScheme;
} HIGHCONTRASTA,*LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW {
	UINT cbSize;
	DWORD dwFlags;
	LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW,*LPHIGHCONTRASTW;
#ifdef UNICODE
typedef HIGHCONTRASTW HIGHCONTRAST;
typedef LPHIGHCONTRASTW LPHIGHCONTRAST;
#else
typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#endif 
#define HCF_HIGHCONTRASTON 1
#define HCF_AVAILABLE 2
#define HCF_HOTKEYACTIVE 4
#define HCF_CONFIRMHOTKEY 8
#define HCF_HOTKEYSOUND 16
#define HCF_INDICATOR 32
#define HCF_HOTKEYAVAILABLE 64
#define HCF_LOGONDESKTOP 256
#define HCF_DEFAULTDESKTOP 512
#define CDS_UPDATEREGISTRY 1
#define CDS_TEST 2
#define CDS_FULLSCREEN 4
#define CDS_GLOBAL 8
#define CDS_SET_PRIMARY 16
#define CDS_VIDEOPARAMETERS 32
#define CDS_RESET 0x40000000
#define CDS_NORESET 0x10000000
#include <tvout.h>
#define DISP_CHANGE_SUCCESSFUL 0
#define DISP_CHANGE_RESTART 1
#define DISP_CHANGE_FAILED -1
#define DISP_CHANGE_BADMODE -2
#define DISP_CHANGE_NOTUPDATED -3
#define DISP_CHANGE_BADFLAGS -4
#define DISP_CHANGE_BADPARAM -5
#if(_WIN32_WINNT >=0x0501)
#define DISP_CHANGE_BADDUALVIEW -6
#endif 
#ifdef _WINGDI_
#ifndef NOGDI
WINUSERAPI LONG WINAPI ChangeDisplaySettingsA(LPDEVMODEA lpDevMode,DWORD dwFlags);
WINUSERAPI LONG WINAPI ChangeDisplaySettingsW(LPDEVMODEW lpDevMode,DWORD dwFlags);
#ifdef UNICODE
#define ChangeDisplaySettings ChangeDisplaySettingsW
#else
#define ChangeDisplaySettings ChangeDisplaySettingsA
#endif 
WINUSERAPI LONG WINAPI ChangeDisplaySettingsExA(LPCSTR lpszDeviceName,LPDEVMODEA lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);
WINUSERAPI LONG WINAPI ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName,LPDEVMODEW lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);
#ifdef UNICODE
#define ChangeDisplaySettingsEx ChangeDisplaySettingsExW
#else
#define ChangeDisplaySettingsEx ChangeDisplaySettingsExA
#endif 
#define ENUM_CURRENT_SETTINGS ((DWORD)-1)
#define ENUM_REGISTRY_SETTINGS ((DWORD)-2)
WINUSERAPI BOOL WINAPI EnumDisplaySettingsA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode);
WINUSERAPI BOOL WINAPI EnumDisplaySettingsW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode);
#ifdef UNICODE
#define EnumDisplaySettings EnumDisplaySettingsW
#else
#define EnumDisplaySettings EnumDisplaySettingsA
#endif 
#if(WINVER >=0x0500)
WINUSERAPI BOOL WINAPI EnumDisplaySettingsExA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode,DWORD dwFlags);
WINUSERAPI BOOL WINAPI EnumDisplaySettingsExW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode,DWORD dwFlags);
#ifdef UNICODE
#define EnumDisplaySettingsEx EnumDisplaySettingsExW
#else
#define EnumDisplaySettingsEx EnumDisplaySettingsExA
#endif 
#define EDS_RAWMODE 2
WINUSERAPI BOOL WINAPI EnumDisplayDevicesA(LPCSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEA lpDisplayDevice,DWORD dwFlags);
WINUSERAPI BOOL WINAPI EnumDisplayDevicesW(LPCWSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEW lpDisplayDevice,DWORD dwFlags);
#ifdef UNICODE
#define EnumDisplayDevices EnumDisplayDevicesW
#else
#define EnumDisplayDevices EnumDisplayDevicesA
#endif 
#endif 
#endif 
#endif 
WINUSERAPI BOOL WINAPI SystemParametersInfoA(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);
WINUSERAPI BOOL WINAPI SystemParametersInfoW(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);
#ifdef UNICODE
#define SystemParametersInfo SystemParametersInfoW
#else
#define SystemParametersInfo SystemParametersInfoA
#endif 
#endif 
typedef struct tagFILTERKEYS {
	UINT cbSize;
	DWORD dwFlags;
	DWORD iWaitMSec; 
	DWORD iDelayMSec; 
	DWORD iRepeatMSec; 
	DWORD iBounceMSec; 
} FILTERKEYS,*LPFILTERKEYS;
#define FKF_FILTERKEYSON 1
#define FKF_AVAILABLE 2
#define FKF_HOTKEYACTIVE 4
#define FKF_CONFIRMHOTKEY 8
#define FKF_HOTKEYSOUND 16
#define FKF_INDICATOR 32
#define FKF_CLICKON 64
typedef struct tagSTICKYKEYS {
	UINT cbSize;
	DWORD dwFlags;
} STICKYKEYS,*LPSTICKYKEYS;
#define SKF_STICKYKEYSON 1
#define SKF_AVAILABLE 2
#define SKF_HOTKEYACTIVE 4
#define SKF_CONFIRMHOTKEY 8
#define SKF_HOTKEYSOUND 16
#define SKF_INDICATOR 32
#define SKF_AUDIBLEFEEDBACK 64
#define SKF_TRISTATE 128
#define SKF_TWOKEYSOFF 256
#if(_WIN32_WINNT >=0x0500)
#define SKF_LALTLATCHED 0x10000000
#define SKF_LCTLLATCHED 0x4000000
#define SKF_LSHIFTLATCHED 0x1000000
#define SKF_RALTLATCHED 0x20000000
#define SKF_RCTLLATCHED 0x8000000
#define SKF_RSHIFTLATCHED 0x2000000
#define SKF_LWINLATCHED 0x40000000
#define SKF_RWINLATCHED 0x80000000
#define SKF_LALTLOCKED 0x100000
#define SKF_LCTLLOCKED 0x40000
#define SKF_LSHIFTLOCKED 0x10000
#define SKF_RALTLOCKED 0x200000
#define SKF_RCTLLOCKED 0x80000
#define SKF_RSHIFTLOCKED 0x20000
#define SKF_LWINLOCKED 0x400000
#define SKF_RWINLOCKED 0x800000
#endif 
typedef struct tagMOUSEKEYS {
	UINT cbSize;
	DWORD dwFlags;
	DWORD iMaxSpeed;
	DWORD iTimeToMaxSpeed;
	DWORD iCtrlSpeed;
	DWORD dwReserved1;
	DWORD dwReserved2;
} MOUSEKEYS,*LPMOUSEKEYS;
#define MKF_MOUSEKEYSON 1
#define MKF_AVAILABLE 2
#define MKF_HOTKEYACTIVE 4
#define MKF_CONFIRMHOTKEY 8
#define MKF_HOTKEYSOUND 16
#define MKF_INDICATOR 32
#define MKF_MODIFIERS 64
#define MKF_REPLACENUMBERS 128
#if(_WIN32_WINNT >=0x0500)
#define MKF_LEFTBUTTONSEL 0x10000000
#define MKF_RIGHTBUTTONSEL 0x20000000
#define MKF_LEFTBUTTONDOWN 0x1000000
#define MKF_RIGHTBUTTONDOWN 0x2000000
#define MKF_MOUSEMODE 0x80000000
#endif 
typedef struct tagACCESSTIMEOUT {
	UINT cbSize;
	DWORD dwFlags;
	DWORD iTimeOutMSec;
} ACCESSTIMEOUT,*LPACCESSTIMEOUT;
#define ATF_TIMEOUTON 1
#define ATF_ONOFFFEEDBACK 2
#define SSGF_NONE 0
#define SSGF_DISPLAY 3
#define SSTF_NONE 0
#define SSTF_CHARS 1
#define SSTF_BORDER 2
#define SSTF_DISPLAY 3
#define SSWF_NONE 0
#define SSWF_TITLE 1
#define SSWF_WINDOW 2
#define SSWF_DISPLAY 3
#define SSWF_CUSTOM 4
typedef struct tagSOUNDSENTRYA {
	UINT cbSize;
	DWORD dwFlags;
	DWORD iFSTextEffect;
	DWORD iFSTextEffectMSec;
	DWORD iFSTextEffectColorBits;
	DWORD iFSGrafEffect;
	DWORD iFSGrafEffectMSec;
	DWORD iFSGrafEffectColor;
	DWORD iWindowsEffect;
	DWORD iWindowsEffectMSec;
	LPSTR lpszWindowsEffectDLL;
	DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA,*LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW {
	UINT cbSize;
	DWORD dwFlags;
	DWORD iFSTextEffect;
	DWORD iFSTextEffectMSec;
	DWORD iFSTextEffectColorBits;
	DWORD iFSGrafEffect;
	DWORD iFSGrafEffectMSec;
	DWORD iFSGrafEffectColor;
	DWORD iWindowsEffect;
	DWORD iWindowsEffectMSec;
	LPWSTR lpszWindowsEffectDLL;
	DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW,*LPSOUNDSENTRYW;
#ifdef UNICODE
typedef SOUNDSENTRYW SOUNDSENTRY;
typedef LPSOUNDSENTRYW LPSOUNDSENTRY;
#else
typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#endif 
#define SSF_SOUNDSENTRYON 1
#define SSF_AVAILABLE 2
#define SSF_INDICATOR 4
typedef struct tagTOGGLEKEYS {
	UINT cbSize;
	DWORD dwFlags;
} TOGGLEKEYS,*LPTOGGLEKEYS;
#define TKF_TOGGLEKEYSON 1
#define TKF_AVAILABLE 2
#define TKF_HOTKEYACTIVE 4
#define TKF_CONFIRMHOTKEY 8
#define TKF_HOTKEYSOUND 16
#define TKF_INDICATOR 32
// WINUSERAPI VOID WINAPI SetDebugErrorLevel(DWORD dwLevel);
#define SLE_ERROR 1
#define SLE_MINORERROR 2
#define SLE_WARNING 3
// WINUSERAPI VOID WINAPI SetLastErrorEx(DWORD dwErrCode,DWORD dwType);
// WINUSERAPI int WINAPI InternalGetWindowText(HWND hWnd,LPWSTR pString,int cchMaxCount);
#if defined(WINNT)
WINUSERAPI BOOL WINAPI EndTask(HWND hWnd,BOOL fShutDown,BOOL fForce);
#endif
#if(WINVER >=0x0500)
#define MONITOR_DEFAULTTONULL 0
#define MONITOR_DEFAULTTOPRIMARY 1
#define MONITOR_DEFAULTTONEAREST 2
/*
WINUSERAPI HMONITOR WINAPI MonitorFromPoint(POINT pt,DWORD dwFlags);
WINUSERAPI HMONITOR WINAPI MonitorFromRect(LPCRECT lprc,DWORD dwFlags);
WINUSERAPI HMONITOR WINAPI MonitorFromWindow(HWND hwnd,DWORD dwFlags);
*/
#define MONITORINFOF_PRIMARY 1
#ifndef CCHDEVICENAME
#define CCHDEVICENAME 32
#endif
typedef struct tagMONITORINFO {
	DWORD cbSize;
	RECT rcMonitor;
	RECT rcWork;
	DWORD dwFlags;
} MONITORINFO,*LPMONITORINFO;
/*
#ifdef __cplusplus
typedef struct tagMONITORINFOEXA : public tagMONITORINFO {
	CHAR szDevice[CCHDEVICENAME];
} MONITORINFOEXA,*LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO {
	WCHAR szDevice[CCHDEVICENAME];
} MONITORINFOEXW,*LPMONITORINFOEXW;
#ifdef UNICODE
typedef MONITORINFOEXW MONITORINFOEX;
typedef LPMONITORINFOEXW LPMONITORINFOEX;
#else
typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
#endif 
#else 
typedef struct tagMONITORINFOEXA {
	MONITORINFO;
	CHAR szDevice[CCHDEVICENAME];
} MONITORINFOEXA,*LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW {
	MONITORINFO;
	WCHAR szDevice[CCHDEVICENAME];
} MONITORINFOEXW,*LPMONITORINFOEXW;
#ifdef UNICODE
typedef MONITORINFOEXW MONITORINFOEX;
typedef LPMONITORINFOEXW LPMONITORINFOEX;
#else
typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
#endif 
#endif
WINUSERAPI BOOL WINAPI GetMonitorInfoA(HMONITOR hMonitor,LPMONITORINFO lpmi);
WINUSERAPI BOOL WINAPI GetMonitorInfoW(HMONITOR hMonitor,LPMONITORINFO lpmi);
#ifdef UNICODE
#define GetMonitorInfo GetMonitorInfoW
#else
#define GetMonitorInfo GetMonitorInfoA
#endif 
typedef BOOL (CALLBACK* MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);
WINUSERAPI BOOL WINAPI EnumDisplayMonitors(HDC hdc,LPCRECT lprcClip,MONITORENUMPROC lpfnEnum,LPARAM dwData);
*/
#ifndef NOWINABLE
WINUSERAPI VOID WINAPI NotifyWinEvent(DWORD event,HWND hwnd,LONG idObject,LONG idChild);
typedef VOID (CALLBACK* WINEVENTPROC)(HWINEVENTHOOK hWinEventHook,DWORD event,HWND hwnd,LONG idObject,LONG idChild,DWORD idEventThread,DWORD dwmsEventTime);
WINUSERAPI HWINEVENTHOOK WINAPI SetWinEventHook(DWORD eventMin,DWORD eventMax,HMODULE hmodWinEventProc,WINEVENTPROC pfnWinEventProc,DWORD idProcess,DWORD idThread,DWORD dwFlags);
#if(_WIN32_WINNT >=0x0501)
WINUSERAPI BOOL WINAPI IsWinEventHookInstalled(DWORD event);
#endif 
#define WINEVENT_OUTOFCONTEXT 0 
#define WINEVENT_SKIPOWNTHREAD 1 
#define WINEVENT_SKIPOWNPROCESS 2 
#define WINEVENT_INCONTEXT 4 
// WINUSERAPI BOOL WINAPI UnhookWinEvent(HWINEVENTHOOK hWinEventHook);
#define CHILDID_SELF 0
#define INDEXID_OBJECT 0
#define INDEXID_CONTAINER 0
#define OBJID_WINDOW ((LONG)0x00000000)
#define OBJID_SYSMENU ((LONG)0xFFFFFFFF)
#define OBJID_TITLEBAR ((LONG)0xFFFFFFFE)
#define OBJID_MENU ((LONG)0xFFFFFFFD)
#define OBJID_CLIENT ((LONG)0xFFFFFFFC)
#define OBJID_VSCROLL ((LONG)0xFFFFFFFB)
#define OBJID_HSCROLL ((LONG)0xFFFFFFFA)
#define OBJID_SIZEGRIP ((LONG)0xFFFFFFF9)
#define OBJID_CARET ((LONG)0xFFFFFFF8)
#define OBJID_CURSOR ((LONG)0xFFFFFFF7)
#define OBJID_ALERT ((LONG)0xFFFFFFF6)
#define OBJID_SOUND ((LONG)0xFFFFFFF5)
#define OBJID_QUERYCLASSNAMEIDX ((LONG)0xFFFFFFF4)
#define OBJID_NATIVEOM ((LONG)0xFFFFFFF0)
#define EVENT_MIN 1
#define EVENT_MAX 0x7fffffff
#define EVENT_SYSTEM_SOUND 1
#define EVENT_SYSTEM_ALERT 2
#define EVENT_SYSTEM_FOREGROUND 3
#define EVENT_SYSTEM_MENUSTART 4
#define EVENT_SYSTEM_MENUEND 5
#define EVENT_SYSTEM_MENUPOPUPSTART 6
#define EVENT_SYSTEM_MENUPOPUPEND 7
#define EVENT_SYSTEM_CAPTURESTART 8
#define EVENT_SYSTEM_CAPTUREEND 9
#define EVENT_SYSTEM_MOVESIZESTART 10
#define EVENT_SYSTEM_MOVESIZEEND 11
#define EVENT_SYSTEM_CONTEXTHELPSTART 12
#define EVENT_SYSTEM_CONTEXTHELPEND 13
#define EVENT_SYSTEM_DRAGDROPSTART 14
#define EVENT_SYSTEM_DRAGDROPEND 15
#define EVENT_SYSTEM_DIALOGSTART 16
#define EVENT_SYSTEM_DIALOGEND 17
#define EVENT_SYSTEM_SCROLLINGSTART 18
#define EVENT_SYSTEM_SCROLLINGEND 19
#define EVENT_SYSTEM_SWITCHSTART 20
#define EVENT_SYSTEM_SWITCHEND 21
#define EVENT_SYSTEM_MINIMIZESTART 22
#define EVENT_SYSTEM_MINIMIZEEND 23
#if(_WIN32_WINNT >=0x0501)
#define EVENT_CONSOLE_CARET 0x4001
#define EVENT_CONSOLE_UPDATE_REGION 0x4002
#define EVENT_CONSOLE_UPDATE_SIMPLE 0x4003
#define EVENT_CONSOLE_UPDATE_SCROLL 0x4004
#define EVENT_CONSOLE_LAYOUT 0x4005
#define EVENT_CONSOLE_START_APPLICATION 0x4006
#define EVENT_CONSOLE_END_APPLICATION 0x4007
#define CONSOLE_APPLICATION_16BIT 1
#define CONSOLE_CARET_SELECTION 1
#define CONSOLE_CARET_VISIBLE 2
#endif 
#define EVENT_OBJECT_CREATE 0x8000 
#define EVENT_OBJECT_DESTROY 0x8001 
#define EVENT_OBJECT_SHOW 0x8002 
#define EVENT_OBJECT_HIDE 0x8003 
#define EVENT_OBJECT_REORDER 0x8004 
#define EVENT_OBJECT_FOCUS 0x8005 
#define EVENT_OBJECT_SELECTION 0x8006 
#define EVENT_OBJECT_SELECTIONADD 0x8007 
#define EVENT_OBJECT_SELECTIONREMOVE 0x8008 
#define EVENT_OBJECT_SELECTIONWITHIN 0x8009 
#define EVENT_OBJECT_STATECHANGE 0x800a 
#define EVENT_OBJECT_LOCATIONCHANGE 0x800b 
#define EVENT_OBJECT_NAMECHANGE 0x800c 
#define EVENT_OBJECT_DESCRIPTIONCHANGE 0x800d 
#define EVENT_OBJECT_VALUECHANGE 0x800e 
#define EVENT_OBJECT_PARENTCHANGE 0x800f 
#define EVENT_OBJECT_HELPCHANGE 0x8010 
#define EVENT_OBJECT_DEFACTIONCHANGE 0x8011 
#define EVENT_OBJECT_ACCELERATORCHANGE 0x8012 
#define SOUND_SYSTEM_STARTUP 1
#define SOUND_SYSTEM_SHUTDOWN 2
#define SOUND_SYSTEM_BEEP 3
#define SOUND_SYSTEM_ERROR 4
#define SOUND_SYSTEM_QUESTION 5
#define SOUND_SYSTEM_WARNING 6
#define SOUND_SYSTEM_INFORMATION 7
#define SOUND_SYSTEM_MAXIMIZE 8
#define SOUND_SYSTEM_MINIMIZE 9
#define SOUND_SYSTEM_RESTOREUP 10
#define SOUND_SYSTEM_RESTOREDOWN 11
#define SOUND_SYSTEM_APPSTART 12
#define SOUND_SYSTEM_FAULT 13
#define SOUND_SYSTEM_APPEND 14
#define SOUND_SYSTEM_MENUCOMMAND 15
#define SOUND_SYSTEM_MENUPOPUP 16
#define CSOUND_SYSTEM 16
#define ALERT_SYSTEM_INFORMATIONAL 1 
#define ALERT_SYSTEM_WARNING 2 
#define ALERT_SYSTEM_ERROR 3 
#define ALERT_SYSTEM_QUERY 4 
#define ALERT_SYSTEM_CRITICAL 5 
#define CALERT_SYSTEM 6
typedef struct tagGUITHREADINFO {
	DWORD cbSize;
	DWORD flags;
	HWND hwndActive;
	HWND hwndFocus;
	HWND hwndCapture;
	HWND hwndMenuOwner;
	HWND hwndMoveSize;
	HWND hwndCaret;
	RECT rcCaret;
} GUITHREADINFO,*PGUITHREADINFO,* LPGUITHREADINFO;
#define GUI_CARETBLINKING 1
#define GUI_INMOVESIZE 2
#define GUI_INMENUMODE 4
#define GUI_SYSTEMMENUMODE 8
#define GUI_POPUPMENUMODE 16
#if(_WIN32_WINNT >=0x0501)
#define GUI_16BITTASK 32
#endif 
WINUSERAPI BOOL WINAPI GetGUIThreadInfo(DWORD idThread,PGUITHREADINFO pgui);
WINUSERAPI UINT WINAPI GetWindowModuleFileNameA(HWND hwnd,LPSTR pszFileName,UINT cchFileNameMax);
WINUSERAPI UINT WINAPI GetWindowModuleFileNameW(HWND hwnd,LPWSTR pszFileName,UINT cchFileNameMax);
#ifdef UNICODE
#define GetWindowModuleFileName GetWindowModuleFileNameW
#else
#define GetWindowModuleFileName GetWindowModuleFileNameA
#endif 
#ifndef NO_STATE_FLAGS
#define STATE_SYSTEM_UNAVAILABLE 1 
#define STATE_SYSTEM_SELECTED 2
#define STATE_SYSTEM_FOCUSED 4
#define STATE_SYSTEM_PRESSED 8
#define STATE_SYSTEM_CHECKED 16
#define STATE_SYSTEM_MIXED 32 
#define STATE_SYSTEM_INDETERMINATE STATE_SYSTEM_MIXED
#define STATE_SYSTEM_READONLY 64
#define STATE_SYSTEM_HOTTRACKED 128
#define STATE_SYSTEM_DEFAULT 256
#define STATE_SYSTEM_EXPANDED 512
#define STATE_SYSTEM_COLLAPSED 1024
#define STATE_SYSTEM_BUSY 2048
#define STATE_SYSTEM_FLOATING 0x1000 
#define STATE_SYSTEM_MARQUEED 0x2000
#define STATE_SYSTEM_ANIMATED 0x4000
#define STATE_SYSTEM_INVISIBLE 0x8000
#define STATE_SYSTEM_OFFSCREEN 0x10000
#define STATE_SYSTEM_SIZEABLE 0x20000
#define STATE_SYSTEM_MOVEABLE 0x40000
#define STATE_SYSTEM_SELFVOICING 0x80000
#define STATE_SYSTEM_FOCUSABLE 0x100000
#define STATE_SYSTEM_SELECTABLE 0x200000
#define STATE_SYSTEM_LINKED 0x400000
#define STATE_SYSTEM_TRAVERSED 0x800000
#define STATE_SYSTEM_MULTISELECTABLE 0x1000000 
#define STATE_SYSTEM_EXTSELECTABLE 0x2000000 
#define STATE_SYSTEM_ALERT_LOW 0x4000000 
#define STATE_SYSTEM_ALERT_MEDIUM 0x8000000 
#define STATE_SYSTEM_ALERT_HIGH 0x10000000 
#define STATE_SYSTEM_PROTECTED 0x20000000 
#define STATE_SYSTEM_VALID 0x3fffffff
#endif
#define CCHILDREN_TITLEBAR 5
#define CCHILDREN_SCROLLBAR 5
typedef struct tagCURSORINFO {
	DWORD cbSize;
	DWORD flags;
	HCURSOR hCursor;
	POINT ptScreenPos;
} CURSORINFO,*PCURSORINFO,*LPCURSORINFO;
#define CURSOR_SHOWING 1
// WINUSERAPI BOOL WINAPI GetCursorInfo(PCURSORINFO pci);
typedef struct tagWINDOWINFO {
	DWORD cbSize;
	RECT rcWindow;
	RECT rcClient;
	DWORD dwStyle;
	DWORD dwExStyle;
	DWORD dwWindowStatus;
	UINT cxWindowBorders;
	UINT cyWindowBorders;
	ATOM atomWindowType;
	WORD wCreatorVersion;
} WINDOWINFO,*PWINDOWINFO,*LPWINDOWINFO;
#define WS_ACTIVECAPTION 1
WINUSERAPI BOOL WINAPI GetWindowInfo(HWND hwnd,PWINDOWINFO pwi);
typedef struct tagTITLEBARINFO {
	DWORD cbSize;
	RECT rcTitleBar;
	DWORD rgstate[CCHILDREN_TITLEBAR + 1];
} TITLEBARINFO,*PTITLEBARINFO,*LPTITLEBARINFO;
WINUSERAPI BOOL WINAPI GetTitleBarInfo(HWND hwnd,PTITLEBARINFO pti);
typedef struct tagMENUBARINFO {
	DWORD cbSize;
	RECT rcBar; 
	HMENU hMenu; 
	HWND hwndMenu; 
	BOOL fBarFocused:1; 
	BOOL fFocused:1; 
} MENUBARINFO,*PMENUBARINFO,*LPMENUBARINFO;
WINUSERAPI BOOL WINAPI GetMenuBarInfo(HWND hwnd,LONG idObject,LONG idItem,PMENUBARINFO pmbi);
typedef struct tagSCROLLBARINFO {
	DWORD cbSize;
	RECT rcScrollBar;
	int dxyLineButton;
	int xyThumbTop;
	int xyThumbBottom;
	int reserved;
	DWORD rgstate[CCHILDREN_SCROLLBAR + 1];
} SCROLLBARINFO,*PSCROLLBARINFO,*LPSCROLLBARINFO;
WINUSERAPI BOOL WINAPI GetScrollBarInfo(HWND hwnd,LONG idObject,PSCROLLBARINFO psbi);
typedef struct tagCOMBOBOXINFO {
	DWORD cbSize;
	RECT rcItem;
	RECT rcButton;
	DWORD stateButton;
	HWND hwndCombo;
	HWND hwndItem;
	HWND hwndList;
} COMBOBOXINFO,*PCOMBOBOXINFO,*LPCOMBOBOXINFO;
WINUSERAPI BOOL WINAPI GetComboBoxInfo(HWND hwndCombo,PCOMBOBOXINFO pcbi);
#define GA_PARENT 1
#define GA_ROOT 2
#define GA_ROOTOWNER 3
WINUSERAPI HWND WINAPI GetAncestor(HWND hwnd,UINT gaFlags);
WINUSERAPI HWND WINAPI RealChildWindowFromPoint(HWND hwndParent,POINT ptParentClientCoords);
WINUSERAPI UINT WINAPI RealGetWindowClassA(HWND hwnd,LPSTR ptszClassName,UINT cchClassNameMax);
WINUSERAPI UINT WINAPI RealGetWindowClassW(HWND hwnd,LPWSTR ptszClassName,UINT cchClassNameMax);
#ifdef UNICODE
#define RealGetWindowClass RealGetWindowClassW
#else
#define RealGetWindowClass RealGetWindowClassA
#endif 
typedef struct tagALTTABINFO {
	DWORD cbSize;
	int cItems;
	int cColumns;
	int cRows;
	int iColFocus;
	int iRowFocus;
	int cxItem;
	int cyItem;
	POINT ptStart;
} ALTTABINFO,*PALTTABINFO,*LPALTTABINFO;
WINUSERAPI BOOL WINAPI GetAltTabInfoA(HWND hwnd,int iItem,PALTTABINFO pati,LPSTR pszItemText,UINT cchItemText);
WINUSERAPI BOOL WINAPI GetAltTabInfoW(HWND hwnd,int iItem,PALTTABINFO pati,LPWSTR pszItemText,UINT cchItemText);
#ifdef UNICODE
#define GetAltTabInfo GetAltTabInfoW
#else
#define GetAltTabInfo GetAltTabInfoA
#endif 
// WINUSERAPI DWORD WINAPI GetListBoxInfo(HWND hwnd);
#endif 
#endif 
#if(_WIN32_WINNT >=0x0500)
WINUSERAPI BOOL WINAPI LockWorkStation(VOID);
#endif 
#if(_WIN32_WINNT >=0x0500)
WINUSERAPI BOOL WINAPI UserHandleGrantAccess(HANDLE hUserHandle,HANDLE hJob,BOOL bGrant);
#endif 
#if(_WIN32_WINNT >=0x0501)
DECLARE_HANDLE(HRAWINPUT);
#define GET_RAWINPUT_CODE_WPARAM(wParam)((wParam) & 0xff)
#define RIM_INPUT 0
#define RIM_INPUTSINK 1
typedef struct tagRAWINPUTHEADER {
	DWORD dwType;
	DWORD dwSize;
	HANDLE hDevice;
	WPARAM wParam;
} RAWINPUTHEADER,*PRAWINPUTHEADER,*LPRAWINPUTHEADER;
#define RIM_TYPEMOUSE 0
#define RIM_TYPEKEYBOARD 1
#define RIM_TYPEHID 2
typedef struct tagRAWMOUSE {
	USHORT usFlags;
	union {
		ULONG ulButtons;
		struct {
			USHORT usButtonFlags;
			USHORT usButtonData;
		};
	};
	ULONG ulRawButtons;
	LONG lLastX;
	LONG lLastY;
	ULONG ulExtraInformation;
} RAWMOUSE,*PRAWMOUSE,*LPRAWMOUSE;
#define RI_MOUSE_LEFT_BUTTON_DOWN 1 
#define RI_MOUSE_LEFT_BUTTON_UP 2 
#define RI_MOUSE_RIGHT_BUTTON_DOWN 4 
#define RI_MOUSE_RIGHT_BUTTON_UP 8 
#define RI_MOUSE_MIDDLE_BUTTON_DOWN 16 
#define RI_MOUSE_MIDDLE_BUTTON_UP 32 
#define RI_MOUSE_BUTTON_1_DOWN RI_MOUSE_LEFT_BUTTON_DOWN
#define RI_MOUSE_BUTTON_1_UP RI_MOUSE_LEFT_BUTTON_UP
#define RI_MOUSE_BUTTON_2_DOWN RI_MOUSE_RIGHT_BUTTON_DOWN
#define RI_MOUSE_BUTTON_2_UP RI_MOUSE_RIGHT_BUTTON_UP
#define RI_MOUSE_BUTTON_3_DOWN RI_MOUSE_MIDDLE_BUTTON_DOWN
#define RI_MOUSE_BUTTON_3_UP RI_MOUSE_MIDDLE_BUTTON_UP
#define RI_MOUSE_BUTTON_4_DOWN 64
#define RI_MOUSE_BUTTON_4_UP 128
#define RI_MOUSE_BUTTON_5_DOWN 256
#define RI_MOUSE_BUTTON_5_UP 512
#define RI_MOUSE_WHEEL 1024
#define MOUSE_MOVE_RELATIVE 0
#define MOUSE_MOVE_ABSOLUTE 1
#define MOUSE_VIRTUAL_DESKTOP 2 
#define MOUSE_ATTRIBUTES_CHANGED 4 
typedef struct tagRAWKEYBOARD {
	USHORT MakeCode;
	USHORT Flags;
	USHORT Reserved;
	USHORT VKey;
	UINT Message;
	ULONG ExtraInformation;
} RAWKEYBOARD,*PRAWKEYBOARD,*LPRAWKEYBOARD;
#define KEYBOARD_OVERRUN_MAKE_CODE 255
#define RI_KEY_MAKE 0
#define RI_KEY_BREAK 1
#define RI_KEY_E0 2
#define RI_KEY_E1 4
#define RI_KEY_TERMSRV_SET_LED 8
#define RI_KEY_TERMSRV_SHADOW 16
typedef struct tagRAWHID {
	DWORD dwSizeHid; 
	DWORD dwCount; 
	BYTE bRawData[1];
} RAWHID,*PRAWHID,*LPRAWHID;
typedef struct tagRAWINPUT {
	RAWINPUTHEADER header;
	union {
		RAWMOUSE mouse;
		RAWKEYBOARD keyboard;
		RAWHID hid;
	} data;
} RAWINPUT,*PRAWINPUT,*LPRAWINPUT;
#ifdef _WIN64
#define RAWINPUT_ALIGN(x)(((x) + sizeof(QWORD) - 1) & ~(sizeof(QWORD) - 1))
#else 
#define RAWINPUT_ALIGN(x)(((x) + sizeof(DWORD) - 1) & ~(sizeof(DWORD) - 1))
#endif 
#define NEXTRAWINPUTBLOCK(ptr) ((PRAWINPUT)RAWINPUT_ALIGN((ULONG_PTR)((PBYTE)(ptr) + (ptr)->header.dwSize)))
#define RID_INPUT 0x10000003
#define RID_HEADER 0x10000005
WINUSERAPI UINT WINAPI GetRawInputData(HRAWINPUT hRawInput,UINT uiCommand,LPVOID pData,PUINT pcbSize,UINT cbSizeHeader);
#define RIDI_PREPARSEDDATA 0x20000005
#define RIDI_DEVICENAME 0x20000007 
#define RIDI_DEVICEINFO 0x2000000b
typedef struct tagRID_DEVICE_INFO_MOUSE {
	DWORD dwId;
	DWORD dwNumberOfButtons;
	DWORD dwSampleRate;
} RID_DEVICE_INFO_MOUSE,*PRID_DEVICE_INFO_MOUSE;
typedef struct tagRID_DEVICE_INFO_KEYBOARD {
	DWORD dwType;
	DWORD dwSubType;
	DWORD dwKeyboardMode;
	DWORD dwNumberOfFunctionKeys;
	DWORD dwNumberOfIndicators;
	DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD,*PRID_DEVICE_INFO_KEYBOARD;
typedef struct tagRID_DEVICE_INFO_HID {
	DWORD dwVendorId;
	DWORD dwProductId;
	DWORD dwVersionNumber;
	USHORT usUsagePage;
	USHORT usUsage;
} RID_DEVICE_INFO_HID,*PRID_DEVICE_INFO_HID;
typedef struct tagRID_DEVICE_INFO {
	DWORD cbSize;
	DWORD dwType;
	union {
		RID_DEVICE_INFO_MOUSE mouse;
		RID_DEVICE_INFO_KEYBOARD keyboard;
		RID_DEVICE_INFO_HID hid;
	};
} RID_DEVICE_INFO,*PRID_DEVICE_INFO,*LPRID_DEVICE_INFO;
WINUSERAPI UINT WINAPI GetRawInputDeviceInfoA(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
WINUSERAPI UINT WINAPI GetRawInputDeviceInfoW(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
#ifdef UNICODE
#define GetRawInputDeviceInfo GetRawInputDeviceInfoW
#else
#define GetRawInputDeviceInfo GetRawInputDeviceInfoA
#endif 
WINUSERAPI UINT WINAPI GetRawInputBuffer(PRAWINPUT pData,PUINT pcbSize,UINT cbSizeHeader);
typedef struct tagRAWINPUTDEVICE {
	USHORT usUsagePage; 
	USHORT usUsage; 
	DWORD dwFlags;
	HWND hwndTarget; 
} RAWINPUTDEVICE,*PRAWINPUTDEVICE,*LPRAWINPUTDEVICE;
typedef CONST RAWINPUTDEVICE* PCRAWINPUTDEVICE;
#define RIDEV_REMOVE 1
#define RIDEV_EXCLUDE 16
#define RIDEV_PAGEONLY 32
#define RIDEV_NOLEGACY 48
#define RIDEV_INPUTSINK 256
#define RIDEV_CAPTUREMOUSE 512 
#define RIDEV_NOHOTKEYS 512 
#define RIDEV_APPKEYS 1024 
#define RIDEV_EXMODEMASK 240
#define RIDEV_EXMODE(mode)((mode) & RIDEV_EXMODEMASK)
WINUSERAPI BOOL WINAPI RegisterRawInputDevices(PCRAWINPUTDEVICE pRawInputDevices,UINT uiNumDevices,UINT cbSize);
WINUSERAPI UINT WINAPI GetRegisteredRawInputDevices(PRAWINPUTDEVICE pRawInputDevices,PUINT puiNumDevices,UINT cbSize);
typedef struct tagRAWINPUTDEVICELIST {
	HANDLE hDevice;
	DWORD dwType;
} RAWINPUTDEVICELIST,*PRAWINPUTDEVICELIST;
WINUSERAPI UINT WINAPI GetRawInputDeviceList(PRAWINPUTDEVICELIST pRawInputDeviceList,PUINT puiNumDevices,UINT cbSize);
WINUSERAPI LRESULT WINAPI DefRawInputProc(PRAWINPUT* paRawInput,INT nInput,UINT cbSizeHeader);
#endif 
#if !defined(RC_INVOKED) 
#if defined(ISOLATION_AWARE_ENABLED) && (ISOLATION_AWARE_ENABLED !=0)
#include "winuser.inl"
#endif 
#endif 
#endif 
