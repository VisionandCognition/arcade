function [methodinfo,structs,enuminfo,ThunkLibName]=win_kernel32
%WIN_KERNEL32 Create structures to define interfaces found in 'h_kernel'.

%This function was generated by loadlibrary.m parser version  on Wed Dec 14 15:46:41 2016
%perl options:'h_kernel.i -outfile=win_kernel32.m -thunkfile=kernel32_thunk_pcwin64.c -header=h_kernel.h winbase'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'kernel32_thunk_pcwin64');
%  PVOID __declspec ( dllimport ) EncodePointer ( PVOID Ptr ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)EncodePointer(PVOIDPtrThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PVOID __declspec ( dllimport ) DecodePointer ( PVOID Ptr ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)DecodePointer(PVOIDPtrThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PVOID __declspec ( dllimport ) EncodeSystemPointer ( PVOID Ptr ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)EncodeSystemPointer(PVOIDPtrThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PVOID __declspec ( dllimport ) DecodeSystemPointer ( PVOID Ptr ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)DecodeSystemPointer(PVOIDPtrThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% LONG _InterlockedIncrement ( LONG volatile * Addend ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='_InterlockedIncrement'; fcns.alias{fcnNum}='InterlockedIncrement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% LONG _InterlockedDecrement ( LONG volatile * Addend ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='_InterlockedDecrement'; fcns.alias{fcnNum}='InterlockedDecrement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% LONG _InterlockedExchange ( LONG volatile * Target , LONG Value ); 
fcns.thunkname{fcnNum}='longvoidPtrlongThunk';fcns.name{fcnNum}='_InterlockedExchange'; fcns.alias{fcnNum}='InterlockedExchange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'long'};fcnNum=fcnNum+1;
% LONG _InterlockedExchangeAdd ( LONG volatile * Addend , LONG Value ); 
fcns.thunkname{fcnNum}='longvoidPtrlongThunk';fcns.name{fcnNum}='_InterlockedExchangeAdd'; fcns.alias{fcnNum}='InterlockedExchangeAdd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'long'};fcnNum=fcnNum+1;
% LONG _InterlockedCompareExchange ( LONG volatile * Destination , LONG ExChange , LONG Comperand ); 
fcns.thunkname{fcnNum}='longvoidPtrlonglongThunk';fcns.name{fcnNum}='_InterlockedCompareExchange'; fcns.alias{fcnNum}='InterlockedCompareExchange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr', 'long', 'long'};fcnNum=fcnNum+1;
% PVOID _InterlockedCompareExchangePointer ( PVOID volatile * Destination , PVOID Exchange , PVOID Comperand ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='_InterlockedCompareExchangePointer'; fcns.alias{fcnNum}='InterlockedCompareExchangePointer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtrPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PVOID _InterlockedExchangePointer ( PVOID volatile * Target , PVOID Value ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='_InterlockedExchangePointer'; fcns.alias{fcnNum}='InterlockedExchangePointer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtrPtr', 'voidPtr'};fcnNum=fcnNum+1;
% LONG64 _InterlockedAnd64 ( LONG64 volatile * Destination , LONG64 Value ); 
fcns.thunkname{fcnNum}='int64voidPtrint64Thunk';fcns.name{fcnNum}='_InterlockedAnd64'; fcns.alias{fcnNum}='InterlockedAnd64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'int64Ptr', 'int64'};fcnNum=fcnNum+1;
% LONG64 _InterlockedOr64 ( LONG64 volatile * Destination , LONG64 Value ); 
fcns.thunkname{fcnNum}='int64voidPtrint64Thunk';fcns.name{fcnNum}='_InterlockedOr64'; fcns.alias{fcnNum}='InterlockedOr64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'int64Ptr', 'int64'};fcnNum=fcnNum+1;
% LONG64 _InterlockedXor64 ( LONG64 volatile * Destination , LONG64 Value ); 
fcns.thunkname{fcnNum}='int64voidPtrint64Thunk';fcns.name{fcnNum}='_InterlockedXor64'; fcns.alias{fcnNum}='InterlockedXor64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'int64Ptr', 'int64'};fcnNum=fcnNum+1;
% LONG64 _InterlockedIncrement64 ( LONG64 volatile * Addend ); 
fcns.thunkname{fcnNum}='int64voidPtrThunk';fcns.name{fcnNum}='_InterlockedIncrement64'; fcns.alias{fcnNum}='InterlockedIncrement64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'int64Ptr'};fcnNum=fcnNum+1;
% LONG64 _InterlockedDecrement64 ( LONG64 volatile * Addend ); 
fcns.thunkname{fcnNum}='int64voidPtrThunk';fcns.name{fcnNum}='_InterlockedDecrement64'; fcns.alias{fcnNum}='InterlockedDecrement64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'int64Ptr'};fcnNum=fcnNum+1;
% LONG64 _InterlockedExchange64 ( LONG64 volatile * Target , LONG64 Value ); 
fcns.thunkname{fcnNum}='int64voidPtrint64Thunk';fcns.name{fcnNum}='_InterlockedExchange64'; fcns.alias{fcnNum}='InterlockedExchange64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'int64Ptr', 'int64'};fcnNum=fcnNum+1;
% LONG64 _InterlockedExchangeAdd64 ( LONG64 volatile * Addend , LONG64 Value ); 
fcns.thunkname{fcnNum}='int64voidPtrint64Thunk';fcns.name{fcnNum}='_InterlockedExchangeAdd64'; fcns.alias{fcnNum}='InterlockedExchangeAdd64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'int64Ptr', 'int64'};fcnNum=fcnNum+1;
% LONG64 _InterlockedCompareExchange64 ( LONG64 volatile * Destination , LONG64 ExChange , LONG64 Comperand ); 
fcns.thunkname{fcnNum}='int64voidPtrint64int64Thunk';fcns.name{fcnNum}='_InterlockedCompareExchange64'; fcns.alias{fcnNum}='InterlockedCompareExchange64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'int64Ptr', 'int64', 'int64'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) InitializeSListHead ( PSLIST_HEADER ListHead ); 
fcns.thunkname{fcnNum}='voiddllimport)InitializeSListHead(PSLIST_HEADERListHeadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PSLIST_ENTRY __declspec ( dllimport ) InterlockedPopEntrySList ( PSLIST_HEADER ListHead ); 
fcns.thunkname{fcnNum}='PSLIST_ENTRYdllimport)InterlockedPopEntrySList(PSLIST_HEADERListHeadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PSLIST_ENTRY __declspec ( dllimport ) InterlockedFlushSList ( PSLIST_HEADER ListHead ); 
fcns.thunkname{fcnNum}='PSLIST_ENTRYdllimport)InterlockedFlushSList(PSLIST_HEADERListHeadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  USHORT __declspec ( dllimport ) QueryDepthSList ( PSLIST_HEADER ListHead ); 
fcns.thunkname{fcnNum}='uint16dllimport)QueryDepthSList(PSLIST_HEADERListHeadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FreeResource ( HGLOBAL hResData ); 
fcns.thunkname{fcnNum}='int32dllimport)FreeResource(HGLOBALhResDataThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPVOID __declspec ( dllimport ) LockResource ( HGLOBAL hResData ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)LockResource(HGLOBALhResDataThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% int WinMain ( HINSTANCE hInstance , HINSTANCE hPrevInstance , LPSTR lpCmdLine , int nShowCmd ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='WinMain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'HINSTANCE__Ptr', 'int8Ptr', 'int32'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FreeLibrary ( HMODULE hLibModule ); 
fcns.thunkname{fcnNum}='int32dllimport)FreeLibrary(HMODULEhLibModuleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DisableThreadLibraryCalls ( HMODULE hLibModule ); 
fcns.thunkname{fcnNum}='int32dllimport)DisableThreadLibraryCalls(HMODULEhLibModuleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetVersion ( void ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetVersion(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  SIZE_T __declspec ( dllimport ) GlobalSize ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='uint64dllimport)GlobalSize(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  UINT __declspec ( dllimport ) GlobalFlags ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='uint32dllimport)GlobalFlags(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPVOID __declspec ( dllimport ) GlobalLock ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GlobalLock(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HGLOBAL __declspec ( dllimport ) GlobalHandle ( LPCVOID pMem ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GlobalHandle(LPCVOIDpMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GlobalUnlock ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='int32dllimport)GlobalUnlock(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HGLOBAL __declspec ( dllimport ) GlobalFree ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GlobalFree(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  SIZE_T __declspec ( dllimport ) GlobalCompact ( DWORD dwMinFree ); 
fcns.thunkname{fcnNum}='uint64dllimport)GlobalCompact(DWORDdwMinFreeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GlobalFix ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='voiddllimport)GlobalFix(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GlobalUnfix ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='voiddllimport)GlobalUnfix(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPVOID __declspec ( dllimport ) GlobalWire ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GlobalWire(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GlobalUnWire ( HGLOBAL hMem ); 
fcns.thunkname{fcnNum}='int32dllimport)GlobalUnWire(HGLOBALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GlobalMemoryStatus ( LPMEMORYSTATUS lpBuffer ); 
fcns.thunkname{fcnNum}='voiddllimport)GlobalMemoryStatus(LPMEMORYSTATUSlpBufferThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GlobalMemoryStatusEx ( LPMEMORYSTATUSEX lpBuffer ); 
fcns.thunkname{fcnNum}='int32dllimport)GlobalMemoryStatusEx(LPMEMORYSTATUSEXlpBufferThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPVOID __declspec ( dllimport ) LocalLock ( HLOCAL hMem ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)LocalLock(HLOCALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HLOCAL __declspec ( dllimport ) LocalHandle ( LPCVOID pMem ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)LocalHandle(LPCVOIDpMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) LocalUnlock ( HLOCAL hMem ); 
fcns.thunkname{fcnNum}='int32dllimport)LocalUnlock(HLOCALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  SIZE_T __declspec ( dllimport ) LocalSize ( HLOCAL hMem ); 
fcns.thunkname{fcnNum}='uint64dllimport)LocalSize(HLOCALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  UINT __declspec ( dllimport ) LocalFlags ( HLOCAL hMem ); 
fcns.thunkname{fcnNum}='uint32dllimport)LocalFlags(HLOCALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HLOCAL __declspec ( dllimport ) LocalFree ( HLOCAL hMem ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)LocalFree(HLOCALhMemThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  SIZE_T __declspec ( dllimport ) LocalCompact ( UINT uMinFree ); 
fcns.thunkname{fcnNum}='uint64dllimport)LocalCompact(UINTuMinFreeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  SIZE_T __declspec ( dllimport ) GetLargePageMinimum ( void ); 
fcns.thunkname{fcnNum}='uint64dllimport)GetLargePageMinimum(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) HeapDestroy ( HANDLE hHeap ); 
fcns.thunkname{fcnNum}='int32dllimport)HeapDestroy(HANDLEhHeapThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HANDLE __declspec ( dllimport ) GetProcessHeap ( void ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetProcessHeap(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) HeapLock ( HANDLE hHeap ); 
fcns.thunkname{fcnNum}='int32dllimport)HeapLock(HANDLEhHeapThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) HeapUnlock ( HANDLE hHeap ); 
fcns.thunkname{fcnNum}='int32dllimport)HeapUnlock(HANDLEhHeapThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HANDLE __declspec ( dllimport ) GetCurrentProcess ( void ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetCurrentProcess(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetCurrentProcessId ( void ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetCurrentProcessId(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  __declspec ( noreturn ) void __declspec ( dllimport ) ExitProcess ( UINT uExitCode ); 
fcns.thunkname{fcnNum}='noreturn)void__declspec(dllimport)ExitProcess(UINTuExitCodeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) FatalExit ( int ExitCode ); 
fcns.thunkname{fcnNum}='voiddllimport)FatalExit(intExitCodeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPCH __declspec ( dllimport ) GetEnvironmentStrings ( void ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetEnvironmentStrings(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPWCH __declspec ( dllimport ) GetEnvironmentStringsW ( void ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetEnvironmentStringsW(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetEnvironmentStringsA ( LPCH NewEnvironment ); 
fcns.thunkname{fcnNum}='int32dllimport)SetEnvironmentStringsA(LPCHNewEnvironmentThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetEnvironmentStringsW ( LPWCH NewEnvironment ); 
fcns.thunkname{fcnNum}='int32dllimport)SetEnvironmentStringsW(LPWCHNewEnvironmentThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FreeEnvironmentStringsA ( LPCH ); 
fcns.thunkname{fcnNum}='int32dllimport)FreeEnvironmentStringsA(LPCHThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FreeEnvironmentStringsW ( LPWCH ); 
fcns.thunkname{fcnNum}='int32dllimport)FreeEnvironmentStringsW(LPWCHThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LONG __declspec ( dllimport ) UnhandledExceptionFilter ( struct _EXCEPTION_POINTERS * ExceptionInfo ); 
fcns.thunkname{fcnNum}='longdllimport)UnhandledExceptionFilter(struct_EXCEPTION_POINTERS*ExceptionInfoThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPTOP_LEVEL_EXCEPTION_FILTER __declspec ( dllimport ) SetUnhandledExceptionFilter ( LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTERlpTopLevelExceptionFilterThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) DeleteFiber ( LPVOID lpFiber ); 
fcns.thunkname{fcnNum}='voiddllimport)DeleteFiber(LPVOIDlpFiberThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPVOID __declspec ( dllimport ) ConvertThreadToFiber ( LPVOID lpParameter ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)ConvertThreadToFiber(LPVOIDlpParameterThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ConvertFiberToThread ( void ); 
fcns.thunkname{fcnNum}='int32dllimport)ConvertFiberToThread(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) SwitchToFiber ( LPVOID lpFiber ); 
fcns.thunkname{fcnNum}='voiddllimport)SwitchToFiber(LPVOIDlpFiberThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SwitchToThread ( void ); 
fcns.thunkname{fcnNum}='int32dllimport)SwitchToThread(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HANDLE __declspec ( dllimport ) GetCurrentThread ( void ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetCurrentThread(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetCurrentThreadId ( void ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetCurrentThreadId(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetThreadStackGuarantee ( PULONG StackSizeInBytes ); 
fcns.thunkname{fcnNum}='int32dllimport)SetThreadStackGuarantee(PULONGStackSizeInBytesThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetProcessIdOfThread ( HANDLE Thread ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetProcessIdOfThread(HANDLEThreadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetThreadId ( HANDLE Thread ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetThreadId(HANDLEThreadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetProcessId ( HANDLE Process ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetProcessId(HANDLEProcessThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetCurrentProcessorNumber ( void ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetCurrentProcessorNumber(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) RequestWakeupLatency ( LATENCY_TIME latency ); 
fcns.thunkname{fcnNum}='int32dllimport)RequestWakeupLatency(LATENCY_TIMElatencyThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsSystemResumeAutomatic ( void ); 
fcns.thunkname{fcnNum}='int32dllimport)IsSystemResumeAutomatic(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  int __declspec ( dllimport ) GetThreadPriority ( HANDLE hThread ); 
fcns.thunkname{fcnNum}='int32dllimport)GetThreadPriority(HANDLEhThreadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  __declspec ( noreturn ) void __declspec ( dllimport ) ExitThread ( DWORD dwExitCode ); 
fcns.thunkname{fcnNum}='noreturn)void__declspec(dllimport)ExitThread(DWORDdwExitCodeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  EXECUTION_STATE __declspec ( dllimport ) SetThreadExecutionState ( EXECUTION_STATE esFlags ); 
fcns.thunkname{fcnNum}='ulongdllimport)SetThreadExecutionState(EXECUTION_STATEesFlagsThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetLastError ( void ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetLastError(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) SetLastError ( DWORD dwErrCode ); 
fcns.thunkname{fcnNum}='voiddllimport)SetLastError(DWORDdwErrCodeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  UINT __declspec ( dllimport ) SetErrorMode ( UINT uMode ); 
fcns.thunkname{fcnNum}='uint32dllimport)SetErrorMode(UINTuModeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) SuspendThread ( HANDLE hThread ); 
fcns.thunkname{fcnNum}='ulongdllimport)SuspendThread(HANDLEhThreadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) ResumeThread ( HANDLE hThread ); 
fcns.thunkname{fcnNum}='ulongdllimport)ResumeThread(HANDLEhThreadThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsDebuggerPresent ( void ); 
fcns.thunkname{fcnNum}='int32dllimport)IsDebuggerPresent(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) DebugBreak ( void ); 
fcns.thunkname{fcnNum}='voiddllimport)DebugBreak(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DebugActiveProcess ( DWORD dwProcessId ); 
fcns.thunkname{fcnNum}='int32dllimport)DebugActiveProcess(DWORDdwProcessIdThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DebugActiveProcessStop ( DWORD dwProcessId ); 
fcns.thunkname{fcnNum}='int32dllimport)DebugActiveProcessStop(DWORDdwProcessIdThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DebugSetProcessKillOnExit ( BOOL KillOnExit ); 
fcns.thunkname{fcnNum}='int32dllimport)DebugSetProcessKillOnExit(BOOLKillOnExitThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DebugBreakProcess ( HANDLE Process ); 
fcns.thunkname{fcnNum}='int32dllimport)DebugBreakProcess(HANDLEProcessThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) InitializeCriticalSection ( LPCRITICAL_SECTION lpCriticalSection ); 
fcns.thunkname{fcnNum}='voiddllimport)InitializeCriticalSection(LPCRITICAL_SECTIONlpCriticalSectionThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) EnterCriticalSection ( LPCRITICAL_SECTION lpCriticalSection ); 
fcns.thunkname{fcnNum}='voiddllimport)EnterCriticalSection(LPCRITICAL_SECTIONlpCriticalSectionThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) LeaveCriticalSection ( LPCRITICAL_SECTION lpCriticalSection ); 
fcns.thunkname{fcnNum}='voiddllimport)LeaveCriticalSection(LPCRITICAL_SECTIONlpCriticalSectionThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) TryEnterCriticalSection ( LPCRITICAL_SECTION lpCriticalSection ); 
fcns.thunkname{fcnNum}='int32dllimport)TryEnterCriticalSection(LPCRITICAL_SECTIONlpCriticalSectionThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) DeleteCriticalSection ( LPCRITICAL_SECTION lpCriticalSection ); 
fcns.thunkname{fcnNum}='voiddllimport)DeleteCriticalSection(LPCRITICAL_SECTIONlpCriticalSectionThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetEvent ( HANDLE hEvent ); 
fcns.thunkname{fcnNum}='int32dllimport)SetEvent(HANDLEhEventThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ResetEvent ( HANDLE hEvent ); 
fcns.thunkname{fcnNum}='int32dllimport)ResetEvent(HANDLEhEventThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) PulseEvent ( HANDLE hEvent ); 
fcns.thunkname{fcnNum}='int32dllimport)PulseEvent(HANDLEhEventThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ReleaseMutex ( HANDLE hMutex ); 
fcns.thunkname{fcnNum}='int32dllimport)ReleaseMutex(HANDLEhMutexThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) Sleep ( DWORD dwMilliseconds ); 
fcns.thunkname{fcnNum}='voiddllimport)Sleep(DWORDdwMillisecondsThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) GlobalDeleteAtom ( ATOM nAtom ); 
fcns.thunkname{fcnNum}='uint16dllimport)GlobalDeleteAtom(ATOMnAtomThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) InitAtomTable ( DWORD nSize ); 
fcns.thunkname{fcnNum}='int32dllimport)InitAtomTable(DWORDnSizeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) DeleteAtom ( ATOM nAtom ); 
fcns.thunkname{fcnNum}='uint16dllimport)DeleteAtom(ATOMnAtomThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  UINT __declspec ( dllimport ) SetHandleCount ( UINT uNumber ); 
fcns.thunkname{fcnNum}='uint32dllimport)SetHandleCount(UINTuNumberThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetLogicalDrives ( void ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetLogicalDrives(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetFileType ( HANDLE hFile ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetFileType(HANDLEhFileThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HANDLE __declspec ( dllimport ) GetStdHandle ( DWORD nStdHandle ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetStdHandle(DWORDnStdHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FlushFileBuffers ( HANDLE hFile ); 
fcns.thunkname{fcnNum}='int32dllimport)FlushFileBuffers(HANDLEhFileThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) RequestDeviceWakeup ( HANDLE hDevice ); 
fcns.thunkname{fcnNum}='int32dllimport)RequestDeviceWakeup(HANDLEhDeviceThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) CancelDeviceWakeupRequest ( HANDLE hDevice ); 
fcns.thunkname{fcnNum}='int32dllimport)CancelDeviceWakeupRequest(HANDLEhDeviceThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetEndOfFile ( HANDLE hFile ); 
fcns.thunkname{fcnNum}='int32dllimport)SetEndOfFile(HANDLEhFileThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FindClose ( HANDLE hFindFile ); 
fcns.thunkname{fcnNum}='int32dllimport)FindClose(HANDLEhFindFileThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) CloseHandle ( HANDLE hObject ); 
fcns.thunkname{fcnNum}='int32dllimport)CloseHandle(HANDLEhObjectThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ClearCommBreak ( HANDLE hFile ); 
fcns.thunkname{fcnNum}='int32dllimport)ClearCommBreak(HANDLEhFileThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetCommBreak ( HANDLE hFile ); 
fcns.thunkname{fcnNum}='int32dllimport)SetCommBreak(HANDLEhFileThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetTapeStatus ( HANDLE hDevice ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetTapeStatus(HANDLEhDeviceThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GetSystemTime ( LPSYSTEMTIME lpSystemTime ); 
fcns.thunkname{fcnNum}='voiddllimport)GetSystemTime(LPSYSTEMTIMElpSystemTimeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GetSystemTimeAsFileTime ( LPFILETIME lpSystemTimeAsFileTime ); 
fcns.thunkname{fcnNum}='voiddllimport)GetSystemTimeAsFileTime(LPFILETIMElpSystemTimeAsFileTimeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetSystemTime ( const SYSTEMTIME * lpSystemTime ); 
fcns.thunkname{fcnNum}='int32dllimport)SetSystemTime(SYSTEMTIME*lpSystemTimeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GetLocalTime ( LPSYSTEMTIME lpSystemTime ); 
fcns.thunkname{fcnNum}='voiddllimport)GetLocalTime(LPSYSTEMTIMElpSystemTimeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetLocalTime ( const SYSTEMTIME * lpSystemTime ); 
fcns.thunkname{fcnNum}='int32dllimport)SetLocalTime(SYSTEMTIME*lpSystemTimeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GetSystemInfo ( LPSYSTEM_INFO lpSystemInfo ); 
fcns.thunkname{fcnNum}='voiddllimport)GetSystemInfo(LPSYSTEM_INFOlpSystemInfoThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% BOOL  GetSystemTimes ( LPFILETIME lpIdleTime , LPFILETIME lpKernelTime , LPFILETIME lpUserTime ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSystemTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GetNativeSystemInfo ( LPSYSTEM_INFO lpSystemInfo ); 
fcns.thunkname{fcnNum}='voiddllimport)GetNativeSystemInfo(LPSYSTEM_INFOlpSystemInfoThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsProcessorFeaturePresent ( DWORD ProcessorFeature ); 
fcns.thunkname{fcnNum}='int32dllimport)IsProcessorFeaturePresent(DWORDProcessorFeatureThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetTimeZoneInformation ( LPTIME_ZONE_INFORMATION lpTimeZoneInformation ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetTimeZoneInformation(LPTIME_ZONE_INFORMATIONlpTimeZoneInformationThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetTimeZoneInformation ( const TIME_ZONE_INFORMATION * lpTimeZoneInformation ); 
fcns.thunkname{fcnNum}='int32dllimport)SetTimeZoneInformation(TIME_ZONE_INFORMATION*lpTimeZoneInformationThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetTickCount ( void ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetTickCount(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DisconnectNamedPipe ( HANDLE hNamedPipe ); 
fcns.thunkname{fcnNum}='int32dllimport)DisconnectNamedPipe(HANDLEhNamedPipeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) UnmapViewOfFile ( LPCVOID lpBaseAddress ); 
fcns.thunkname{fcnNum}='int32dllimport)UnmapViewOfFile(LPCVOIDlpBaseAddressThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) EncryptFileA ( LPCSTR lpFileName ); 
fcns.thunkname{fcnNum}='int32dllimport)EncryptFileA(LPCSTRlpFileNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) EncryptFileW ( LPCWSTR lpFileName ); 
fcns.thunkname{fcnNum}='int32dllimport)EncryptFileW(LPCWSTRlpFileNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) CloseEncryptedFileRaw ( PVOID pvContext ); 
fcns.thunkname{fcnNum}='voiddllimport)CloseEncryptedFileRaw(PVOIDpvContextThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  int __declspec ( dllimport ) lstrlenA ( LPCSTR lpString ); 
fcns.thunkname{fcnNum}='int32dllimport)lstrlenA(LPCSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  int __declspec ( dllimport ) lstrlenW ( LPCWSTR lpString ); 
fcns.thunkname{fcnNum}='int32dllimport)lstrlenW(LPCWSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HFILE __declspec ( dllimport ) _lclose ( HFILE hFile ); 
fcns.thunkname{fcnNum}='int32dllimport)_lclose(HFILEhFileThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) FlsAlloc ( PFLS_CALLBACK_FUNCTION lpCallback ); 
fcns.thunkname{fcnNum}='ulongdllimport)FlsAlloc(PFLS_CALLBACK_FUNCTIONlpCallbackThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PVOID __declspec ( dllimport ) FlsGetValue ( DWORD dwFlsIndex ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)FlsGetValue(DWORDdwFlsIndexThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FlsFree ( DWORD dwFlsIndex ); 
fcns.thunkname{fcnNum}='int32dllimport)FlsFree(DWORDdwFlsIndexThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) TlsAlloc ( void ); 
fcns.thunkname{fcnNum}='ulongdllimport)TlsAlloc(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPVOID __declspec ( dllimport ) TlsGetValue ( DWORD dwTlsIndex ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)TlsGetValue(DWORDdwTlsIndexThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) TlsFree ( DWORD dwTlsIndex ); 
fcns.thunkname{fcnNum}='int32dllimport)TlsFree(DWORDdwTlsIndexThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) CancelWaitableTimer ( HANDLE hTimer ); 
fcns.thunkname{fcnNum}='int32dllimport)CancelWaitableTimer(HANDLEhTimerThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HANDLE __declspec ( dllimport ) CreateMemoryResourceNotification ( MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPENotificationTypeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HMODULE __declspec ( dllimport ) LoadLibraryA ( LPCSTR lpLibFileName ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)LoadLibraryA(LPCSTRlpLibFileNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HMODULE __declspec ( dllimport ) LoadLibraryW ( LPCWSTR lpLibFileName ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)LoadLibraryW(LPCWSTRlpLibFileNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HMODULE __declspec ( dllimport ) GetModuleHandleA ( LPCSTR lpModuleName ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetModuleHandleA(LPCSTRlpModuleNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HMODULE __declspec ( dllimport ) GetModuleHandleW ( LPCWSTR lpModuleName ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetModuleHandleW(LPCWSTRlpModuleNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) NeedCurrentDirectoryForExePathA ( LPCSTR ExeName ); 
fcns.thunkname{fcnNum}='int32dllimport)NeedCurrentDirectoryForExePathA(LPCSTRExeNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) NeedCurrentDirectoryForExePathW ( LPCWSTR ExeName ); 
fcns.thunkname{fcnNum}='int32dllimport)NeedCurrentDirectoryForExePathW(LPCWSTRExeNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetProcessVersion ( DWORD ProcessId ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetProcessVersion(DWORDProcessIdThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GetStartupInfoA ( LPSTARTUPINFOA lpStartupInfo ); 
fcns.thunkname{fcnNum}='voiddllimport)GetStartupInfoA(LPSTARTUPINFOAlpStartupInfoThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) GetStartupInfoW ( LPSTARTUPINFOW lpStartupInfo ); 
fcns.thunkname{fcnNum}='voiddllimport)GetStartupInfoW(LPSTARTUPINFOWlpStartupInfoThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPSTR __declspec ( dllimport ) GetCommandLineA ( void ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetCommandLineA(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  LPWSTR __declspec ( dllimport ) GetCommandLineW ( void ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetCommandLineW(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) OutputDebugStringA ( LPCSTR lpOutputString ); 
fcns.thunkname{fcnNum}='voiddllimport)OutputDebugStringA(LPCSTRlpOutputStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) OutputDebugStringW ( LPCWSTR lpOutputString ); 
fcns.thunkname{fcnNum}='voiddllimport)OutputDebugStringW(LPCWSTRlpOutputStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) GlobalAddAtomA ( LPCSTR lpString ); 
fcns.thunkname{fcnNum}='uint16dllimport)GlobalAddAtomA(LPCSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) GlobalAddAtomW ( LPCWSTR lpString ); 
fcns.thunkname{fcnNum}='uint16dllimport)GlobalAddAtomW(LPCWSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) GlobalFindAtomA ( LPCSTR lpString ); 
fcns.thunkname{fcnNum}='uint16dllimport)GlobalFindAtomA(LPCSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) GlobalFindAtomW ( LPCWSTR lpString ); 
fcns.thunkname{fcnNum}='uint16dllimport)GlobalFindAtomW(LPCWSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) AddAtomA ( LPCSTR lpString ); 
fcns.thunkname{fcnNum}='uint16dllimport)AddAtomA(LPCSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) AddAtomW ( LPCWSTR lpString ); 
fcns.thunkname{fcnNum}='uint16dllimport)AddAtomW(LPCWSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) FindAtomA ( LPCSTR lpString ); 
fcns.thunkname{fcnNum}='uint16dllimport)FindAtomA(LPCSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ATOM __declspec ( dllimport ) FindAtomW ( LPCWSTR lpString ); 
fcns.thunkname{fcnNum}='uint16dllimport)FindAtomW(LPCWSTRlpStringThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  UINT __declspec ( dllimport ) GetDriveTypeA ( LPCSTR lpRootPathName ); 
fcns.thunkname{fcnNum}='uint32dllimport)GetDriveTypeA(LPCSTRlpRootPathNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  UINT __declspec ( dllimport ) GetDriveTypeW ( LPCWSTR lpRootPathName ); 
fcns.thunkname{fcnNum}='uint32dllimport)GetDriveTypeW(LPCWSTRlpRootPathNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOLEAN __declspec ( dllimport ) Wow64EnableWow64FsRedirection ( BOOLEAN Wow64FsEnableRedirection ); 
fcns.thunkname{fcnNum}='uint8dllimport)Wow64EnableWow64FsRedirection(BOOLEANWow64FsEnableRedirectionThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) Wow64DisableWow64FsRedirection ( PVOID * OldValue ); 
fcns.thunkname{fcnNum}='int32dllimport)Wow64DisableWow64FsRedirection(PVOID*OldValueThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) Wow64RevertWow64FsRedirection ( PVOID OlValue ); 
fcns.thunkname{fcnNum}='int32dllimport)Wow64RevertWow64FsRedirection(PVOIDOlValueThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetCurrentDirectoryA ( LPCSTR lpPathName ); 
fcns.thunkname{fcnNum}='int32dllimport)SetCurrentDirectoryA(LPCSTRlpPathNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetCurrentDirectoryW ( LPCWSTR lpPathName ); 
fcns.thunkname{fcnNum}='int32dllimport)SetCurrentDirectoryW(LPCWSTRlpPathNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetDllDirectoryA ( LPCSTR lpPathName ); 
fcns.thunkname{fcnNum}='int32dllimport)SetDllDirectoryA(LPCSTRlpPathNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetDllDirectoryW ( LPCWSTR lpPathName ); 
fcns.thunkname{fcnNum}='int32dllimport)SetDllDirectoryW(LPCWSTRlpPathNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) RemoveDirectoryA ( LPCSTR lpPathName ); 
fcns.thunkname{fcnNum}='int32dllimport)RemoveDirectoryA(LPCSTRlpPathNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) RemoveDirectoryW ( LPCWSTR lpPathName ); 
fcns.thunkname{fcnNum}='int32dllimport)RemoveDirectoryW(LPCWSTRlpPathNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetFileAttributesA ( LPCSTR lpFileName ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetFileAttributesA(LPCSTRlpFileNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetFileAttributesW ( LPCWSTR lpFileName ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetFileAttributesW(LPCWSTRlpFileNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DeleteFileA ( LPCSTR lpFileName ); 
fcns.thunkname{fcnNum}='int32dllimport)DeleteFileA(LPCSTRlpFileNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DeleteFileW ( LPCWSTR lpFileName ); 
fcns.thunkname{fcnNum}='int32dllimport)DeleteFileW(LPCWSTRlpFileNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% HANDLE  FindFirstStreamW ( LPCWSTR lpFileName , STREAM_INFO_LEVELS InfoLevel , LPVOID lpFindStreamData , DWORD dwFlags ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrSTREAM_INFO_LEVELSvoidPtrulongThunk';fcns.name{fcnNum}='FindFirstStreamW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'e_STREAM_INFO_LEVELS', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL  FindNextStreamW ( HANDLE hFindStream , LPVOID lpFindStreamData ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FindNextStreamW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) SetFileApisToOEM ( void ); 
fcns.thunkname{fcnNum}='voiddllimport)SetFileApisToOEM(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) SetFileApisToANSI ( void ); 
fcns.thunkname{fcnNum}='voiddllimport)SetFileApisToANSI(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) AreFileApisANSI ( void ); 
fcns.thunkname{fcnNum}='int32dllimport)AreFileApisANSI(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) CancelIo ( HANDLE hFile ); 
fcns.thunkname{fcnNum}='int32dllimport)CancelIo(HANDLEhFileThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) CloseEventLog ( HANDLE hEventLog ); 
fcns.thunkname{fcnNum}='int32dllimport)CloseEventLog(HANDLEhEventLogThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DeregisterEventSource ( HANDLE hEventLog ); 
fcns.thunkname{fcnNum}='int32dllimport)DeregisterEventSource(HANDLEhEventLogThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ImpersonateNamedPipeClient ( HANDLE hNamedPipe ); 
fcns.thunkname{fcnNum}='int32dllimport)ImpersonateNamedPipeClient(HANDLEhNamedPipeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ImpersonateSelf ( SECURITY_IMPERSONATION_LEVEL ImpersonationLevel ); 
fcns.thunkname{fcnNum}='int32dllimport)ImpersonateSelf(SECURITY_IMPERSONATION_LEVELImpersonationLevelThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) RevertToSelf ( void ); 
fcns.thunkname{fcnNum}='int32dllimport)RevertToSelf(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsValidSid ( PSID pSid ); 
fcns.thunkname{fcnNum}='int32dllimport)IsValidSid(PSIDpSidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetSidLengthRequired ( UCHAR nSubAuthorityCount ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetSidLengthRequired(UCHARnSubAuthorityCountThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PVOID __declspec ( dllimport ) FreeSid ( PSID pSid ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)FreeSid(PSIDpSidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PSID_IDENTIFIER_AUTHORITY __declspec ( dllimport ) GetSidIdentifierAuthority ( PSID pSid ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetSidIdentifierAuthority(PSIDpSidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='s_SID_IDENTIFIER_AUTHORITYPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  PUCHAR __declspec ( dllimport ) GetSidSubAuthorityCount ( PSID pSid ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)GetSidSubAuthorityCount(PSIDpSidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetLengthSid ( PSID pSid ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetLengthSid(PSIDpSidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsValidAcl ( PACL pAcl ); 
fcns.thunkname{fcnNum}='int32dllimport)IsValidAcl(PACLpAclThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsValidSecurityDescriptor ( PSECURITY_DESCRIPTOR pSecurityDescriptor ); 
fcns.thunkname{fcnNum}='int32dllimport)IsValidSecurityDescriptor(PSECURITY_DESCRIPTORpSecurityDescriptorThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetSecurityDescriptorLength ( PSECURITY_DESCRIPTOR pSecurityDescriptor ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetSecurityDescriptorLength(PSECURITY_DESCRIPTORpSecurityDescriptorThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DestroyPrivateObjectSecurity ( PSECURITY_DESCRIPTOR * ObjectDescriptor ); 
fcns.thunkname{fcnNum}='int32dllimport)DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR*ObjectDescriptorThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FindNextChangeNotification ( HANDLE hChangeHandle ); 
fcns.thunkname{fcnNum}='int32dllimport)FindNextChangeNotification(HANDLEhChangeHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FindCloseChangeNotification ( HANDLE hChangeHandle ); 
fcns.thunkname{fcnNum}='int32dllimport)FindCloseChangeNotification(HANDLEhChangeHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) GetPriorityClass ( HANDLE hProcess ); 
fcns.thunkname{fcnNum}='ulongdllimport)GetPriorityClass(HANDLEhProcessThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsBadCodePtr ( FARPROC lpfn ); 
fcns.thunkname{fcnNum}='int32dllimport)IsBadCodePtr(FARPROClpfnThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) AllocateLocallyUniqueId ( PLUID Luid ); 
fcns.thunkname{fcnNum}='int32dllimport)AllocateLocallyUniqueId(PLUIDLuidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetComputerNameA ( LPCSTR lpComputerName ); 
fcns.thunkname{fcnNum}='int32dllimport)SetComputerNameA(LPCSTRlpComputerNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) SetComputerNameW ( LPCWSTR lpComputerName ); 
fcns.thunkname{fcnNum}='int32dllimport)SetComputerNameW(LPCWSTRlpComputerNameThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ImpersonateLoggedOnUser ( HANDLE hToken ); 
fcns.thunkname{fcnNum}='int32dllimport)ImpersonateLoggedOnUser(HANDLEhTokenThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ImpersonateAnonymousToken ( HANDLE ThreadHandle ); 
fcns.thunkname{fcnNum}='int32dllimport)ImpersonateAnonymousToken(HANDLEThreadHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsTokenRestricted ( HANDLE TokenHandle ); 
fcns.thunkname{fcnNum}='int32dllimport)IsTokenRestricted(HANDLETokenHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) IsTokenUntrusted ( HANDLE TokenHandle ); 
fcns.thunkname{fcnNum}='int32dllimport)IsTokenUntrusted(HANDLETokenHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) UnregisterWait ( HANDLE WaitHandle ); 
fcns.thunkname{fcnNum}='int32dllimport)UnregisterWait(HANDLEWaitHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HANDLE __declspec ( dllimport ) CreateTimerQueue ( void ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)CreateTimerQueue(voidThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DeleteTimerQueue ( HANDLE TimerQueue ); 
fcns.thunkname{fcnNum}='int32dllimport)DeleteTimerQueue(HANDLETimerQueueThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GetCurrentHwProfileA ( LPHW_PROFILE_INFOA lpHwProfileInfo ); 
fcns.thunkname{fcnNum}='int32dllimport)GetCurrentHwProfileA(LPHW_PROFILE_INFOAlpHwProfileInfoThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GetCurrentHwProfileW ( LPHW_PROFILE_INFOW lpHwProfileInfo ); 
fcns.thunkname{fcnNum}='int32dllimport)GetCurrentHwProfileW(LPHW_PROFILE_INFOWlpHwProfileInfoThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) QueryPerformanceCounter ( LARGE_INTEGER * lpPerformanceCount ); 
fcns.thunkname{fcnNum}='int32dllimport)QueryPerformanceCounter(LARGE_INTEGER*lpPerformanceCountThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) QueryPerformanceFrequency ( LARGE_INTEGER * lpFrequency ); 
fcns.thunkname{fcnNum}='int32dllimport)QueryPerformanceFrequency(LARGE_INTEGER*lpFrequencyThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GetVersionExA ( LPOSVERSIONINFOA lpVersionInformation ); 
fcns.thunkname{fcnNum}='int32dllimport)GetVersionExA(LPOSVERSIONINFOAlpVersionInformationThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GetVersionExW ( LPOSVERSIONINFOW lpVersionInformation ); 
fcns.thunkname{fcnNum}='int32dllimport)GetVersionExW(LPOSVERSIONINFOWlpVersionInformationThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% BOOL  GetSystemPowerStatus ( LPSYSTEM_POWER_STATUS lpSystemPowerStatus ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetSystemPowerStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SYSTEM_POWER_STATUSPtr'};fcnNum=fcnNum+1;
% BOOL  SetSystemPowerState ( BOOL fSuspend , BOOL fForce ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='SetSystemPowerState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  ULONG __declspec ( dllimport ) RemoveVectoredExceptionHandler ( PVOID Handle ); 
fcns.thunkname{fcnNum}='ulongdllimport)RemoveVectoredExceptionHandler(PVOIDHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  ULONG __declspec ( dllimport ) RemoveVectoredContinueHandler ( PVOID Handle ); 
fcns.thunkname{fcnNum}='ulongdllimport)RemoveVectoredContinueHandler(PVOIDHandleThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FindVolumeClose ( HANDLE hFindVolume ); 
fcns.thunkname{fcnNum}='int32dllimport)FindVolumeClose(HANDLEhFindVolumeThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) FindVolumeMountPointClose ( HANDLE hFindVolumeMountPoint ); 
fcns.thunkname{fcnNum}='int32dllimport)FindVolumeMountPointClose(HANDLEhFindVolumeMountPointThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DeleteVolumeMountPointA ( LPCSTR lpszVolumeMountPoint ); 
fcns.thunkname{fcnNum}='int32dllimport)DeleteVolumeMountPointA(LPCSTRlpszVolumeMountPointThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) DeleteVolumeMountPointW ( LPCWSTR lpszVolumeMountPoint ); 
fcns.thunkname{fcnNum}='int32dllimport)DeleteVolumeMountPointW(LPCWSTRlpszVolumeMountPointThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HANDLE __declspec ( dllimport ) CreateActCtxA ( PCACTCTXA pActCtx ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)CreateActCtxA(PCACTCTXApActCtxThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  HANDLE __declspec ( dllimport ) CreateActCtxW ( PCACTCTXW pActCtx ); 
fcns.thunkname{fcnNum}='voidPtrdllimport)CreateActCtxW(PCACTCTXWpActCtxThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) AddRefActCtx ( HANDLE hActCtx ); 
fcns.thunkname{fcnNum}='voiddllimport)AddRefActCtx(HANDLEhActCtxThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  void __declspec ( dllimport ) ReleaseActCtx ( HANDLE hActCtx ); 
fcns.thunkname{fcnNum}='voiddllimport)ReleaseActCtx(HANDLEhActCtxThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) ZombifyActCtx ( HANDLE hActCtx ); 
fcns.thunkname{fcnNum}='int32dllimport)ZombifyActCtx(HANDLEhActCtxThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GetCurrentActCtx ( HANDLE * lphActCtx ); 
fcns.thunkname{fcnNum}='int32dllimport)GetCurrentActCtx(HANDLE*lphActCtxThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  DWORD __declspec ( dllimport ) WTSGetActiveConsoleSessionId (); 
fcns.thunkname{fcnNum}='ulongdllimport)WTSGetActiveConsoleSessionId(Thunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
%  BOOL __declspec ( dllimport ) GetNumaHighestNodeNumber ( PULONG HighestNodeNumber ); 
fcns.thunkname{fcnNum}='int32dllimport)GetNumaHighestNodeNumber(PULONGHighestNodeNumberThunk';fcns.name{fcnNum}='__declspec'; fcns.alias{fcnNum}='declspec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
structs.s_LIST_ENTRY.members=struct('Flink', 's_LIST_ENTRYPtr', 'Blink', 's_LIST_ENTRYPtr');
structs.s_EXCEPTION_RECORD.members=struct('ExceptionCode', 'ulong', 'ExceptionFlags', 'ulong', 'ExceptionRecord', 's_EXCEPTION_RECORDPtr', 'ExceptionAddress', 'voidPtr', 'NumberParameters', 'ulong', 'ExceptionInformation', 'uint64#15');
structs.s_EXCEPTION_POINTERS.members=struct('ExceptionRecord', 's_EXCEPTION_RECORDPtr', 'ContextRecord', 'error');
structs.s_SID_IDENTIFIER_AUTHORITY.members=struct('Value', 'uint8#6');
structs.s_RTL_CRITICAL_SECTION_DEBUG.members=struct('Type', 'uint16', 'CreatorBackTraceIndex', 'uint16', 'CriticalSection', 'voidPtr', 'ProcessLocksList', 's_LIST_ENTRY', 'EntryCount', 'ulong', 'ContentionCount', 'ulong', 'Spare', 'ulong#2');
structs.s_RTL_CRITICAL_SECTION.members=struct('DebugInfo', 's_RTL_CRITICAL_SECTION_DEBUGPtr', 'LockCount', 'long', 'RecursionCount', 'long', 'OwningThread', 'voidPtr', 'LockSemaphore', 'voidPtr', 'SpinCount', 'uint64');
structs.HINSTANCE__.members=struct('unused', 'int32');
structs.s_FILETIME.members=struct('dwLowDateTime', 'ulong', 'dwHighDateTime', 'ulong');
structs.s_SECURITY_ATTRIBUTES.members=struct('nLength', 'ulong', 'lpSecurityDescriptor', 'voidPtr', 'bInheritHandle', 'int32');
structs.s_PROCESS_INFORMATION.members=struct('hProcess', 'voidPtr', 'hThread', 'voidPtr', 'dwProcessId', 'ulong', 'dwThreadId', 'ulong');
structs.s_SYSTEMTIME.members=struct('wYear', 'uint16', 'wMonth', 'uint16', 'wDayOfWeek', 'uint16', 'wDay', 'uint16', 'wHour', 'uint16', 'wMinute', 'uint16', 'wSecond', 'uint16', 'wMilliseconds', 'uint16');
structs.s_COMMPROP.members=struct('wPacketLength', 'uint16', 'wPacketVersion', 'uint16', 'dwServiceMask', 'ulong', 'dwReserved1', 'ulong', 'dwMaxTxQueue', 'ulong', 'dwMaxRxQueue', 'ulong', 'dwMaxBaud', 'ulong', 'dwProvSubType', 'ulong', 'dwProvCapabilities', 'ulong', 'dwSettableParams', 'ulong', 'dwSettableBaud', 'ulong', 'wSettableData', 'uint16', 'wSettableStopParity', 'uint16', 'dwCurrentTxQueue', 'ulong', 'dwCurrentRxQueue', 'ulong', 'dwProvSpec1', 'ulong', 'dwProvSpec2', 'ulong', 'wcProvChar', 'uint16#1');
structs.s_COMMTIMEOUTS.members=struct('ReadIntervalTimeout', 'ulong', 'ReadTotalTimeoutMultiplier', 'ulong', 'ReadTotalTimeoutConstant', 'ulong', 'WriteTotalTimeoutMultiplier', 'ulong', 'WriteTotalTimeoutConstant', 'ulong');
structs.s_COMMCONFIG.members=struct('dwSize', 'ulong', 'wVersion', 'uint16', 'wReserved', 'uint16', 'dcb', 'error', 'dwProviderSubType', 'ulong', 'dwProviderOffset', 'ulong', 'dwProviderSize', 'ulong', 'wcProviderData', 'uint16#1');
structs.s_MEMORYSTATUS.members=struct('dwLength', 'ulong', 'dwMemoryLoad', 'ulong', 'dwTotalPhys', 'uint64', 'dwAvailPhys', 'uint64', 'dwTotalPageFile', 'uint64', 'dwAvailPageFile', 'uint64', 'dwTotalVirtual', 'uint64', 'dwAvailVirtual', 'uint64');
structs.s_EXCEPTION_DEBUG_INFO.members=struct('ExceptionRecord', 's_EXCEPTION_RECORD', 'dwFirstChance', 'ulong');
structs.s_CREATE_THREAD_DEBUG_INFO.members=struct('hThread', 'voidPtr', 'lpThreadLocalBase', 'voidPtr', 'lpStartAddress', 'FcnPtr');
structs.s_CREATE_PROCESS_DEBUG_INFO.members=struct('hFile', 'voidPtr', 'hProcess', 'voidPtr', 'hThread', 'voidPtr', 'lpBaseOfImage', 'voidPtr', 'dwDebugInfoFileOffset', 'ulong', 'nDebugInfoSize', 'ulong', 'lpThreadLocalBase', 'voidPtr', 'lpStartAddress', 'FcnPtr', 'lpImageName', 'voidPtr', 'fUnicode', 'uint16');
structs.s_EXIT_THREAD_DEBUG_INFO.members=struct('dwExitCode', 'ulong');
structs.s_EXIT_PROCESS_DEBUG_INFO.members=struct('dwExitCode', 'ulong');
structs.s_LOAD_DLL_DEBUG_INFO.members=struct('hFile', 'voidPtr', 'lpBaseOfDll', 'voidPtr', 'dwDebugInfoFileOffset', 'ulong', 'nDebugInfoSize', 'ulong', 'lpImageName', 'voidPtr', 'fUnicode', 'uint16');
structs.s_UNLOAD_DLL_DEBUG_INFO.members=struct('lpBaseOfDll', 'voidPtr');
structs.s_OUTPUT_DEBUG_STRING_INFO.members=struct('lpDebugStringData', 'int8Ptr', 'fUnicode', 'uint16', 'nDebugStringLength', 'uint16');
structs.s_RIP_INFO.members=struct('dwError', 'ulong', 'dwType', 'ulong');
structs.s_OFSTRUCT.members=struct('cBytes', 'uint8', 'fFixedDisk', 'uint8', 'nErrCode', 'uint16', 'Reserved1', 'uint16', 'Reserved2', 'uint16', 'szPathName', 'int8#128');
structs.s_MEMORYSTATUSEX.members=struct('dwLength', 'ulong', 'dwMemoryLoad', 'ulong', 'ullTotalPhys', 'uint64', 'ullAvailPhys', 'uint64', 'ullTotalPageFile', 'uint64', 'ullAvailPageFile', 'uint64', 'ullTotalVirtual', 'uint64', 'ullAvailVirtual', 'uint64', 'ullAvailExtendedVirtual', 'uint64');
structs.s_BY_HANDLE_FILE_INFORMATION.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'dwVolumeSerialNumber', 'ulong', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong', 'nNumberOfLinks', 'ulong', 'nFileIndexHigh', 'ulong', 'nFileIndexLow', 'ulong');
structs.s_TIME_ZONE_INFORMATION.members=struct('Bias', 'long', 'StandardName', 'uint16#32', 'StandardDate', 's_SYSTEMTIME', 'StandardBias', 'long', 'DaylightName', 'uint16#32', 'DaylightDate', 's_SYSTEMTIME', 'DaylightBias', 'long');
structs.s_WIN32_STREAM_ID.members=struct('dwStreamId', 'ulong', 'dwStreamAttributes', 'ulong', 'Size', 'error', 'dwStreamNameSize', 'ulong', 'cStreamName', 'uint16#1');
structs.s_STARTUPINFOA.members=struct('cb', 'ulong', 'lpReserved', 'int8Ptr', 'lpDesktop', 'int8Ptr', 'lpTitle', 'int8Ptr', 'dwX', 'ulong', 'dwY', 'ulong', 'dwXSize', 'ulong', 'dwYSize', 'ulong', 'dwXCountChars', 'ulong', 'dwYCountChars', 'ulong', 'dwFillAttribute', 'ulong', 'dwFlags', 'ulong', 'wShowWindow', 'uint16', 'cbReserved2', 'uint16', 'lpReserved2', 'uint8Ptr', 'hStdInput', 'voidPtr', 'hStdOutput', 'voidPtr', 'hStdError', 'voidPtr');
structs.s_STARTUPINFOW.members=struct('cb', 'ulong', 'lpReserved', 'uint16Ptr', 'lpDesktop', 'uint16Ptr', 'lpTitle', 'uint16Ptr', 'dwX', 'ulong', 'dwY', 'ulong', 'dwXSize', 'ulong', 'dwYSize', 'ulong', 'dwXCountChars', 'ulong', 'dwYCountChars', 'ulong', 'dwFillAttribute', 'ulong', 'dwFlags', 'ulong', 'wShowWindow', 'uint16', 'cbReserved2', 'uint16', 'lpReserved2', 'uint8Ptr', 'hStdInput', 'voidPtr', 'hStdOutput', 'voidPtr', 'hStdError', 'voidPtr');
structs.s_WIN32_FIND_DATAA.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong', 'dwReserved0', 'ulong', 'dwReserved1', 'ulong', 'cFileName', 'int8#260', 'cAlternateFileName', 'int8#14');
structs.s_WIN32_FIND_DATAW.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong', 'dwReserved0', 'ulong', 'dwReserved1', 'ulong', 'cFileName', 'uint16#260', 'cAlternateFileName', 'uint16#14');
structs.s_WIN32_FILE_ATTRIBUTE_DATA.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong');
structs.s_WIN32_FIND_STREAM_DATA.members=struct('StreamSize', 'error', 'cStreamName', 'uint16#296');
structs.s_EVENTLOG_FULL_INFORMATION.members=struct('dwFull', 'ulong');
structs.tagHW_PROFILE_INFOA.members=struct('dwDockInfo', 'ulong', 'szHwProfileGuid', 'int8#39', 'szHwProfileName', 'int8#80');
structs.tagHW_PROFILE_INFOW.members=struct('dwDockInfo', 'ulong', 'szHwProfileGuid', 'uint16#39', 'szHwProfileName', 'uint16#80');
structs.s_SYSTEM_POWER_STATUS.members=struct('ACLineStatus', 'uint8', 'BatteryFlag', 'uint8', 'BatteryLifePercent', 'uint8', 'Reserved1', 'uint8', 'BatteryLifeTime', 'ulong', 'BatteryFullLifeTime', 'ulong');
structs.tagACTCTXA.members=struct('cbSize', 'ulong', 'dwFlags', 'ulong', 'lpSource', 'int8Ptr', 'wProcessorArchitecture', 'uint16', 'wLangId', 'uint16', 'lpAssemblyDirectory', 'int8Ptr', 'lpResourceName', 'int8Ptr', 'lpApplicationName', 'int8Ptr', 'hModule', 'HINSTANCE__Ptr');
structs.tagACTCTXW.members=struct('cbSize', 'ulong', 'dwFlags', 'ulong', 'lpSource', 'uint16Ptr', 'wProcessorArchitecture', 'uint16', 'wLangId', 'uint16', 'lpAssemblyDirectory', 'uint16Ptr', 'lpResourceName', 'uint16Ptr', 'lpApplicationName', 'uint16Ptr', 'hModule', 'HINSTANCE__Ptr');
structs.tagACTCTX_SECTION_KEYED_DATA_2600.members=struct('cbSize', 'ulong', 'ulDataFormatVersion', 'ulong', 'lpData', 'voidPtr', 'ulLength', 'ulong', 'lpSectionGlobalData', 'voidPtr', 'ulSectionGlobalDataLength', 'ulong', 'lpSectionBase', 'voidPtr', 'ulSectionTotalLength', 'ulong', 'hActCtx', 'voidPtr', 'ulAssemblyRosterIndex', 'ulong');
structs.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA.members=struct('lpInformation', 'voidPtr', 'lpSectionBase', 'voidPtr', 'ulSectionLength', 'ulong', 'lpSectionGlobalDataBase', 'voidPtr', 'ulSectionGlobalDataLength', 'ulong');
structs.tagACTCTX_SECTION_KEYED_DATA.members=struct('cbSize', 'ulong', 'ulDataFormatVersion', 'ulong', 'lpData', 'voidPtr', 'ulLength', 'ulong', 'lpSectionGlobalData', 'voidPtr', 'ulSectionGlobalDataLength', 'ulong', 'lpSectionBase', 'voidPtr', 'ulSectionTotalLength', 'ulong', 'hActCtx', 'voidPtr', 'ulAssemblyRosterIndex', 'ulong', 'ulFlags', 'ulong', 'AssemblyMetadata', 'tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA');
structs.s_ACTIVATION_CONTEXT_BASIC_INFORMATION.members=struct('hActCtx', 'voidPtr', 'dwFlags', 'ulong');
enuminfo.e_FINDEX_SEARCH_OPS=struct('FindExSearchNameMatch',0,'FindExSearchLimitToDirectories',1,'FindExSearchLimitToDevices',2,'FindExSearchMaxSearchOp',3);
enuminfo.e_FINDEX_INFO_LEVELS=struct('FindExInfoStandard',0,'FindExInfoMaxInfoLevel',1);
enuminfo.e_GET_FILEEX_INFO_LEVELS=struct('GetFileExInfoStandard',0,'GetFileExMaxInfoLevel',1);
enuminfo.e_MEMORY_RESOURCE_NOTIFICATION_TYPE=struct('LowMemoryResourceNotification',0,'HighMemoryResourceNotification',1);
enuminfo.e_COMPUTER_NAME_FORMAT=struct('ComputerNameNetBIOS',0,'ComputerNameDnsHostname',1,'ComputerNameDnsDomain',2,'ComputerNameDnsFullyQualified',3,'ComputerNamePhysicalNetBIOS',4,'ComputerNamePhysicalDnsHostname',5,'ComputerNamePhysicalDnsDomain',6,'ComputerNamePhysicalDnsFullyQualified',7,'ComputerNameMax',8);
enuminfo.e_STREAM_INFO_LEVELS=struct('FindStreamInfoStandard',0,'FindStreamInfoMaxInfoLevel',1);
methodinfo=fcns;