function [methodinfo,structs,enuminfo,ThunkLibName]=win_kernel32
%WIN_KERNEL32_64 Create structures to define interfaces found in 'windows'.

%This function was generated by loadlibrary.m parser version  on Tue Dec 20 15:33:57 2016
%perl options:'windows.i -outfile=win_kernel32_64.m -thunkfile=kernel32_thunk_pcwin64.c -header=windows.h winbase winuser'
ival={cell(1,16)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'kernel32_thunk_pcwin64');
% % BOOL  GlobalMemoryStatusEx ( LPMEMORYSTATUSEX lpBuffer ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GlobalMemoryStatusEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_MEMORYSTATUSEXPtr'};fcnNum=fcnNum+1;
% % HLOCAL  LocalAlloc ( UINT uFlags , SIZE_T uBytes ); 
% fcns.thunkname{fcnNum}='voidPtruint32uint64Thunk';fcns.name{fcnNum}='LocalAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32', 'uint64'};fcnNum=fcnNum+1;
% % HLOCAL  LocalReAlloc ( HLOCAL hMem , SIZE_T uBytes , UINT uFlags ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtruint64uint32Thunk';fcns.name{fcnNum}='LocalReAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'uint32'};fcnNum=fcnNum+1;
% % LPVOID  LocalLock ( HLOCAL hMem ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalLock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % HLOCAL  LocalHandle ( LPCVOID pMem ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  LocalUnlock ( HLOCAL hMem ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='LocalUnlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % SIZE_T  LocalSize ( HLOCAL hMem ); 
% fcns.thunkname{fcnNum}='uint64voidPtrThunk';fcns.name{fcnNum}='LocalSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % UINT  LocalFlags ( HLOCAL hMem ); 
% fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='LocalFlags'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % HLOCAL  LocalFree ( HLOCAL hMem ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % SIZE_T  LocalShrink ( HLOCAL hMem , UINT cbNewSize ); 
% fcns.thunkname{fcnNum}='uint64voidPtruint32Thunk';fcns.name{fcnNum}='LocalShrink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% % SIZE_T  LocalCompact ( UINT uMinFree ); 
% fcns.thunkname{fcnNum}='uint64uint32Thunk';fcns.name{fcnNum}='LocalCompact'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% % BOOL  FlushInstructionCache ( HANDLE hProcess , LPCVOID lpBaseAddress , SIZE_T dwSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='FlushInstructionCache'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% % LPVOID  VirtualAlloc ( LPVOID lpAddress , SIZE_T dwSize , DWORD flAllocationType , DWORD flProtect ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtruint64ulongulongThunk';fcns.name{fcnNum}='VirtualAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  VirtualFree ( LPVOID lpAddress , SIZE_T dwSize , DWORD dwFreeType ); 
% fcns.thunkname{fcnNum}='int32voidPtruint64ulongThunk';fcns.name{fcnNum}='VirtualFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  VirtualProtect ( LPVOID lpAddress , SIZE_T dwSize , DWORD flNewProtect , PDWORD lpflOldProtect ); 
% fcns.thunkname{fcnNum}='int32voidPtruint64ulongvoidPtrThunk';fcns.name{fcnNum}='VirtualProtect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% % LPVOID  VirtualAllocEx ( HANDLE hProcess , LPVOID lpAddress , SIZE_T dwSize , DWORD flAllocationType , DWORD flProtect ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtruint64ulongulongThunk';fcns.name{fcnNum}='VirtualAllocEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint64', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% % UINT  GetWriteWatch ( DWORD dwFlags , PVOID lpBaseAddress , SIZE_T dwRegionSize , PVOID * lpAddresses , ULONG_PTR * lpdwCount , PULONG lpdwGranularity ); 
% fcns.thunkname{fcnNum}='uint32ulongvoidPtruint64voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetWriteWatch'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'voidPtr', 'uint64', 'voidPtrPtr', 'uint64Ptr', 'ulongPtr'};fcnNum=fcnNum+1;
% % UINT  ResetWriteWatch ( LPVOID lpBaseAddress , SIZE_T dwRegionSize ); 
% fcns.thunkname{fcnNum}='uint32voidPtruint64Thunk';fcns.name{fcnNum}='ResetWriteWatch'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% % SIZE_T  GetLargePageMinimum ( void ); 
% fcns.thunkname{fcnNum}='uint64voidThunk';fcns.name{fcnNum}='GetLargePageMinimum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % UINT  EnumSystemFirmwareTables ( DWORD FirmwareTableProviderSignature , PVOID pFirmwareTableEnumBuffer , DWORD BufferSize ); 
% fcns.thunkname{fcnNum}='uint32ulongvoidPtrulongThunk';fcns.name{fcnNum}='EnumSystemFirmwareTables'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % UINT  GetSystemFirmwareTable ( DWORD FirmwareTableProviderSignature , DWORD FirmwareTableID , PVOID pFirmwareTableBuffer , DWORD BufferSize ); 
% fcns.thunkname{fcnNum}='uint32ulongulongvoidPtrulongThunk';fcns.name{fcnNum}='GetSystemFirmwareTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  VirtualFreeEx ( HANDLE hProcess , LPVOID lpAddress , SIZE_T dwSize , DWORD dwFreeType ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64ulongThunk';fcns.name{fcnNum}='VirtualFreeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint64', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  VirtualProtectEx ( HANDLE hProcess , LPVOID lpAddress , SIZE_T dwSize , DWORD flNewProtect , PDWORD lpflOldProtect ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64ulongvoidPtrThunk';fcns.name{fcnNum}='VirtualProtectEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint64', 'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% % HANDLE  HeapCreate ( DWORD flOptions , SIZE_T dwInitialSize , SIZE_T dwMaximumSize ); 
% fcns.thunkname{fcnNum}='voidPtrulonguint64uint64Thunk';fcns.name{fcnNum}='HeapCreate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'uint64', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  HeapDestroy ( HANDLE hHeap ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='HeapDestroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % LPVOID  HeapAlloc ( HANDLE hHeap , DWORD dwFlags , SIZE_T dwBytes ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrulonguint64Thunk';fcns.name{fcnNum}='HeapAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint64'};fcnNum=fcnNum+1;
% % LPVOID  HeapReAlloc ( HANDLE hHeap , DWORD dwFlags , LPVOID lpMem , SIZE_T dwBytes ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrulongvoidPtruint64Thunk';fcns.name{fcnNum}='HeapReAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  HeapFree ( HANDLE hHeap , DWORD dwFlags , LPVOID lpMem ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='HeapFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% % SIZE_T  HeapSize ( HANDLE hHeap , DWORD dwFlags , LPCVOID lpMem ); 
% fcns.thunkname{fcnNum}='uint64voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='HeapSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  HeapValidate ( HANDLE hHeap , DWORD dwFlags , LPCVOID lpMem ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='HeapValidate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% % SIZE_T  HeapCompact ( HANDLE hHeap , DWORD dwFlags ); 
% fcns.thunkname{fcnNum}='uint64voidPtrulongThunk';fcns.name{fcnNum}='HeapCompact'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % HANDLE  GetProcessHeap ( void ); 
% fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetProcessHeap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % DWORD  GetProcessHeaps ( DWORD NumberOfHeaps , PHANDLE ProcessHeaps ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetProcessHeaps'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtrPtr'};fcnNum=fcnNum+1;
% % BOOL  GetBinaryTypeA ( LPCSTR lpApplicationName , LPDWORD lpBinaryType ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetBinaryTypeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetBinaryTypeW ( LPCWSTR lpApplicationName , LPDWORD lpBinaryType ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetBinaryTypeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetShortPathNameA ( LPCSTR lpszLongPath , LPSTR lpszShortPath , DWORD cchBuffer ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetShortPathNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetShortPathNameW ( LPCWSTR lpszLongPath , LPWSTR lpszShortPath , DWORD cchBuffer ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetShortPathNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetLongPathNameA ( LPCSTR lpszShortPath , LPSTR lpszLongPath , DWORD cchBuffer ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetLongPathNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetLongPathNameW ( LPCWSTR lpszShortPath , LPWSTR lpszLongPath , DWORD cchBuffer ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetLongPathNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  GetProcessAffinityMask ( HANDLE hProcess , PDWORD_PTR lpProcessAffinityMask , PDWORD_PTR lpSystemAffinityMask ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessAffinityMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetProcessAffinityMask ( HANDLE hProcess , DWORD_PTR dwProcessAffinityMask ); 
% fcns.thunkname{fcnNum}='int32voidPtruint64Thunk';fcns.name{fcnNum}='SetProcessAffinityMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  GetProcessTimes ( HANDLE hProcess , LPFILETIME lpCreationTime , LPFILETIME lpExitTime , LPFILETIME lpKernelTime , LPFILETIME lpUserTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  GetProcessIoCounters ( HANDLE hProcess , PIO_COUNTERS lpIoCounters ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessIoCounters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_IO_COUNTERSPtr'};fcnNum=fcnNum+1;
% % BOOL  GetProcessWorkingSetSize ( HANDLE hProcess , PSIZE_T lpMinimumWorkingSetSize , PSIZE_T lpMaximumWorkingSetSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessWorkingSetSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetProcessWorkingSetSizeEx ( HANDLE hProcess , PSIZE_T lpMinimumWorkingSetSize , PSIZE_T lpMaximumWorkingSetSize , PDWORD Flags ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessWorkingSetSizeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64Ptr', 'uint64Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetProcessWorkingSetSize ( HANDLE hProcess , SIZE_T dwMinimumWorkingSetSize , SIZE_T dwMaximumWorkingSetSize ); 
% fcns.thunkname{fcnNum}='int32voidPtruint64uint64Thunk';fcns.name{fcnNum}='SetProcessWorkingSetSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  SetProcessWorkingSetSizeEx ( HANDLE hProcess , SIZE_T dwMinimumWorkingSetSize , SIZE_T dwMaximumWorkingSetSize , DWORD Flags ); 
% fcns.thunkname{fcnNum}='int32voidPtruint64uint64ulongThunk';fcns.name{fcnNum}='SetProcessWorkingSetSizeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64', 'uint64', 'ulong'};fcnNum=fcnNum+1;
% % HANDLE  OpenProcess ( DWORD dwDesiredAccess , BOOL bInheritHandle , DWORD dwProcessId ); 
% fcns.thunkname{fcnNum}='voidPtrulongint32ulongThunk';fcns.name{fcnNum}='OpenProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% % HANDLE  GetCurrentProcess ( void ); 
% fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetCurrentProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % DWORD  GetCurrentProcessId ( void ); 
% fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetCurrentProcessId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % BOOL  TerminateProcess ( HANDLE hProcess , UINT uExitCode ); 
% fcns.thunkname{fcnNum}='int32voidPtruint32Thunk';fcns.name{fcnNum}='TerminateProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% % BOOL  GetExitCodeProcess ( HANDLE hProcess , LPDWORD lpExitCode ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetExitCodeProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % void  FatalExit ( int ExitCode ); 
% fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='FatalExit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% % LPCH  GetEnvironmentStrings ( void ); 
% fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetEnvironmentStrings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % LPWCH  GetEnvironmentStringsW ( void ); 
% fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetEnvironmentStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % BOOL  SetEnvironmentStringsA ( LPCH NewEnvironment ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetEnvironmentStringsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetEnvironmentStringsW ( LPWCH NewEnvironment ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetEnvironmentStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  FreeEnvironmentStringsA ( LPCH ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeEnvironmentStringsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  FreeEnvironmentStringsW ( LPWCH ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FreeEnvironmentStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % void  RaiseException ( DWORD dwExceptionCode , DWORD dwExceptionFlags , DWORD nNumberOfArguments , const ULONG_PTR * lpArguments ); 
% fcns.thunkname{fcnNum}='voidulongulongulongvoidPtrThunk';fcns.name{fcnNum}='RaiseException'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% % LONG  UnhandledExceptionFilter ( struct _EXCEPTION_POINTERS * ExceptionInfo ); 
% fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='UnhandledExceptionFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'s_EXCEPTION_POINTERSPtr'};fcnNum=fcnNum+1;
% % DWORD  GetProcessId ( HANDLE Process ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetProcessId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % DWORD  GetCurrentProcessorNumber ( void ); 
% fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetCurrentProcessorNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % DWORD_PTR  SetThreadAffinityMask ( HANDLE hThread , DWORD_PTR dwThreadAffinityMask ); 
% fcns.thunkname{fcnNum}='uint64voidPtruint64Thunk';fcns.name{fcnNum}='SetThreadAffinityMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  SetProcessPriorityBoost ( HANDLE hProcess , BOOL bDisablePriorityBoost ); 
% fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetProcessPriorityBoost'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% % BOOL  GetProcessPriorityBoost ( HANDLE hProcess , PBOOL pDisablePriorityBoost ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessPriorityBoost'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% % BOOL  RequestWakeupLatency ( LATENCY_TIME latency ); 
% fcns.thunkname{fcnNum}='int32LATENCY_TIMEThunk';fcns.name{fcnNum}='RequestWakeupLatency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'LATENCY_TIME'};fcnNum=fcnNum+1;
% % BOOL  IsSystemResumeAutomatic ( void ); 
% fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='IsSystemResumeAutomatic'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % HANDLE  OpenThread ( DWORD dwDesiredAccess , BOOL bInheritHandle , DWORD dwThreadId ); 
% fcns.thunkname{fcnNum}='voidPtrulongint32ulongThunk';fcns.name{fcnNum}='OpenThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetThreadPriority ( HANDLE hThread , int nPriority ); 
% fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetThreadPriority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% % BOOL  SetThreadPriorityBoost ( HANDLE hThread , BOOL bDisablePriorityBoost ); 
% fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='SetThreadPriorityBoost'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% % BOOL  GetThreadPriorityBoost ( HANDLE hThread , PBOOL pDisablePriorityBoost ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetThreadPriorityBoost'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% % int  GetThreadPriority ( HANDLE hThread ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetThreadPriority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  GetThreadTimes ( HANDLE hThread , LPFILETIME lpCreationTime , LPFILETIME lpExitTime , LPFILETIME lpKernelTime , LPFILETIME lpUserTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetThreadTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  TerminateThread ( HANDLE hThread , DWORD dwExitCode ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='TerminateThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  GetExitCodeThread ( HANDLE hThread , LPDWORD lpExitCode ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetExitCodeThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % EXECUTION_STATE  SetThreadExecutionState ( EXECUTION_STATE esFlags ); 
% fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='SetThreadExecutionState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% DWORD  GetLastError ( void ); 
fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetLastError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % void  SetLastError ( DWORD dwErrCode ); 
% fcns.thunkname{fcnNum}='voidulongThunk';fcns.name{fcnNum}='SetLastError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % BOOL  GetOverlappedResult ( HANDLE hFile , LPOVERLAPPED lpOverlapped , LPDWORD lpNumberOfBytesTransferred , BOOL bWait ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetOverlappedResult'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_OVERLAPPEDPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% % HANDLE  CreateIoCompletionPort ( HANDLE FileHandle , HANDLE ExistingCompletionPort , ULONG_PTR CompletionKey , DWORD NumberOfConcurrentThreads ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtruint64ulongThunk';fcns.name{fcnNum}='CreateIoCompletionPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint64', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  GetQueuedCompletionStatus ( HANDLE CompletionPort , LPDWORD lpNumberOfBytesTransferred , PULONG_PTR lpCompletionKey , LPOVERLAPPED * lpOverlapped , DWORD dwMilliseconds ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetQueuedCompletionStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint64Ptr', 's_OVERLAPPEDPtrPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  PostQueuedCompletionStatus ( HANDLE CompletionPort , DWORD dwNumberOfBytesTransferred , ULONG_PTR dwCompletionKey , LPOVERLAPPED lpOverlapped ); 
% fcns.thunkname{fcnNum}='int32voidPtrulonguint64voidPtrThunk';fcns.name{fcnNum}='PostQueuedCompletionStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint64', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% % UINT  SetErrorMode ( UINT uMode ); 
% fcns.thunkname{fcnNum}='uint32uint32Thunk';fcns.name{fcnNum}='SetErrorMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% % BOOL  ReadProcessMemory ( HANDLE hProcess , LPCVOID lpBaseAddress , LPVOID lpBuffer , SIZE_T nSize , SIZE_T * lpNumberOfBytesRead ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint64voidPtrThunk';fcns.name{fcnNum}='ReadProcessMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% % BOOL  WriteProcessMemory ( HANDLE hProcess , LPVOID lpBaseAddress , LPCVOID lpBuffer , SIZE_T nSize , SIZE_T * lpNumberOfBytesWritten ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint64voidPtrThunk';fcns.name{fcnNum}='WriteProcessMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% % DWORD  SuspendThread ( HANDLE hThread ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='SuspendThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % DWORD  ResumeThread ( HANDLE hThread ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='ResumeThread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % void  DebugBreak ( void ); 
% fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='DebugBreak'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % BOOL  ContinueDebugEvent ( DWORD dwProcessId , DWORD dwThreadId , DWORD dwContinueStatus ); 
% fcns.thunkname{fcnNum}='int32ulongulongulongThunk';fcns.name{fcnNum}='ContinueDebugEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  DebugActiveProcess ( DWORD dwProcessId ); 
% fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='DebugActiveProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % BOOL  DebugActiveProcessStop ( DWORD dwProcessId ); 
% fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='DebugActiveProcessStop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % BOOL  DebugSetProcessKillOnExit ( BOOL KillOnExit ); 
% fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='DebugSetProcessKillOnExit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% % BOOL  DebugBreakProcess ( HANDLE Process ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DebugBreakProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL  SetEvent ( HANDLE hEvent ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL  ResetEvent ( HANDLE hEvent ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ResetEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  PulseEvent ( HANDLE hEvent ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='PulseEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  ReleaseSemaphore ( HANDLE hSemaphore , LONG lReleaseCount , LPLONG lpPreviousCount ); 
% fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ReleaseSemaphore'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% % BOOL  ReleaseMutex ( HANDLE hMutex ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ReleaseMutex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% DWORD  WaitForSingleObject ( HANDLE hHandle , DWORD dwMilliseconds ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongThunk';fcns.name{fcnNum}='WaitForSingleObject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  WaitForMultipleObjects ( DWORD nCount , const HANDLE * lpHandles , BOOL bWaitAll , DWORD dwMilliseconds ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrint32ulongThunk';fcns.name{fcnNum}='WaitForMultipleObjects'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtrPtr', 'int32', 'ulong'};fcnNum=fcnNum+1;
% % void  Sleep ( DWORD dwMilliseconds ); 
% fcns.thunkname{fcnNum}='voidulongThunk';fcns.name{fcnNum}='Sleep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % ATOM  GlobalDeleteAtom ( ATOM nAtom ); 
% fcns.thunkname{fcnNum}='uint16uint16Thunk';fcns.name{fcnNum}='GlobalDeleteAtom'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% % BOOL  InitAtomTable ( DWORD nSize ); 
% fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='InitAtomTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % ATOM  DeleteAtom ( ATOM nAtom ); 
% fcns.thunkname{fcnNum}='uint16uint16Thunk';fcns.name{fcnNum}='DeleteAtom'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% % UINT  SetHandleCount ( UINT uNumber ); 
% fcns.thunkname{fcnNum}='uint32uint32Thunk';fcns.name{fcnNum}='SetHandleCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% % DWORD  GetLogicalDrives ( void ); 
% fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetLogicalDrives'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % BOOL  LockFile ( HANDLE hFile , DWORD dwFileOffsetLow , DWORD dwFileOffsetHigh , DWORD nNumberOfBytesToLockLow , DWORD nNumberOfBytesToLockHigh ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongulongulongulongThunk';fcns.name{fcnNum}='LockFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  UnlockFile ( HANDLE hFile , DWORD dwFileOffsetLow , DWORD dwFileOffsetHigh , DWORD nNumberOfBytesToUnlockLow , DWORD nNumberOfBytesToUnlockHigh ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongulongulongulongThunk';fcns.name{fcnNum}='UnlockFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  LockFileEx ( HANDLE hFile , DWORD dwFlags , DWORD dwReserved , DWORD nNumberOfBytesToLockLow , DWORD nNumberOfBytesToLockHigh , LPOVERLAPPED lpOverlapped ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='LockFileEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% % BOOL  UnlockFileEx ( HANDLE hFile , DWORD dwReserved , DWORD nNumberOfBytesToUnlockLow , DWORD nNumberOfBytesToUnlockHigh , LPOVERLAPPED lpOverlapped ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='UnlockFileEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% % BOOL  GetFileInformationByHandle ( HANDLE hFile , LPBY_HANDLE_FILE_INFORMATION lpFileInformation ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFileInformationByHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_BY_HANDLE_FILE_INFORMATIONPtr'};fcnNum=fcnNum+1;
% % DWORD  GetFileType ( HANDLE hFile ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetFileType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % DWORD  GetFileSize ( HANDLE hFile , LPDWORD lpFileSizeHigh ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFileSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetFileSizeEx ( HANDLE hFile , PLARGE_INTEGER lpFileSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFileSizeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_LARGE_INTEGERPtr'};fcnNum=fcnNum+1;
% % HANDLE  GetStdHandle ( DWORD nStdHandle ); 
% fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='GetStdHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetStdHandle ( DWORD nStdHandle , HANDLE hHandle ); 
% fcns.thunkname{fcnNum}='int32ulongvoidPtrThunk';fcns.name{fcnNum}='SetStdHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL  WriteFile ( HANDLE hFile , LPCVOID lpBuffer , DWORD nNumberOfBytesToWrite , LPDWORD lpNumberOfBytesWritten , LPOVERLAPPED lpOverlapped ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL  ReadFile ( HANDLE hFile , LPVOID lpBuffer , DWORD nNumberOfBytesToRead , LPDWORD lpNumberOfBytesRead , LPOVERLAPPED lpOverlapped ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ReadFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL  FlushFileBuffers ( HANDLE hFile ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FlushFileBuffers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  DeviceIoControl ( HANDLE hDevice , DWORD dwIoControlCode , LPVOID lpInBuffer , DWORD nInBufferSize , LPVOID lpOutBuffer , DWORD nOutBufferSize , LPDWORD lpBytesReturned , LPOVERLAPPED lpOverlapped ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DeviceIoControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% % BOOL  RequestDeviceWakeup ( HANDLE hDevice ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='RequestDeviceWakeup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  CancelDeviceWakeupRequest ( HANDLE hDevice ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CancelDeviceWakeupRequest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  GetDevicePowerState ( HANDLE hDevice , BOOL * pfOn ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDevicePowerState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetMessageWaitingIndicator ( HANDLE hMsgIndicator , ULONG ulMsgCount ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetMessageWaitingIndicator'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetEndOfFile ( HANDLE hFile ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetEndOfFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % DWORD  SetFilePointer ( HANDLE hFile , LONG lDistanceToMove , PLONG lpDistanceToMoveHigh , DWORD dwMoveMethod ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrlongvoidPtrulongThunk';fcns.name{fcnNum}='SetFilePointer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetFilePointerEx ( HANDLE hFile , LARGE_INTEGER liDistanceToMove , PLARGE_INTEGER lpNewFilePointer , DWORD dwMoveMethod ); 
% fcns.thunkname{fcnNum}='int32voidPtrLARGE_INTEGERvoidPtrulongThunk';fcns.name{fcnNum}='SetFilePointerEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_LARGE_INTEGER', 's_LARGE_INTEGERPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  FindClose ( HANDLE hFindFile ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='FindClose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  GetFileTime ( HANDLE hFile , LPFILETIME lpCreationTime , LPFILETIME lpLastAccessTime , LPFILETIME lpLastWriteTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  SetFileTime ( HANDLE hFile , const FILETIME * lpCreationTime , const FILETIME * lpLastAccessTime , const FILETIME * lpLastWriteTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_FILETIMEPtr', 's_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  SetFileValidData ( HANDLE hFile , LONGLONG ValidDataLength ); 
% fcns.thunkname{fcnNum}='int32voidPtrint64Thunk';fcns.name{fcnNum}='SetFileValidData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int64'};fcnNum=fcnNum+1;
% % BOOL  SetFileShortNameA ( HANDLE hFile , LPCSTR lpShortName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetFileShortNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetFileShortNameW ( HANDLE hFile , LPCWSTR lpShortName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetFileShortNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL  CloseHandle ( HANDLE hObject ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CloseHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  DuplicateHandle ( HANDLE hSourceProcessHandle , HANDLE hSourceHandle , HANDLE hTargetProcessHandle , LPHANDLE lpTargetHandle , DWORD dwDesiredAccess , BOOL bInheritHandle , DWORD dwOptions ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrulongint32ulongThunk';fcns.name{fcnNum}='DuplicateHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'voidPtrPtr', 'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  GetHandleInformation ( HANDLE hObject , LPDWORD lpdwFlags ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetHandleInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetHandleInformation ( HANDLE hObject , DWORD dwMask , DWORD dwFlags ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongulongThunk';fcns.name{fcnNum}='SetHandleInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  LoadModule ( LPCSTR lpModuleName , LPVOID lpParameterBlock ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadModule'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% % UINT  WinExec ( LPCSTR lpCmdLine , UINT uCmdShow ); 
% fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='WinExec'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr', 'uint32'};fcnNum=fcnNum+1;
% % DWORD  SetTapePosition ( HANDLE hDevice , DWORD dwPositionMethod , DWORD dwPartition , DWORD dwOffsetLow , DWORD dwOffsetHigh , BOOL bImmediate ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongulongulongulongint32Thunk';fcns.name{fcnNum}='SetTapePosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong', 'int32'};fcnNum=fcnNum+1;
% % DWORD  GetTapePosition ( HANDLE hDevice , DWORD dwPositionType , LPDWORD lpdwPartition , LPDWORD lpdwOffsetLow , LPDWORD lpdwOffsetHigh ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTapePosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % DWORD  PrepareTape ( HANDLE hDevice , DWORD dwOperation , BOOL bImmediate ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongint32Thunk';fcns.name{fcnNum}='PrepareTape'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% % DWORD  EraseTape ( HANDLE hDevice , DWORD dwEraseType , BOOL bImmediate ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongint32Thunk';fcns.name{fcnNum}='EraseTape'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% % DWORD  CreateTapePartition ( HANDLE hDevice , DWORD dwPartitionMethod , DWORD dwCount , DWORD dwSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongulongulongThunk';fcns.name{fcnNum}='CreateTapePartition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  WriteTapemark ( HANDLE hDevice , DWORD dwTapemarkType , DWORD dwTapemarkCount , BOOL bImmediate ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongulongint32Thunk';fcns.name{fcnNum}='WriteTapemark'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'int32'};fcnNum=fcnNum+1;
% % DWORD  GetTapeStatus ( HANDLE hDevice ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetTapeStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % DWORD  GetTapeParameters ( HANDLE hDevice , DWORD dwOperation , LPDWORD lpdwSize , LPVOID lpTapeInformation ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTapeParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% % DWORD  SetTapeParameters ( HANDLE hDevice , DWORD dwOperation , LPVOID lpTapeInformation ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='SetTapeParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  Beep ( DWORD dwFreq , DWORD dwDuration ); 
% fcns.thunkname{fcnNum}='int32ulongulongThunk';fcns.name{fcnNum}='Beep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% % int  MulDiv ( int nNumber , int nNumerator , int nDenominator ); 
% fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='MulDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% % void  GetSystemTime ( LPSYSTEMTIME lpSystemTime ); 
% fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetSystemTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% % void  GetSystemTimeAsFileTime ( LPFILETIME lpSystemTimeAsFileTime ); 
% fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetSystemTimeAsFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  SetSystemTime ( const SYSTEMTIME * lpSystemTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetSystemTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% % void  GetLocalTime ( LPSYSTEMTIME lpSystemTime ); 
% fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetLocalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  SetLocalTime ( const SYSTEMTIME * lpSystemTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetLocalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  IsProcessorFeaturePresent ( DWORD ProcessorFeature ); 
% fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='IsProcessorFeaturePresent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % BOOL  SystemTimeToTzSpecificLocalTime ( LPTIME_ZONE_INFORMATION lpTimeZoneInformation , LPSYSTEMTIME lpUniversalTime , LPSYSTEMTIME lpLocalTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SystemTimeToTzSpecificLocalTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_TIME_ZONE_INFORMATIONPtr', 's_SYSTEMTIMEPtr', 's_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  TzSpecificLocalTimeToSystemTime ( LPTIME_ZONE_INFORMATION lpTimeZoneInformation , LPSYSTEMTIME lpLocalTime , LPSYSTEMTIME lpUniversalTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='TzSpecificLocalTimeToSystemTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_TIME_ZONE_INFORMATIONPtr', 's_SYSTEMTIMEPtr', 's_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% % DWORD  GetTimeZoneInformation ( LPTIME_ZONE_INFORMATION lpTimeZoneInformation ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetTimeZoneInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'s_TIME_ZONE_INFORMATIONPtr'};fcnNum=fcnNum+1;
% % BOOL  SetTimeZoneInformation ( const TIME_ZONE_INFORMATION * lpTimeZoneInformation ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetTimeZoneInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_TIME_ZONE_INFORMATIONPtr'};fcnNum=fcnNum+1;
% % BOOL  SystemTimeToFileTime ( const SYSTEMTIME * lpSystemTime , LPFILETIME lpFileTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SystemTimeToFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  FileTimeToLocalFileTime ( const FILETIME * lpFileTime , LPFILETIME lpLocalFileTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FileTimeToLocalFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  LocalFileTimeToFileTime ( const FILETIME * lpLocalFileTime , LPFILETIME lpFileTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='LocalFileTimeToFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  FileTimeToSystemTime ( const FILETIME * lpFileTime , LPSYSTEMTIME lpSystemTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FileTimeToSystemTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_SYSTEMTIMEPtr'};fcnNum=fcnNum+1;
% % LONG  CompareFileTime ( const FILETIME * lpFileTime1 , const FILETIME * lpFileTime2 ); 
% fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CompareFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % BOOL  FileTimeToDosDateTime ( const FILETIME * lpFileTime , LPWORD lpFatDate , LPWORD lpFatTime ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FileTimeToDosDateTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_FILETIMEPtr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  DosDateTimeToFileTime ( WORD wFatDate , WORD wFatTime , LPFILETIME lpFileTime ); 
% fcns.thunkname{fcnNum}='int32uint16uint16voidPtrThunk';fcns.name{fcnNum}='DosDateTimeToFileTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16', 'uint16', 's_FILETIMEPtr'};fcnNum=fcnNum+1;
% % DWORD  GetTickCount ( void ); 
% fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='GetTickCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % BOOL  SetSystemTimeAdjustment ( DWORD dwTimeAdjustment , BOOL bTimeAdjustmentDisabled ); 
% fcns.thunkname{fcnNum}='int32ulongint32Thunk';fcns.name{fcnNum}='SetSystemTimeAdjustment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
% % BOOL  GetSystemTimeAdjustment ( PDWORD lpTimeAdjustment , PDWORD lpTimeIncrement , PBOOL lpTimeAdjustmentDisabled ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSystemTimeAdjustment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% DWORD  FormatMessageA ( DWORD dwFlags , LPCVOID lpSource , DWORD dwMessageId , DWORD dwLanguageId , LPSTR lpBuffer , DWORD nSize , va_list * Arguments ); 
fcns.name{fcnNum}='FormatMessageA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtr', 'ulong', 'ulong', 'int8Ptr', 'ulong', 's_va_listPtrPtr'};fcnNum=fcnNum+1;
% BOOL  CreatePipe ( PHANDLE hReadPipe , PHANDLE hWritePipe , LPSECURITY_ATTRIBUTES lpPipeAttributes , DWORD nSize ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='CreatePipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'voidPtrPtr', 's_SECURITY_ATTRIBUTESPtr', 'ulong'};fcnNum=fcnNum+1;
% BOOL  ConnectNamedPipe ( HANDLE hNamedPipe , LPOVERLAPPED lpOverlapped ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ConnectNamedPipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% BOOL  DisconnectNamedPipe ( HANDLE hNamedPipe ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DisconnectNamedPipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% BOOL  SetNamedPipeHandleState ( HANDLE hNamedPipe , LPDWORD lpMode , LPDWORD lpMaxCollectionCount , LPDWORD lpCollectDataTimeout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SetNamedPipeHandleState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  GetNamedPipeInfo ( HANDLE hNamedPipe , LPDWORD lpFlags , LPDWORD lpOutBufferSize , LPDWORD lpInBufferSize , LPDWORD lpMaxInstances ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetNamedPipeInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% BOOL  PeekNamedPipe ( HANDLE hNamedPipe , LPVOID lpBuffer , DWORD nBufferSize , LPDWORD lpBytesRead , LPDWORD lpTotalBytesAvail , LPDWORD lpBytesLeftThisMessage ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PeekNamedPipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  TransactNamedPipe ( HANDLE hNamedPipe , LPVOID lpInBuffer , DWORD nInBufferSize , LPVOID lpOutBuffer , DWORD nOutBufferSize , LPDWORD lpBytesRead , LPOVERLAPPED lpOverlapped ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='TransactNamedPipe'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 's_OVERLAPPEDPtr'};fcnNum=fcnNum+1;
% % HANDLE  CreateMailslotA ( LPCSTR lpName , DWORD nMaxMessageSize , DWORD lReadTimeout , LPSECURITY_ATTRIBUTES lpSecurityAttributes ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateMailslotA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int8Ptr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% % HANDLE  CreateMailslotW ( LPCWSTR lpName , DWORD nMaxMessageSize , DWORD lReadTimeout , LPSECURITY_ATTRIBUTES lpSecurityAttributes ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateMailslotW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% % BOOL  GetMailslotInfo ( HANDLE hMailslot , LPDWORD lpMaxMessageSize , LPDWORD lpNextSize , LPDWORD lpMessageCount , LPDWORD lpReadTimeout ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMailslotInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetMailslotInfo ( HANDLE hMailslot , DWORD lReadTimeout ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetMailslotInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % LPVOID  MapViewOfFile ( HANDLE hFileMappingObject , DWORD dwDesiredAccess , DWORD dwFileOffsetHigh , DWORD dwFileOffsetLow , SIZE_T dwNumberOfBytesToMap ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongulonguint64Thunk';fcns.name{fcnNum}='MapViewOfFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  FlushViewOfFile ( LPCVOID lpBaseAddress , SIZE_T dwNumberOfBytesToFlush ); 
% fcns.thunkname{fcnNum}='int32voidPtruint64Thunk';fcns.name{fcnNum}='FlushViewOfFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  UnmapViewOfFile ( LPCVOID lpBaseAddress ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='UnmapViewOfFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % int  lstrcmpA ( LPCSTR lpString1 , LPCSTR lpString2 ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcmpA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % int  lstrcmpW ( LPCWSTR lpString1 , LPCWSTR lpString2 ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcmpW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % int  lstrcmpiA ( LPCSTR lpString1 , LPCSTR lpString2 ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcmpiA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % int  lstrcmpiW ( LPCWSTR lpString1 , LPCWSTR lpString2 ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcmpiW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % LPSTR  lstrcpynA ( LPSTR lpString1 , LPCSTR lpString2 , int iMaxLength ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='lstrcpynA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int32'};fcnNum=fcnNum+1;
% % LPWSTR  lstrcpynW ( LPWSTR lpString1 , LPCWSTR lpString2 , int iMaxLength ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='lstrcpynW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% % LPSTR  lstrcpyA ( LPSTR lpString1 , LPCSTR lpString2 ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcpyA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % LPWSTR  lstrcpyW ( LPWSTR lpString1 , LPCWSTR lpString2 ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcpyW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % LPSTR  lstrcatA ( LPSTR lpString1 , LPCSTR lpString2 ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcatA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % LPWSTR  lstrcatW ( LPWSTR lpString1 , LPCWSTR lpString2 ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='lstrcatW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % int  lstrlenA ( LPCSTR lpString ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='lstrlenA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % int  lstrlenW ( LPCWSTR lpString ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='lstrlenW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % HFILE  OpenFile ( LPCSTR lpFileName , LPOFSTRUCT lpReOpenBuff , UINT uStyle ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='OpenFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 's_OFSTRUCTPtr', 'uint32'};fcnNum=fcnNum+1;
% % HFILE  _lopen ( LPCSTR lpPathName , int iReadWrite ); 
% fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='_lopen'; fcns.alias{fcnNum}='lopen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int32'};fcnNum=fcnNum+1;
% % HFILE  _lcreat ( LPCSTR lpPathName , int iAttribute ); 
% fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='_lcreat'; fcns.alias{fcnNum}='lcreat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int32'};fcnNum=fcnNum+1;
% % UINT  _lread ( HFILE hFile , LPVOID lpBuffer , UINT uBytes ); 
% fcns.thunkname{fcnNum}='uint32int32voidPtruint32Thunk';fcns.name{fcnNum}='_lread'; fcns.alias{fcnNum}='lread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% % UINT  _lwrite ( HFILE hFile , LPCCH lpBuffer , UINT uBytes ); 
% fcns.thunkname{fcnNum}='uint32int32voidPtruint32Thunk';fcns.name{fcnNum}='_lwrite'; fcns.alias{fcnNum}='lwrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int8Ptr', 'uint32'};fcnNum=fcnNum+1;
% % long  _hread ( HFILE hFile , LPVOID lpBuffer , long lBytes ); 
% fcns.thunkname{fcnNum}='longint32voidPtrlongThunk';fcns.name{fcnNum}='_hread'; fcns.alias{fcnNum}='hread'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% % long  _hwrite ( HFILE hFile , LPCCH lpBuffer , long lBytes ); 
% fcns.thunkname{fcnNum}='longint32voidPtrlongThunk';fcns.name{fcnNum}='_hwrite'; fcns.alias{fcnNum}='hwrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'int32', 'int8Ptr', 'long'};fcnNum=fcnNum+1;
% % HFILE  _lclose ( HFILE hFile ); 
% fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='_lclose'; fcns.alias{fcnNum}='lclose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% % LONG  _llseek ( HFILE hFile , LONG lOffset , int iOrigin ); 
% fcns.thunkname{fcnNum}='longint32longint32Thunk';fcns.name{fcnNum}='_llseek'; fcns.alias{fcnNum}='llseek'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'int32', 'long', 'int32'};fcnNum=fcnNum+1;
% % DWORD  FlsAlloc ( PFLS_CALLBACK_FUNCTION lpCallback ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='FlsAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% % PVOID  FlsGetValue ( DWORD dwFlsIndex ); 
% fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='FlsGetValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % BOOL  FlsSetValue ( DWORD dwFlsIndex , PVOID lpFlsData ); 
% fcns.thunkname{fcnNum}='int32ulongvoidPtrThunk';fcns.name{fcnNum}='FlsSetValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  FlsFree ( DWORD dwFlsIndex ); 
% fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='FlsFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % DWORD  TlsAlloc ( void ); 
% fcns.thunkname{fcnNum}='ulongvoidThunk';fcns.name{fcnNum}='TlsAlloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % LPVOID  TlsGetValue ( DWORD dwTlsIndex ); 
% fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='TlsGetValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % BOOL  TlsSetValue ( DWORD dwTlsIndex , LPVOID lpTlsValue ); 
% fcns.thunkname{fcnNum}='int32ulongvoidPtrThunk';fcns.name{fcnNum}='TlsSetValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  TlsFree ( DWORD dwTlsIndex ); 
% fcns.thunkname{fcnNum}='int32ulongThunk';fcns.name{fcnNum}='TlsFree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % DWORD  SleepEx ( DWORD dwMilliseconds , BOOL bAlertable ); 
% fcns.thunkname{fcnNum}='ulongulongint32Thunk';fcns.name{fcnNum}='SleepEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
% % DWORD  WaitForSingleObjectEx ( HANDLE hHandle , DWORD dwMilliseconds , BOOL bAlertable ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongint32Thunk';fcns.name{fcnNum}='WaitForSingleObjectEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
% % DWORD  WaitForMultipleObjectsEx ( DWORD nCount , const HANDLE * lpHandles , BOOL bWaitAll , DWORD dwMilliseconds , BOOL bAlertable ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrint32ulongint32Thunk';fcns.name{fcnNum}='WaitForMultipleObjectsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'voidPtrPtr', 'int32', 'ulong', 'int32'};fcnNum=fcnNum+1;
% % HANDLE  CreateMutexA ( LPSECURITY_ATTRIBUTES lpMutexAttributes , BOOL bInitialOwner , LPCSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='CreateMutexA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'int32', 'int8Ptr'};fcnNum=fcnNum+1;
% % HANDLE  CreateMutexW ( LPSECURITY_ATTRIBUTES lpMutexAttributes , BOOL bInitialOwner , LPCWSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='CreateMutexW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% % HANDLE  OpenMutexA ( DWORD dwDesiredAccess , BOOL bInheritHandle , LPCSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenMutexA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int8Ptr'};fcnNum=fcnNum+1;
% % HANDLE  OpenMutexW ( DWORD dwDesiredAccess , BOOL bInheritHandle , LPCWSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenMutexW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE  CreateEventA ( LPSECURITY_ATTRIBUTES lpEventAttributes , BOOL bManualReset , BOOL bInitialState , LPCSTR lpName ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='CreateEventA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'int32', 'int32', 'int8Ptr'};fcnNum=fcnNum+1;
% % HANDLE  CreateEventW ( LPSECURITY_ATTRIBUTES lpEventAttributes , BOOL bManualReset , BOOL bInitialState , LPCWSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='CreateEventW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'int32', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE  OpenEventA ( DWORD dwDesiredAccess , BOOL bInheritHandle , LPCSTR lpName ); 
fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenEventA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int8Ptr'};fcnNum=fcnNum+1;
% % HANDLE  OpenEventW ( DWORD dwDesiredAccess , BOOL bInheritHandle , LPCWSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenEventW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% % HANDLE  CreateSemaphoreA ( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes , LONG lInitialCount , LONG lMaximumCount , LPCSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='CreateSemaphoreA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'long', 'long', 'int8Ptr'};fcnNum=fcnNum+1;
% % HANDLE  CreateSemaphoreW ( LPSECURITY_ATTRIBUTES lpSemaphoreAttributes , LONG lInitialCount , LONG lMaximumCount , LPCWSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='CreateSemaphoreW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'s_SECURITY_ATTRIBUTESPtr', 'long', 'long', 'uint16Ptr'};fcnNum=fcnNum+1;
% % HANDLE  OpenSemaphoreA ( DWORD dwDesiredAccess , BOOL bInheritHandle , LPCSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenSemaphoreA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int8Ptr'};fcnNum=fcnNum+1;
% % HANDLE  OpenSemaphoreW ( DWORD dwDesiredAccess , BOOL bInheritHandle , LPCWSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenSemaphoreW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE  CreateFileMappingA ( HANDLE hFile , LPSECURITY_ATTRIBUTES lpFileMappingAttributes , DWORD flProtect , DWORD dwMaximumSizeHigh , DWORD dwMaximumSizeLow , LPCSTR lpName ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateFileMappingA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'ulong', 'int8Ptr'};fcnNum=fcnNum+1;
% % HANDLE  CreateFileMappingW ( HANDLE hFile , LPSECURITY_ATTRIBUTES lpFileMappingAttributes , DWORD flProtect , DWORD dwMaximumSizeHigh , DWORD dwMaximumSizeLow , LPCWSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateFileMappingW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% HANDLE  OpenFileMappingA ( DWORD dwDesiredAccess , BOOL bInheritHandle , LPCSTR lpName ); 
fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenFileMappingA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int8Ptr'};fcnNum=fcnNum+1;
% % HANDLE  OpenFileMappingW ( DWORD dwDesiredAccess , BOOL bInheritHandle , LPCWSTR lpName ); 
% fcns.thunkname{fcnNum}='voidPtrulongint32voidPtrThunk';fcns.name{fcnNum}='OpenFileMappingW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetLogicalDriveStringsA ( DWORD nBufferLength , LPSTR lpBuffer ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetLogicalDriveStringsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'int8Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetLogicalDriveStringsW ( DWORD nBufferLength , LPWSTR lpBuffer ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetLogicalDriveStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% % HMODULE  LoadLibraryA ( LPCSTR lpLibFileName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadLibraryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % HMODULE  LoadLibraryW ( LPCWSTR lpLibFileName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='LoadLibraryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % HMODULE  LoadLibraryExA ( LPCSTR lpLibFileName , HANDLE hFile , DWORD dwFlags ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='LoadLibraryExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'int8Ptr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % HMODULE  LoadLibraryExW ( LPCWSTR lpLibFileName , HANDLE hFile , DWORD dwFlags ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='LoadLibraryExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetModuleFileNameA ( HMODULE hModule , LPCH lpFilename , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetModuleFileNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetModuleFileNameW ( HMODULE hModule , LPWCH lpFilename , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetModuleFileNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % HMODULE  GetModuleHandleA ( LPCSTR lpModuleName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetModuleHandleA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % HMODULE  GetModuleHandleW ( LPCWSTR lpModuleName ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetModuleHandleW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HINSTANCE__Ptr'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  CreateProcessA ( LPCSTR lpApplicationName , LPSTR lpCommandLine , LPSECURITY_ATTRIBUTES lpProcessAttributes , LPSECURITY_ATTRIBUTES lpThreadAttributes , BOOL bInheritHandles , DWORD dwCreationFlags , LPVOID lpEnvironment , LPCSTR lpCurrentDirectory , LPSTARTUPINFOA lpStartupInfo , LPPROCESS_INFORMATION lpProcessInformation ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32ulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateProcessA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 's_SECURITY_ATTRIBUTESPtr', 's_SECURITY_ATTRIBUTESPtr', 'int32', 'ulong', 'voidPtr', 'int8Ptr', 's_STARTUPINFOAPtr', 's_PROCESS_INFORMATIONPtr'};fcnNum=fcnNum+1;
% % BOOL  CreateProcessW ( LPCWSTR lpApplicationName , LPWSTR lpCommandLine , LPSECURITY_ATTRIBUTES lpProcessAttributes , LPSECURITY_ATTRIBUTES lpThreadAttributes , BOOL bInheritHandles , DWORD dwCreationFlags , LPVOID lpEnvironment , LPCWSTR lpCurrentDirectory , LPSTARTUPINFOW lpStartupInfo , LPPROCESS_INFORMATION lpProcessInformation ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32ulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateProcessW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 's_SECURITY_ATTRIBUTESPtr', 's_SECURITY_ATTRIBUTESPtr', 'int32', 'ulong', 'voidPtr', 'uint16Ptr', 's_STARTUPINFOWPtr', 's_PROCESS_INFORMATIONPtr'};fcnNum=fcnNum+1;
% % BOOL  SetProcessShutdownParameters ( DWORD dwLevel , DWORD dwFlags ); 
% fcns.thunkname{fcnNum}='int32ulongulongThunk';fcns.name{fcnNum}='SetProcessShutdownParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  GetProcessShutdownParameters ( LPDWORD lpdwLevel , LPDWORD lpdwFlags ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetProcessShutdownParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetProcessVersion ( DWORD ProcessId ); 
% fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='GetProcessVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% % void  FatalAppExitA ( UINT uAction , LPCSTR lpMessageText ); 
% fcns.thunkname{fcnNum}='voiduint32voidPtrThunk';fcns.name{fcnNum}='FatalAppExitA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'int8Ptr'};fcnNum=fcnNum+1;
% % void  FatalAppExitW ( UINT uAction , LPCWSTR lpMessageText ); 
% fcns.thunkname{fcnNum}='voiduint32voidPtrThunk';fcns.name{fcnNum}='FatalAppExitW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% % void  GetStartupInfoA ( LPSTARTUPINFOA lpStartupInfo ); 
% fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetStartupInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_STARTUPINFOAPtr'};fcnNum=fcnNum+1;
% % void  GetStartupInfoW ( LPSTARTUPINFOW lpStartupInfo ); 
% fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='GetStartupInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'s_STARTUPINFOWPtr'};fcnNum=fcnNum+1;
% % LPSTR  GetCommandLineA ( void ); 
% fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetCommandLineA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int8Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % LPWSTR  GetCommandLineW ( void ); 
% fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='GetCommandLineW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % DWORD  GetEnvironmentVariableA ( LPCSTR lpName , LPSTR lpBuffer , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetEnvironmentVariableA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetEnvironmentVariableW ( LPCWSTR lpName , LPWSTR lpBuffer , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetEnvironmentVariableW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetEnvironmentVariableA ( LPCSTR lpName , LPCSTR lpValue ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetEnvironmentVariableA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetEnvironmentVariableW ( LPCWSTR lpName , LPCWSTR lpValue ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetEnvironmentVariableW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  ExpandEnvironmentStringsA ( LPCSTR lpSrc , LPSTR lpDst , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ExpandEnvironmentStringsA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  ExpandEnvironmentStringsW ( LPCWSTR lpSrc , LPWSTR lpDst , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='ExpandEnvironmentStringsW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetFirmwareEnvironmentVariableA ( LPCSTR lpName , LPCSTR lpGuid , PVOID pBuffer , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetFirmwareEnvironmentVariableA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetFirmwareEnvironmentVariableW ( LPCWSTR lpName , LPCWSTR lpGuid , PVOID pBuffer , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetFirmwareEnvironmentVariableW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetFirmwareEnvironmentVariableA ( LPCSTR lpName , LPCSTR lpGuid , PVOID pValue , DWORD nSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='SetFirmwareEnvironmentVariableA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetFirmwareEnvironmentVariableW ( LPCWSTR lpName , LPCWSTR lpGuid , PVOID pValue , DWORD nSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='SetFirmwareEnvironmentVariableW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % void  OutputDebugStringA ( LPCSTR lpOutputString ); 
% fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='OutputDebugStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % void  OutputDebugStringW ( LPCWSTR lpOutputString ); 
% fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='OutputDebugStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % HRSRC  FindResourceA ( HMODULE hModule , LPCSTR lpName , LPCSTR lpType ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FindResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HRSRC__Ptr'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % HRSRC  FindResourceW ( HMODULE hModule , LPCWSTR lpName , LPCWSTR lpType ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FindResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HRSRC__Ptr'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % HRSRC  FindResourceExA ( HMODULE hModule , LPCSTR lpType , LPCSTR lpName , WORD wLanguage ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='FindResourceExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HRSRC__Ptr'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'int8Ptr', 'int8Ptr', 'uint16'};fcnNum=fcnNum+1;
% % HRSRC  FindResourceExW ( HMODULE hModule , LPCWSTR lpType , LPCWSTR lpName , WORD wLanguage ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtruint16Thunk';fcns.name{fcnNum}='FindResourceExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HRSRC__Ptr'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16'};fcnNum=fcnNum+1;
% % BOOL  EnumResourceTypesA ( HMODULE hModule , ENUMRESTYPEPROCA lpEnumFunc , LONG_PTR lParam ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint64Thunk';fcns.name{fcnNum}='EnumResourceTypesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'FcnPtr', 'int64'};fcnNum=fcnNum+1;
% % BOOL  EnumResourceTypesW ( HMODULE hModule , ENUMRESTYPEPROCW lpEnumFunc , LONG_PTR lParam ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint64Thunk';fcns.name{fcnNum}='EnumResourceTypesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'FcnPtr', 'int64'};fcnNum=fcnNum+1;
% % BOOL  EnumResourceNamesA ( HMODULE hModule , LPCSTR lpType , ENUMRESNAMEPROCA lpEnumFunc , LONG_PTR lParam ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint64Thunk';fcns.name{fcnNum}='EnumResourceNamesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'int8Ptr', 'FcnPtr', 'int64'};fcnNum=fcnNum+1;
% % BOOL  EnumResourceNamesW ( HMODULE hModule , LPCWSTR lpType , ENUMRESNAMEPROCW lpEnumFunc , LONG_PTR lParam ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint64Thunk';fcns.name{fcnNum}='EnumResourceNamesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'uint16Ptr', 'FcnPtr', 'int64'};fcnNum=fcnNum+1;
% % BOOL  EnumResourceLanguagesA ( HMODULE hModule , LPCSTR lpType , LPCSTR lpName , ENUMRESLANGPROCA lpEnumFunc , LONG_PTR lParam ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint64Thunk';fcns.name{fcnNum}='EnumResourceLanguagesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'int8Ptr', 'int8Ptr', 'FcnPtr', 'int64'};fcnNum=fcnNum+1;
% % BOOL  EnumResourceLanguagesW ( HMODULE hModule , LPCWSTR lpType , LPCWSTR lpName , ENUMRESLANGPROCW lpEnumFunc , LONG_PTR lParam ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint64Thunk';fcns.name{fcnNum}='EnumResourceLanguagesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HINSTANCE__Ptr', 'uint16Ptr', 'uint16Ptr', 'FcnPtr', 'int64'};fcnNum=fcnNum+1;
% % HANDLE  BeginUpdateResourceA ( LPCSTR pFileName , BOOL bDeleteExistingResources ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='BeginUpdateResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int8Ptr', 'int32'};fcnNum=fcnNum+1;
% % HANDLE  BeginUpdateResourceW ( LPCWSTR pFileName , BOOL bDeleteExistingResources ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='BeginUpdateResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% % BOOL  UpdateResourceA ( HANDLE hUpdate , LPCSTR lpType , LPCSTR lpName , WORD wLanguage , LPVOID lpData , DWORD cb ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint16voidPtrulongThunk';fcns.name{fcnNum}='UpdateResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int8Ptr', 'int8Ptr', 'uint16', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  UpdateResourceW ( HANDLE hUpdate , LPCWSTR lpType , LPCWSTR lpName , WORD wLanguage , LPVOID lpData , DWORD cb ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint16voidPtrulongThunk';fcns.name{fcnNum}='UpdateResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr', 'uint16Ptr', 'uint16', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  EndUpdateResourceA ( HANDLE hUpdate , BOOL fDiscard ); 
% fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EndUpdateResourceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% % BOOL  EndUpdateResourceW ( HANDLE hUpdate , BOOL fDiscard ); 
% fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EndUpdateResourceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% % ATOM  GlobalAddAtomA ( LPCSTR lpString ); 
% fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='GlobalAddAtomA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % ATOM  GlobalAddAtomW ( LPCWSTR lpString ); 
% fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='GlobalAddAtomW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % ATOM  GlobalFindAtomA ( LPCSTR lpString ); 
% fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='GlobalFindAtomA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % ATOM  GlobalFindAtomW ( LPCWSTR lpString ); 
% fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='GlobalFindAtomW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % UINT  GlobalGetAtomNameA ( ATOM nAtom , LPSTR lpBuffer , int nSize ); 
% fcns.thunkname{fcnNum}='uint32uint16voidPtrint32Thunk';fcns.name{fcnNum}='GlobalGetAtomNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16', 'int8Ptr', 'int32'};fcnNum=fcnNum+1;
% % UINT  GlobalGetAtomNameW ( ATOM nAtom , LPWSTR lpBuffer , int nSize ); 
% fcns.thunkname{fcnNum}='uint32uint16voidPtrint32Thunk';fcns.name{fcnNum}='GlobalGetAtomNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% % ATOM  AddAtomA ( LPCSTR lpString ); 
% fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='AddAtomA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % ATOM  AddAtomW ( LPCWSTR lpString ); 
% fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='AddAtomW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % ATOM  FindAtomA ( LPCSTR lpString ); 
% fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='FindAtomA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % ATOM  FindAtomW ( LPCWSTR lpString ); 
% fcns.thunkname{fcnNum}='uint16voidPtrThunk';fcns.name{fcnNum}='FindAtomW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % UINT  GetAtomNameA ( ATOM nAtom , LPSTR lpBuffer , int nSize ); 
% fcns.thunkname{fcnNum}='uint32uint16voidPtrint32Thunk';fcns.name{fcnNum}='GetAtomNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16', 'int8Ptr', 'int32'};fcnNum=fcnNum+1;
% % UINT  GetAtomNameW ( ATOM nAtom , LPWSTR lpBuffer , int nSize ); 
% fcns.thunkname{fcnNum}='uint32uint16voidPtrint32Thunk';fcns.name{fcnNum}='GetAtomNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% % UINT  GetProfileIntA ( LPCSTR lpAppName , LPCSTR lpKeyName , INT nDefault ); 
% fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetProfileIntA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int32'};fcnNum=fcnNum+1;
% % UINT  GetProfileIntW ( LPCWSTR lpAppName , LPCWSTR lpKeyName , INT nDefault ); 
% fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetProfileIntW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% % DWORD  GetProfileStringA ( LPCSTR lpAppName , LPCSTR lpKeyName , LPCSTR lpDefault , LPSTR lpReturnedString , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetProfileStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int8Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetProfileStringW ( LPCWSTR lpAppName , LPCWSTR lpKeyName , LPCWSTR lpDefault , LPWSTR lpReturnedString , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetProfileStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  WriteProfileStringA ( LPCSTR lpAppName , LPCSTR lpKeyName , LPCSTR lpString ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteProfileStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  WriteProfileStringW ( LPCWSTR lpAppName , LPCWSTR lpKeyName , LPCWSTR lpString ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteProfileStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetProfileSectionA ( LPCSTR lpAppName , LPSTR lpReturnedString , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetProfileSectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetProfileSectionW ( LPCWSTR lpAppName , LPWSTR lpReturnedString , DWORD nSize ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetProfileSectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  WriteProfileSectionA ( LPCSTR lpAppName , LPCSTR lpString ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteProfileSectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  WriteProfileSectionW ( LPCWSTR lpAppName , LPCWSTR lpString ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='WriteProfileSectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % UINT  GetPrivateProfileIntA ( LPCSTR lpAppName , LPCSTR lpKeyName , INT nDefault , LPCSTR lpFileName ); 
% fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileIntA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int32', 'int8Ptr'};fcnNum=fcnNum+1;
% % UINT  GetPrivateProfileIntW ( LPCWSTR lpAppName , LPCWSTR lpKeyName , INT nDefault , LPCWSTR lpFileName ); 
% fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileIntW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetPrivateProfileStringA ( LPCSTR lpAppName , LPCSTR lpKeyName , LPCSTR lpDefault , LPSTR lpReturnedString , DWORD nSize , LPCSTR lpFileName ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int8Ptr', 'int8Ptr', 'ulong', 'int8Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetPrivateProfileStringW ( LPCWSTR lpAppName , LPCWSTR lpKeyName , LPCWSTR lpDefault , LPWSTR lpReturnedString , DWORD nSize , LPCWSTR lpFileName ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  WritePrivateProfileStringA ( LPCSTR lpAppName , LPCSTR lpKeyName , LPCSTR lpString , LPCSTR lpFileName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WritePrivateProfileStringA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  WritePrivateProfileStringW ( LPCWSTR lpAppName , LPCWSTR lpKeyName , LPCWSTR lpString , LPCWSTR lpFileName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WritePrivateProfileStringW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetPrivateProfileSectionA ( LPCSTR lpAppName , LPSTR lpReturnedString , DWORD nSize , LPCSTR lpFileName ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileSectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong', 'int8Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetPrivateProfileSectionW ( LPCWSTR lpAppName , LPWSTR lpReturnedString , DWORD nSize , LPCWSTR lpFileName ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileSectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  WritePrivateProfileSectionA ( LPCSTR lpAppName , LPCSTR lpString , LPCSTR lpFileName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WritePrivateProfileSectionA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  WritePrivateProfileSectionW ( LPCWSTR lpAppName , LPCWSTR lpString , LPCWSTR lpFileName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WritePrivateProfileSectionW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetPrivateProfileSectionNamesA ( LPSTR lpszReturnBuffer , DWORD nSize , LPCSTR lpFileName ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileSectionNamesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'ulong', 'int8Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetPrivateProfileSectionNamesW ( LPWSTR lpszReturnBuffer , DWORD nSize , LPCWSTR lpFileName ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileSectionNamesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetPrivateProfileStructA ( LPCSTR lpszSection , LPCSTR lpszKey , LPVOID lpStruct , UINT uSizeStruct , LPCSTR szFile ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileStructA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'voidPtr', 'uint32', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetPrivateProfileStructW ( LPCWSTR lpszSection , LPCWSTR lpszKey , LPVOID lpStruct , UINT uSizeStruct , LPCWSTR szFile ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetPrivateProfileStructW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'voidPtr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  WritePrivateProfileStructA ( LPCSTR lpszSection , LPCSTR lpszKey , LPVOID lpStruct , UINT uSizeStruct , LPCSTR szFile ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='WritePrivateProfileStructA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'voidPtr', 'uint32', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  WritePrivateProfileStructW ( LPCWSTR lpszSection , LPCWSTR lpszKey , LPVOID lpStruct , UINT uSizeStruct , LPCWSTR szFile ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='WritePrivateProfileStructW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'voidPtr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% % UINT  GetDriveTypeA ( LPCSTR lpRootPathName ); 
% fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDriveTypeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % UINT  GetDriveTypeW ( LPCWSTR lpRootPathName ); 
% fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDriveTypeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % UINT  GetSystemDirectoryA ( LPSTR lpBuffer , UINT uSize ); 
% fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='GetSystemDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr', 'uint32'};fcnNum=fcnNum+1;
% % UINT  GetSystemDirectoryW ( LPWSTR lpBuffer , UINT uSize ); 
% fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='GetSystemDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% % DWORD  GetTempPathA ( DWORD nBufferLength , LPSTR lpBuffer ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetTempPathA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'int8Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetTempPathW ( DWORD nBufferLength , LPWSTR lpBuffer ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetTempPathW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% % UINT  GetTempFileNameA ( LPCSTR lpPathName , LPCSTR lpPrefixString , UINT uUnique , LPSTR lpTempFileName ); 
% fcns.thunkname{fcnNum}='uint32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetTempFileNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'uint32', 'int8Ptr'};fcnNum=fcnNum+1;
% % UINT  GetTempFileNameW ( LPCWSTR lpPathName , LPCWSTR lpPrefixString , UINT uUnique , LPWSTR lpTempFileName ); 
% fcns.thunkname{fcnNum}='uint32voidPtrvoidPtruint32voidPtrThunk';fcns.name{fcnNum}='GetTempFileNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% % UINT  GetWindowsDirectoryA ( LPSTR lpBuffer , UINT uSize ); 
% fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='GetWindowsDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr', 'uint32'};fcnNum=fcnNum+1;
% % UINT  GetWindowsDirectoryW ( LPWSTR lpBuffer , UINT uSize ); 
% fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='GetWindowsDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% % UINT  GetSystemWindowsDirectoryA ( LPSTR lpBuffer , UINT uSize ); 
% fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='GetSystemWindowsDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int8Ptr', 'uint32'};fcnNum=fcnNum+1;
% % UINT  GetSystemWindowsDirectoryW ( LPWSTR lpBuffer , UINT uSize ); 
% fcns.thunkname{fcnNum}='uint32voidPtruint32Thunk';fcns.name{fcnNum}='GetSystemWindowsDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32'};fcnNum=fcnNum+1;
% % BOOL  SetCurrentDirectoryA ( LPCSTR lpPathName ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetCurrentDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetCurrentDirectoryW ( LPCWSTR lpPathName ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetCurrentDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetCurrentDirectoryA ( DWORD nBufferLength , LPSTR lpBuffer ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetCurrentDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'int8Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetCurrentDirectoryW ( DWORD nBufferLength , LPWSTR lpBuffer ); 
% fcns.thunkname{fcnNum}='ulongulongvoidPtrThunk';fcns.name{fcnNum}='GetCurrentDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetDiskFreeSpaceA ( LPCSTR lpRootPathName , LPDWORD lpSectorsPerCluster , LPDWORD lpBytesPerSector , LPDWORD lpNumberOfFreeClusters , LPDWORD lpTotalNumberOfClusters ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDiskFreeSpaceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetDiskFreeSpaceW ( LPCWSTR lpRootPathName , LPDWORD lpSectorsPerCluster , LPDWORD lpBytesPerSector , LPDWORD lpNumberOfFreeClusters , LPDWORD lpTotalNumberOfClusters ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDiskFreeSpaceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetDiskFreeSpaceExA ( LPCSTR lpDirectoryName , PULARGE_INTEGER lpFreeBytesAvailableToCaller , PULARGE_INTEGER lpTotalNumberOfBytes , PULARGE_INTEGER lpTotalNumberOfFreeBytes ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDiskFreeSpaceExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 's_ULARGE_INTEGERPtr', 's_ULARGE_INTEGERPtr', 's_ULARGE_INTEGERPtr'};fcnNum=fcnNum+1;
% % BOOL  GetDiskFreeSpaceExW ( LPCWSTR lpDirectoryName , PULARGE_INTEGER lpFreeBytesAvailableToCaller , PULARGE_INTEGER lpTotalNumberOfBytes , PULARGE_INTEGER lpTotalNumberOfFreeBytes ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDiskFreeSpaceExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 's_ULARGE_INTEGERPtr', 's_ULARGE_INTEGERPtr', 's_ULARGE_INTEGERPtr'};fcnNum=fcnNum+1;
% % BOOL  CreateDirectoryA ( LPCSTR lpPathName , LPSECURITY_ATTRIBUTES lpSecurityAttributes ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% % BOOL  CreateDirectoryW ( LPCWSTR lpPathName , LPSECURITY_ATTRIBUTES lpSecurityAttributes ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% % BOOL  CreateDirectoryExA ( LPCSTR lpTemplateDirectory , LPCSTR lpNewDirectory , LPSECURITY_ATTRIBUTES lpSecurityAttributes ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateDirectoryExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% % BOOL  CreateDirectoryExW ( LPCWSTR lpTemplateDirectory , LPCWSTR lpNewDirectory , LPSECURITY_ATTRIBUTES lpSecurityAttributes ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CreateDirectoryExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% % BOOL  RemoveDirectoryA ( LPCSTR lpPathName ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='RemoveDirectoryA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  RemoveDirectoryW ( LPCWSTR lpPathName ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='RemoveDirectoryW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetFullPathNameA ( LPCSTR lpFileName , DWORD nBufferLength , LPSTR lpBuffer , LPSTR * lpFilePart ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFullPathNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'ulong', 'int8Ptr', 'int8PtrPtr'};fcnNum=fcnNum+1;
% % DWORD  GetFullPathNameW ( LPCWSTR lpFileName , DWORD nBufferLength , LPWSTR lpBuffer , LPWSTR * lpFilePart ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFullPathNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'uint16Ptr', 'uint16PtrPtr'};fcnNum=fcnNum+1;
% % BOOL  DefineDosDeviceA ( DWORD dwFlags , LPCSTR lpDeviceName , LPCSTR lpTargetPath ); 
% fcns.thunkname{fcnNum}='int32ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DefineDosDeviceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  DefineDosDeviceW ( DWORD dwFlags , LPCWSTR lpDeviceName , LPCWSTR lpTargetPath ); 
% fcns.thunkname{fcnNum}='int32ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DefineDosDeviceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % DWORD  QueryDosDeviceA ( LPCSTR lpDeviceName , LPSTR lpTargetPath , DWORD ucchMax ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='QueryDosDeviceA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  QueryDosDeviceW ( LPCWSTR lpDeviceName , LPWSTR lpTargetPath , DWORD ucchMax ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='QueryDosDeviceW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% HANDLE  CreateFileA ( LPCSTR lpFileName , DWORD dwDesiredAccess , DWORD dwShareMode , LPSECURITY_ATTRIBUTES lpSecurityAttributes , DWORD dwCreationDisposition , DWORD dwFlagsAndAttributes , HANDLE hTemplateFile ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int8Ptr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% % HANDLE  CreateFileW ( LPCWSTR lpFileName , DWORD dwDesiredAccess , DWORD dwShareMode , LPSECURITY_ATTRIBUTES lpSecurityAttributes , DWORD dwCreationDisposition , DWORD dwFlagsAndAttributes , HANDLE hTemplateFile ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr', 'ulong', 'ulong', 'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  SetFileAttributesA ( LPCSTR lpFileName , DWORD dwFileAttributes ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetFileAttributesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetFileAttributesW ( LPCWSTR lpFileName , DWORD dwFileAttributes ); 
% fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='SetFileAttributesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % DWORD  GetFileAttributesA ( LPCSTR lpFileName ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetFileAttributesA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetFileAttributesW ( LPCWSTR lpFileName ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='GetFileAttributesW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetFileAttributesExA ( LPCSTR lpFileName , GET_FILEEX_INFO_LEVELS fInfoLevelId , LPVOID lpFileInformation ); 
% fcns.thunkname{fcnNum}='int32voidPtrGET_FILEEX_INFO_LEVELSvoidPtrThunk';fcns.name{fcnNum}='GetFileAttributesExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'e_GET_FILEEX_INFO_LEVELS', 'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  GetFileAttributesExW ( LPCWSTR lpFileName , GET_FILEEX_INFO_LEVELS fInfoLevelId , LPVOID lpFileInformation ); 
% fcns.thunkname{fcnNum}='int32voidPtrGET_FILEEX_INFO_LEVELSvoidPtrThunk';fcns.name{fcnNum}='GetFileAttributesExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'e_GET_FILEEX_INFO_LEVELS', 'voidPtr'};fcnNum=fcnNum+1;
% % DWORD  GetCompressedFileSizeA ( LPCSTR lpFileName , LPDWORD lpFileSizeHigh ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCompressedFileSizeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % DWORD  GetCompressedFileSizeW ( LPCWSTR lpFileName , LPDWORD lpFileSizeHigh ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCompressedFileSizeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  DeleteFileA ( LPCSTR lpFileName ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  DeleteFileW ( LPCWSTR lpFileName ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DeleteFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% % HANDLE  FindFirstFileA ( LPCSTR lpFileName , LPWIN32_FIND_DATAA lpFindFileData ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FindFirstFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int8Ptr', 's_WIN32_FIND_DATAAPtr'};fcnNum=fcnNum+1;
% % HANDLE  FindFirstFileW ( LPCWSTR lpFileName , LPWIN32_FIND_DATAW lpFindFileData ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FindFirstFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 's_WIN32_FIND_DATAWPtr'};fcnNum=fcnNum+1;
% % BOOL  FindNextFileA ( HANDLE hFindFile , LPWIN32_FIND_DATAA lpFindFileData ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FindNextFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_WIN32_FIND_DATAAPtr'};fcnNum=fcnNum+1;
% % BOOL  FindNextFileW ( HANDLE hFindFile , LPWIN32_FIND_DATAW lpFindFileData ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='FindNextFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 's_WIN32_FIND_DATAWPtr'};fcnNum=fcnNum+1;
% % DWORD  SearchPathA ( LPCSTR lpPath , LPCSTR lpFileName , LPCSTR lpExtension , DWORD nBufferLength , LPSTR lpBuffer , LPSTR * lpFilePart ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SearchPathA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int8Ptr', 'ulong', 'int8Ptr', 'int8PtrPtr'};fcnNum=fcnNum+1;
% % DWORD  SearchPathW ( LPCWSTR lpPath , LPCWSTR lpFileName , LPCWSTR lpExtension , DWORD nBufferLength , LPWSTR lpBuffer , LPWSTR * lpFilePart ); 
% fcns.thunkname{fcnNum}='ulongvoidPtrvoidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='SearchPathW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'ulong', 'uint16Ptr', 'uint16PtrPtr'};fcnNum=fcnNum+1;
% % BOOL  CopyFileA ( LPCSTR lpExistingFileName , LPCSTR lpNewFileName , BOOL bFailIfExists ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CopyFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'int32'};fcnNum=fcnNum+1;
% % BOOL  CopyFileW ( LPCWSTR lpExistingFileName , LPCWSTR lpNewFileName , BOOL bFailIfExists ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='CopyFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% % BOOL  MoveFileA ( LPCSTR lpExistingFileName , LPCSTR lpNewFileName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MoveFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  MoveFileW ( LPCWSTR lpExistingFileName , LPCWSTR lpNewFileName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MoveFileW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % BOOL  MoveFileExA ( LPCSTR lpExistingFileName , LPCSTR lpNewFileName , DWORD dwFlags ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='MoveFileExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  MoveFileExW ( LPCWSTR lpExistingFileName , LPCWSTR lpNewFileName , DWORD dwFlags ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='MoveFileExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% HANDLE  CreateNamedPipeA ( LPCSTR lpName , DWORD dwOpenMode , DWORD dwPipeMode , DWORD nMaxInstances , DWORD nOutBufferSize , DWORD nInBufferSize , DWORD nDefaultTimeOut , LPSECURITY_ATTRIBUTES lpSecurityAttributes ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateNamedPipeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int8Ptr', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% % HANDLE  CreateNamedPipeW ( LPCWSTR lpName , DWORD dwOpenMode , DWORD dwPipeMode , DWORD nMaxInstances , DWORD nOutBufferSize , DWORD nInBufferSize , DWORD nDefaultTimeOut , LPSECURITY_ATTRIBUTES lpSecurityAttributes ); 
% fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='CreateNamedPipeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 's_SECURITY_ATTRIBUTESPtr'};fcnNum=fcnNum+1;
% BOOL  GetNamedPipeHandleStateA ( HANDLE hNamedPipe , LPDWORD lpState , LPDWORD lpCurInstances , LPDWORD lpMaxCollectionCount , LPDWORD lpCollectDataTimeout , LPSTR lpUserName , DWORD nMaxUserNameSize ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetNamedPipeHandleStateA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  GetNamedPipeHandleStateW ( HANDLE hNamedPipe , LPDWORD lpState , LPDWORD lpCurInstances , LPDWORD lpMaxCollectionCount , LPDWORD lpCollectDataTimeout , LPWSTR lpUserName , DWORD nMaxUserNameSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetNamedPipeHandleStateW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  CallNamedPipeA ( LPCSTR lpNamedPipeName , LPVOID lpInBuffer , DWORD nInBufferSize , LPVOID lpOutBuffer , DWORD nOutBufferSize , LPDWORD lpBytesRead , DWORD nTimeOut ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='CallNamedPipeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'voidPtr', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  CallNamedPipeW ( LPCWSTR lpNamedPipeName , LPVOID lpInBuffer , DWORD nInBufferSize , LPVOID lpOutBuffer , DWORD nOutBufferSize , LPDWORD lpBytesRead , DWORD nTimeOut ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='CallNamedPipeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'voidPtr', 'ulong', 'voidPtr', 'ulong', 'uint32Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL  WaitNamedPipeA ( LPCSTR lpNamedPipeName , DWORD nTimeOut ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='WaitNamedPipeA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% BOOL  WaitNamedPipeW ( LPCWSTR lpNamedPipeName , DWORD nTimeOut ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='WaitNamedPipeW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  SetVolumeLabelA ( LPCSTR lpRootPathName , LPCSTR lpVolumeName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetVolumeLabelA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetVolumeLabelW ( LPCWSTR lpRootPathName , LPCWSTR lpVolumeName ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetVolumeLabelW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% % void  SetFileApisToOEM ( void ); 
% fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='SetFileApisToOEM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % void  SetFileApisToANSI ( void ); 
% fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='SetFileApisToANSI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % BOOL  AreFileApisANSI ( void ); 
% fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='AreFileApisANSI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% % BOOL  GetVolumeInformationA ( LPCSTR lpRootPathName , LPSTR lpVolumeNameBuffer , DWORD nVolumeNameSize , LPDWORD lpVolumeSerialNumber , LPDWORD lpMaximumComponentLength , LPDWORD lpFileSystemFlags , LPSTR lpFileSystemNameBuffer , DWORD nFileSystemNameSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetVolumeInformationA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'int8Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  GetVolumeInformationW ( LPCWSTR lpRootPathName , LPWSTR lpVolumeNameBuffer , DWORD nVolumeNameSize , LPDWORD lpVolumeSerialNumber , LPDWORD lpMaximumComponentLength , LPDWORD lpFileSystemFlags , LPWSTR lpFileSystemNameBuffer , DWORD nFileSystemNameSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongvoidPtrvoidPtrvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='GetVolumeInformationW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'ulong', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
% % BOOL  CancelIo ( HANDLE hFile ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='CancelIo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% % BOOL  GetComputerNameA ( LPSTR lpBuffer , LPDWORD nSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetComputerNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetComputerNameW ( LPWSTR lpBuffer , LPDWORD nSize ); 
% fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetComputerNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetComputerNameA ( LPCSTR lpComputerName ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetComputerNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% % BOOL  SetComputerNameW ( LPCWSTR lpComputerName ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='SetComputerNameW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% BOOL  QueryPerformanceCounter ( LARGE_INTEGER * lpPerformanceCount ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='QueryPerformanceCounter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_LARGE_INTEGERPtr'};fcnNum=fcnNum+1;
% BOOL  QueryPerformanceFrequency ( LARGE_INTEGER * lpFrequency ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='QueryPerformanceFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_LARGE_INTEGERPtr'};fcnNum=fcnNum+1;
% % BOOL  GetVersionExA ( LPOSVERSIONINFOA lpVersionInformation ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetVersionExA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_OSVERSIONINFOAPtr'};fcnNum=fcnNum+1;
% % BOOL  GetVersionExW ( LPOSVERSIONINFOW lpVersionInformation ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetVersionExW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_OSVERSIONINFOWPtr'};fcnNum=fcnNum+1;
% % BOOL  VerifyVersionInfoA ( LPOSVERSIONINFOEXA lpVersionInformation , DWORD dwTypeMask , DWORDLONG dwlConditionMask ); 
% fcns.thunkname{fcnNum}='int32voidPtrulonguint64Thunk';fcns.name{fcnNum}='VerifyVersionInfoA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_OSVERSIONINFOEXAPtr', 'ulong', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  VerifyVersionInfoW ( LPOSVERSIONINFOEXW lpVersionInformation , DWORD dwTypeMask , DWORDLONG dwlConditionMask ); 
% fcns.thunkname{fcnNum}='int32voidPtrulonguint64Thunk';fcns.name{fcnNum}='VerifyVersionInfoW'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_OSVERSIONINFOEXWPtr', 'ulong', 'uint64'};fcnNum=fcnNum+1;
% % BOOL  GetSystemPowerStatus ( LPSYSTEM_POWER_STATUS lpSystemPowerStatus ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetSystemPowerStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_SYSTEM_POWER_STATUSPtr'};fcnNum=fcnNum+1;
% % BOOL  SetSystemPowerState ( BOOL fSuspend , BOOL fForce ); 
% fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='SetSystemPowerState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% % BOOL  ProcessIdToSessionId ( DWORD dwProcessId , DWORD * pSessionId ); 
% fcns.thunkname{fcnNum}='int32ulongvoidPtrThunk';fcns.name{fcnNum}='ProcessIdToSessionId'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'uint32Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetNumaHighestNodeNumber ( PULONG HighestNodeNumber ); 
% fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='GetNumaHighestNodeNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
% % BOOL  GetNumaProcessorNode ( UCHAR Processor , PUCHAR NodeNumber ); 
% fcns.thunkname{fcnNum}='int32uint8voidPtrThunk';fcns.name{fcnNum}='GetNumaProcessorNode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetNumaNodeProcessorMask ( UCHAR Node , PULONGLONG ProcessorMask ); 
% fcns.thunkname{fcnNum}='int32uint8voidPtrThunk';fcns.name{fcnNum}='GetNumaNodeProcessorMask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8', 'uint64Ptr'};fcnNum=fcnNum+1;
% % BOOL  GetNumaAvailableMemoryNode ( UCHAR Node , PULONGLONG AvailableBytes ); 
% fcns.thunkname{fcnNum}='int32uint8voidPtrThunk';fcns.name{fcnNum}='GetNumaAvailableMemoryNode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8', 'uint64Ptr'};fcnNum=fcnNum+1;
% structs.s_EXCEPTION_RECORD.members=struct('ExceptionCode', 'ulong', 'ExceptionFlags', 'ulong', 'ExceptionRecord', 's_EXCEPTION_RECORDPtr', 'ExceptionAddress', 'voidPtr', 'NumberParameters', 'ulong', 'ExceptionInformation', 'uint64#15');
% structs.s_EXCEPTION_POINTERS.members=struct('');
structs.s_va_list.members=struct('gp_offset', 'uint64', 'fp_offset', 'uint64', 'overflow_arg_area', 'voidPtr', 'reg_save_area', 'voidPtr');
structs.s_LARGE_INTEGER.members=struct('QuadPart', 'int64');
% structs.s_ULARGE_INTEGER.members=struct('QuadPart', 'uint64');
% structs.s_IO_COUNTERS.members=struct('ReadOperationCount', 'uint64', 'WriteOperationCount', 'uint64', 'OtherOperationCount', 'uint64', 'ReadTransferCount', 'uint64', 'WriteTransferCount', 'uint64', 'OtherTransferCount', 'uint64');
% structs.s_OSVERSIONINFOA.packing=4;
% structs.s_OSVERSIONINFOA.members=struct('dwOSVersionInfoSize', 'ulong', 'dwMajorVersion', 'ulong', 'dwMinorVersion', 'ulong', 'dwBuildNumber', 'ulong', 'dwPlatformId', 'ulong', 'szCSDVersion', 'int8#128');
% structs.s_OSVERSIONINFOW.packing=4;
% structs.s_OSVERSIONINFOW.members=struct('dwOSVersionInfoSize', 'ulong', 'dwMajorVersion', 'ulong', 'dwMinorVersion', 'ulong', 'dwBuildNumber', 'ulong', 'dwPlatformId', 'ulong', 'szCSDVersion', 'uint16#128');
% structs.s_OSVERSIONINFOEXA.packing=4;
% structs.s_OSVERSIONINFOEXA.members=struct('dwOSVersionInfoSize', 'ulong', 'dwMajorVersion', 'ulong', 'dwMinorVersion', 'ulong', 'dwBuildNumber', 'ulong', 'dwPlatformId', 'ulong', 'szCSDVersion', 'int8#128', 'wServicePackMajor', 'uint16', 'wServicePackMinor', 'uint16', 'wSuiteMask', 'uint16', 'wProductType', 'uint8', 'wReserved', 'uint8');
% structs.s_OSVERSIONINFOEXW.packing=4;
% structs.s_OSVERSIONINFOEXW.members=struct('dwOSVersionInfoSize', 'ulong', 'dwMajorVersion', 'ulong', 'dwMinorVersion', 'ulong', 'dwBuildNumber', 'ulong', 'dwPlatformId', 'ulong', 'szCSDVersion', 'uint16#128', 'wServicePackMajor', 'uint16', 'wServicePackMinor', 'uint16', 'wSuiteMask', 'uint16', 'wProductType', 'uint8', 'wReserved', 'uint8');
% structs.HWND__.packing=4;
% structs.HWND__.members=struct('unused', 'int32');
% structs.HBRUSH__.packing=4;
% structs.HBRUSH__.members=struct('unused', 'int32');
% structs.HDC__.packing=4;
% structs.HDC__.members=struct('unused', 'int32');
% structs.HICON__.packing=4;
% structs.HICON__.members=struct('unused', 'int32');
% structs.HMENU__.packing=4;
% structs.HMENU__.members=struct('unused', 'int32');
% structs.HINSTANCE__.packing=4;
% structs.HINSTANCE__.members=struct('unused', 'int32');
% structs.HRSRC__.packing=4;
% structs.HRSRC__.members=struct('unused', 'int32');
% structs.tagRECT.packing=4;
% structs.tagRECT.members=struct('left', 'long', 'top', 'long', 'right', 'long', 'bottom', 'long');
% structs.tagPOINT.packing=4;
% structs.tagPOINT.members=struct('x', 'long', 'y', 'long');
% structs.s_FILETIME.packing=4;
% structs.s_FILETIME.members=struct('dwLowDateTime', 'ulong', 'dwHighDateTime', 'ulong');
structs.s_OVERLAPPED.packing=4;
structs.s_OVERLAPPED.members=struct('Internal', 'uint64', 'InternalHigh', 'uint64', 'Pointer', 'voidPtr', 'hEvent', 'voidPtr');
structs.s_SECURITY_ATTRIBUTES.packing=4;
structs.s_SECURITY_ATTRIBUTES.members=struct('nLength', 'ulong', 'lpSecurityDescriptor', 'voidPtr', 'bInheritHandle', 'int32');
% structs.s_PROCESS_INFORMATION.packing=4;
% structs.s_PROCESS_INFORMATION.members=struct('hProcess', 'voidPtr', 'hThread', 'voidPtr', 'dwProcessId', 'ulong', 'dwThreadId', 'ulong');
% structs.s_SYSTEMTIME.packing=4;
% structs.s_SYSTEMTIME.members=struct('wYear', 'uint16', 'wMonth', 'uint16', 'wDayOfWeek', 'uint16', 'wDay', 'uint16', 'wHour', 'uint16', 'wMinute', 'uint16', 'wSecond', 'uint16', 'wMilliseconds', 'uint16');
% structs.s_COMMPROP.packing=4;
% structs.s_COMMPROP.members=struct('wPacketLength', 'uint16', 'wPacketVersion', 'uint16', 'dwServiceMask', 'ulong', 'dwReserved1', 'ulong', 'dwMaxTxQueue', 'ulong', 'dwMaxRxQueue', 'ulong', 'dwMaxBaud', 'ulong', 'dwProvSubType', 'ulong', 'dwProvCapabilities', 'ulong', 'dwSettableParams', 'ulong', 'dwSettableBaud', 'ulong', 'wSettableData', 'uint16', 'wSettableStopParity', 'uint16', 'dwCurrentTxQueue', 'ulong', 'dwCurrentRxQueue', 'ulong', 'dwProvSpec1', 'ulong', 'dwProvSpec2', 'ulong', 'wcProvChar', 'uint16#1');
% structs.s_COMMTIMEOUTS.packing=4;
% structs.s_COMMTIMEOUTS.members=struct('ReadIntervalTimeout', 'ulong', 'ReadTotalTimeoutMultiplier', 'ulong', 'ReadTotalTimeoutConstant', 'ulong', 'WriteTotalTimeoutMultiplier', 'ulong', 'WriteTotalTimeoutConstant', 'ulong');
% structs.s_MEMORYSTATUS.packing=4;
% structs.s_MEMORYSTATUS.members=struct('dwLength', 'ulong', 'dwMemoryLoad', 'ulong', 'dwTotalPhys', 'uint64', 'dwAvailPhys', 'uint64', 'dwTotalPageFile', 'uint64', 'dwAvailPageFile', 'uint64', 'dwTotalVirtual', 'uint64', 'dwAvailVirtual', 'uint64');
% structs.s_EXCEPTION_DEBUG_INFO.packing=4;
% structs.s_EXCEPTION_DEBUG_INFO.members=struct('ExceptionRecord', 's_EXCEPTION_RECORD', 'dwFirstChance', 'ulong');
% structs.s_EXIT_THREAD_DEBUG_INFO.packing=4;
% structs.s_EXIT_THREAD_DEBUG_INFO.members=struct('dwExitCode', 'ulong');
% structs.s_EXIT_PROCESS_DEBUG_INFO.packing=4;
% structs.s_EXIT_PROCESS_DEBUG_INFO.members=struct('dwExitCode', 'ulong');
% structs.s_LOAD_DLL_DEBUG_INFO.packing=4;
% structs.s_LOAD_DLL_DEBUG_INFO.members=struct('hFile', 'voidPtr', 'lpBaseOfDll', 'voidPtr', 'dwDebugInfoFileOffset', 'ulong', 'nDebugInfoSize', 'ulong', 'lpImageName', 'voidPtr', 'fUnicode', 'uint16');
% structs.s_UNLOAD_DLL_DEBUG_INFO.packing=4;
% structs.s_UNLOAD_DLL_DEBUG_INFO.members=struct('lpBaseOfDll', 'voidPtr');
% structs.s_OUTPUT_DEBUG_STRING_INFO.packing=4;
% structs.s_OUTPUT_DEBUG_STRING_INFO.members=struct('lpDebugStringData', 'int8Ptr', 'fUnicode', 'uint16', 'nDebugStringLength', 'uint16');
% structs.s_RIP_INFO.packing=4;
% structs.s_RIP_INFO.members=struct('dwError', 'ulong', 'dwType', 'ulong');
% structs.s_OFSTRUCT.packing=4;
% structs.s_OFSTRUCT.members=struct('cBytes', 'uint8', 'fFixedDisk', 'uint8', 'nErrCode', 'uint16', 'Reserved1', 'uint16', 'Reserved2', 'uint16', 'szPathName', 'int8#128');
% structs.s_MEMORYSTATUSEX.packing=4;
% structs.s_MEMORYSTATUSEX.members=struct('dwLength', 'ulong', 'dwMemoryLoad', 'ulong', 'ullTotalPhys', 'uint64', 'ullAvailPhys', 'uint64', 'ullTotalPageFile', 'uint64', 'ullAvailPageFile', 'uint64', 'ullTotalVirtual', 'uint64', 'ullAvailVirtual', 'uint64', 'ullAvailExtendedVirtual', 'uint64');
% structs.s_BY_HANDLE_FILE_INFORMATION.packing=4;
% structs.s_BY_HANDLE_FILE_INFORMATION.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'dwVolumeSerialNumber', 'ulong', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong', 'nNumberOfLinks', 'ulong', 'nFileIndexHigh', 'ulong', 'nFileIndexLow', 'ulong');
% structs.s_TIME_ZONE_INFORMATION.packing=4;
% structs.s_TIME_ZONE_INFORMATION.members=struct('Bias', 'long', 'StandardName', 'uint16#32', 'StandardDate', 's_SYSTEMTIME', 'StandardBias', 'long', 'DaylightName', 'uint16#32', 'DaylightDate', 's_SYSTEMTIME', 'DaylightBias', 'long');
% structs.s_WIN32_STREAM_ID.packing=4;
% structs.s_WIN32_STREAM_ID.members=struct('dwStreamId', 'ulong', 'dwStreamAttributes', 'ulong', 'Size', 's_LARGE_INTEGER', 'dwStreamNameSize', 'ulong', 'cStreamName', 'uint16#1');
% structs.s_STARTUPINFOA.packing=4;
% structs.s_STARTUPINFOA.members=struct('cb', 'ulong', 'lpReserved', 'int8Ptr', 'lpDesktop', 'int8Ptr', 'lpTitle', 'int8Ptr', 'dwX', 'ulong', 'dwY', 'ulong', 'dwXSize', 'ulong', 'dwYSize', 'ulong', 'dwXCountChars', 'ulong', 'dwYCountChars', 'ulong', 'dwFillAttribute', 'ulong', 'dwFlags', 'ulong', 'wShowWindow', 'uint16', 'cbReserved2', 'uint16', 'lpReserved2', 'uint8Ptr', 'hStdInput', 'voidPtr', 'hStdOutput', 'voidPtr', 'hStdError', 'voidPtr');
% structs.s_STARTUPINFOW.packing=4;
% structs.s_STARTUPINFOW.members=struct('cb', 'ulong', 'lpReserved', 'uint16Ptr', 'lpDesktop', 'uint16Ptr', 'lpTitle', 'uint16Ptr', 'dwX', 'ulong', 'dwY', 'ulong', 'dwXSize', 'ulong', 'dwYSize', 'ulong', 'dwXCountChars', 'ulong', 'dwYCountChars', 'ulong', 'dwFillAttribute', 'ulong', 'dwFlags', 'ulong', 'wShowWindow', 'uint16', 'cbReserved2', 'uint16', 'lpReserved2', 'uint8Ptr', 'hStdInput', 'voidPtr', 'hStdOutput', 'voidPtr', 'hStdError', 'voidPtr');
% structs.s_WIN32_FIND_DATAA.packing=4;
% structs.s_WIN32_FIND_DATAA.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong', 'dwReserved0', 'ulong', 'dwReserved1', 'ulong', 'cFileName', 'int8#260', 'cAlternateFileName', 'int8#14');
% structs.s_WIN32_FIND_DATAW.packing=4;
% structs.s_WIN32_FIND_DATAW.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong', 'dwReserved0', 'ulong', 'dwReserved1', 'ulong', 'cFileName', 'uint16#260', 'cAlternateFileName', 'uint16#14');
% structs.s_WIN32_FILE_ATTRIBUTE_DATA.packing=4;
% structs.s_WIN32_FILE_ATTRIBUTE_DATA.members=struct('dwFileAttributes', 'ulong', 'ftCreationTime', 's_FILETIME', 'ftLastAccessTime', 's_FILETIME', 'ftLastWriteTime', 's_FILETIME', 'nFileSizeHigh', 'ulong', 'nFileSizeLow', 'ulong');
% structs.s_SYSTEM_POWER_STATUS.packing=4;
% structs.s_SYSTEM_POWER_STATUS.members=struct('ACLineStatus', 'uint8', 'BatteryFlag', 'uint8', 'BatteryLifePercent', 'uint8', 'Reserved1', 'uint8', 'BatteryLifeTime', 'ulong', 'BatteryFullLifeTime', 'ulong');
% structs.tagWNDCLASSEXA.packing=4;
% structs.tagWNDCLASSEXA.members=struct('cbSize', 'uint32', 'style', 'uint32', 'lpfnWndProc', 'FcnPtr', 'cbClsExtra', 'int32', 'cbWndExtra', 'int32', 'hInstance', 'HINSTANCE__Ptr', 'hIcon', 'HICON__Ptr', 'hCursor', 'HICON__Ptr', 'hbrBackground', 'HBRUSH__Ptr', 'lpszMenuName', 'int8Ptr', 'lpszClassName', 'int8Ptr', 'hIconSm', 'HICON__Ptr');
% structs.tagWNDCLASSEXW.packing=4;
% structs.tagWNDCLASSEXW.members=struct('cbSize', 'uint32', 'style', 'uint32', 'lpfnWndProc', 'FcnPtr', 'cbClsExtra', 'int32', 'cbWndExtra', 'int32', 'hInstance', 'HINSTANCE__Ptr', 'hIcon', 'HICON__Ptr', 'hCursor', 'HICON__Ptr', 'hbrBackground', 'HBRUSH__Ptr', 'lpszMenuName', 'uint16Ptr', 'lpszClassName', 'uint16Ptr', 'hIconSm', 'HICON__Ptr');
% structs.tagWNDCLASSA.packing=4;
% structs.tagWNDCLASSA.members=struct('style', 'uint32', 'lpfnWndProc', 'FcnPtr', 'cbClsExtra', 'int32', 'cbWndExtra', 'int32', 'hInstance', 'HINSTANCE__Ptr', 'hIcon', 'HICON__Ptr', 'hCursor', 'HICON__Ptr', 'hbrBackground', 'HBRUSH__Ptr', 'lpszMenuName', 'int8Ptr', 'lpszClassName', 'int8Ptr');
% structs.tagWNDCLASSW.packing=4;
% structs.tagWNDCLASSW.members=struct('style', 'uint32', 'lpfnWndProc', 'FcnPtr', 'cbClsExtra', 'int32', 'cbWndExtra', 'int32', 'hInstance', 'HINSTANCE__Ptr', 'hIcon', 'HICON__Ptr', 'hCursor', 'HICON__Ptr', 'hbrBackground', 'HBRUSH__Ptr', 'lpszMenuName', 'uint16Ptr', 'lpszClassName', 'uint16Ptr');
% structs.tagMINMAXINFO.packing=4;
% structs.tagMINMAXINFO.members=struct('ptReserved', 'tagPOINT', 'ptMaxSize', 'tagPOINT', 'ptMaxPosition', 'tagPOINT', 'ptMinTrackSize', 'tagPOINT', 'ptMaxTrackSize', 'tagPOINT');
% structs.tagCOPYDATASTRUCT.packing=4;
% structs.tagCOPYDATASTRUCT.members=struct('dwData', 'uint64', 'cbData', 'ulong', 'lpData', 'voidPtr');
% structs.tagMDINEXTMENU.packing=4;
% structs.tagMDINEXTMENU.members=struct('hmenuIn', 'HMENU__Ptr', 'hmenuNext', 'HMENU__Ptr', 'hwndNext', 'HWND__Ptr');
% structs.tagWINDOWPOS.packing=4;
% structs.tagWINDOWPOS.members=struct('hwnd', 'HWND__Ptr', 'hwndInsertAfter', 'HWND__Ptr', 'x', 'int32', 'y', 'int32', 'cx', 'int32', 'cy', 'int32', 'flags', 'uint32');
% structs.tagNCCALCSIZE_PARAMS.packing=4;
% structs.tagNCCALCSIZE_PARAMS.members=struct('rgrc', 'tagRECT#3', 'lppos', 'tagWINDOWPOSPtr');
% structs.tagACCEL.packing=4;
% structs.tagACCEL.members=struct('fVirt', 'uint8', 'key', 'uint16', 'cmd', 'uint16');
% structs.tagPAINTSTRUCT.packing=4;
% structs.tagPAINTSTRUCT.members=struct('hdc', 'HDC__Ptr', 'fErase', 'int32', 'rcPaint', 'tagRECT', 'fRestore', 'int32', 'fIncUpdate', 'int32', 'rgbReserved', 'uint8#32');
% structs.tagCREATESTRUCTA.packing=4;
% structs.tagCREATESTRUCTA.members=struct('lpCreateParams', 'voidPtr', 'hInstance', 'HINSTANCE__Ptr', 'hMenu', 'HMENU__Ptr', 'hwndParent', 'HWND__Ptr', 'cy', 'int32', 'cx', 'int32', 'y', 'int32', 'x', 'int32', 'style', 'long', 'lpszName', 'int8Ptr', 'lpszClass', 'int8Ptr', 'dwExStyle', 'ulong');
% structs.tagCREATESTRUCTW.packing=4;
% structs.tagCREATESTRUCTW.members=struct('lpCreateParams', 'voidPtr', 'hInstance', 'HINSTANCE__Ptr', 'hMenu', 'HMENU__Ptr', 'hwndParent', 'HWND__Ptr', 'cy', 'int32', 'cx', 'int32', 'y', 'int32', 'x', 'int32', 'style', 'long', 'lpszName', 'uint16Ptr', 'lpszClass', 'uint16Ptr', 'dwExStyle', 'ulong');
% structs.tagWINDOWPLACEMENT.packing=4;
% structs.tagWINDOWPLACEMENT.members=struct('length', 'uint32', 'flags', 'uint32', 'showCmd', 'uint32', 'ptMinPosition', 'tagPOINT', 'ptMaxPosition', 'tagPOINT', 'rcNormalPosition', 'tagRECT');
% structs.tagNMHDR.packing=4;
% structs.tagNMHDR.members=struct('hwndFrom', 'HWND__Ptr', 'idFrom', 'uint64', 'code', 'uint32');
% structs.tagSTYLESTRUCT.packing=4;
% structs.tagSTYLESTRUCT.members=struct('styleOld', 'ulong', 'styleNew', 'ulong');
% structs.tagMEASUREITEMSTRUCT.packing=4;
% structs.tagMEASUREITEMSTRUCT.members=struct('CtlType', 'uint32', 'CtlID', 'uint32', 'itemID', 'uint32', 'itemWidth', 'uint32', 'itemHeight', 'uint32', 'itemData', 'uint64');
% structs.tagDRAWITEMSTRUCT.packing=4;
% structs.tagDRAWITEMSTRUCT.members=struct('CtlType', 'uint32', 'CtlID', 'uint32', 'itemID', 'uint32', 'itemAction', 'uint32', 'itemState', 'uint32', 'hwndItem', 'HWND__Ptr', 'hDC', 'HDC__Ptr', 'rcItem', 'tagRECT', 'itemData', 'uint64');
% structs.tagDELETEITEMSTRUCT.packing=4;
% structs.tagDELETEITEMSTRUCT.members=struct('CtlType', 'uint32', 'CtlID', 'uint32', 'itemID', 'uint32', 'hwndItem', 'HWND__Ptr', 'itemData', 'uint64');
% structs.tagCOMPAREITEMSTRUCT.packing=4;
% structs.tagCOMPAREITEMSTRUCT.members=struct('CtlType', 'uint32', 'CtlID', 'uint32', 'hwndItem', 'HWND__Ptr', 'itemID1', 'uint32', 'itemData1', 'uint64', 'itemID2', 'uint32', 'itemData2', 'uint64', 'dwLocaleId', 'ulong');
% structs.tagHELPINFO.packing=4;
% structs.tagHELPINFO.members=struct('cbSize', 'uint32', 'iContextType', 'int32', 'iCtrlId', 'int32', 'hItemHandle', 'voidPtr', 'dwContextId', 'uint64', 'MousePos', 'tagPOINT');
% structs.tagMSGBOXPARAMSA.packing=4;
% structs.tagMSGBOXPARAMSA.members=struct('cbSize', 'uint32', 'hwndOwner', 'HWND__Ptr', 'hInstance', 'HINSTANCE__Ptr', 'lpszText', 'int8Ptr', 'lpszCaption', 'int8Ptr', 'dwStyle', 'ulong', 'lpszIcon', 'int8Ptr', 'dwContextHelpId', 'uint64', 'lpfnMsgBoxCallback', 'FcnPtr', 'dwLanguageId', 'ulong');
% structs.tagMSGBOXPARAMSW.packing=4;
% structs.tagMSGBOXPARAMSW.members=struct('cbSize', 'uint32', 'hwndOwner', 'HWND__Ptr', 'hInstance', 'HINSTANCE__Ptr', 'lpszText', 'uint16Ptr', 'lpszCaption', 'uint16Ptr', 'dwStyle', 'ulong', 'lpszIcon', 'uint16Ptr', 'dwContextHelpId', 'uint64', 'lpfnMsgBoxCallback', 'FcnPtr', 'dwLanguageId', 'ulong');
% structs.tagMDICREATESTRUCTA.packing=4;
% structs.tagMDICREATESTRUCTA.members=struct('szClass', 'int8Ptr', 'szTitle', 'int8Ptr', 'hOwner', 'voidPtr', 'x', 'int32', 'y', 'int32', 'cx', 'int32', 'cy', 'int32', 'style', 'ulong', 'lParam', 'int64');
% structs.tagMDICREATESTRUCTW.packing=4;
% structs.tagMDICREATESTRUCTW.members=struct('szClass', 'uint16Ptr', 'szTitle', 'uint16Ptr', 'hOwner', 'voidPtr', 'x', 'int32', 'y', 'int32', 'cx', 'int32', 'cy', 'int32', 'style', 'ulong', 'lParam', 'int64');
% structs.tagCLIENTCREATESTRUCT.packing=4;
% structs.tagCLIENTCREATESTRUCT.members=struct('hWindowMenu', 'voidPtr', 'idFirstChild', 'uint32');
% structs.tagFILTERKEYS.packing=4;
% structs.tagFILTERKEYS.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'iWaitMSec', 'ulong', 'iDelayMSec', 'ulong', 'iRepeatMSec', 'ulong', 'iBounceMSec', 'ulong');
% structs.tagSTICKYKEYS.packing=4;
% structs.tagSTICKYKEYS.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong');
% structs.tagMOUSEKEYS.packing=4;
% structs.tagMOUSEKEYS.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'iMaxSpeed', 'ulong', 'iTimeToMaxSpeed', 'ulong', 'iCtrlSpeed', 'ulong', 'dwReserved1', 'ulong', 'dwReserved2', 'ulong');
% structs.tagACCESSTIMEOUT.packing=4;
% structs.tagACCESSTIMEOUT.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'iTimeOutMSec', 'ulong');
% structs.tagSOUNDSENTRYA.packing=4;
% structs.tagSOUNDSENTRYA.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'iFSTextEffect', 'ulong', 'iFSTextEffectMSec', 'ulong', 'iFSTextEffectColorBits', 'ulong', 'iFSGrafEffect', 'ulong', 'iFSGrafEffectMSec', 'ulong', 'iFSGrafEffectColor', 'ulong', 'iWindowsEffect', 'ulong', 'iWindowsEffectMSec', 'ulong', 'lpszWindowsEffectDLL', 'int8Ptr', 'iWindowsEffectOrdinal', 'ulong');
% structs.tagSOUNDSENTRYW.packing=4;
% structs.tagSOUNDSENTRYW.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong', 'iFSTextEffect', 'ulong', 'iFSTextEffectMSec', 'ulong', 'iFSTextEffectColorBits', 'ulong', 'iFSGrafEffect', 'ulong', 'iFSGrafEffectMSec', 'ulong', 'iFSGrafEffectColor', 'ulong', 'iWindowsEffect', 'ulong', 'iWindowsEffectMSec', 'ulong', 'lpszWindowsEffectDLL', 'uint16Ptr', 'iWindowsEffectOrdinal', 'ulong');
% structs.tagTOGGLEKEYS.packing=4;
% structs.tagTOGGLEKEYS.members=struct('cbSize', 'uint32', 'dwFlags', 'ulong');
% structs.tagMONITORINFO.packing=4;
% structs.tagMONITORINFO.members=struct('cbSize', 'ulong', 'rcMonitor', 'tagRECT', 'rcWork', 'tagRECT', 'dwFlags', 'ulong');
% enuminfo.e_GET_FILEEX_INFO_LEVELS=struct('GetFileExInfoStandard',0,'GetFileExMaxInfoLevel',1);
% enuminfo.LATENCY_TIME=struct('LT_DONT_CARE',0,'LT_LOWEST_LATENCY',1);
methodinfo=fcns;
