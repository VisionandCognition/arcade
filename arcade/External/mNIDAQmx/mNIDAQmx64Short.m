function [methodinfo,structs,enuminfo,ThunkLibName]=mNIDAQmx64Short
%MNIDAQMX64 Create structures to define interfaces found in 'NIDAQmx'.

%This function was generated by loadlibrary.m parser version  on Mon Mar 13 12:30:34 2017
%perl options:'NIDAQmx.i -outfile=mNIDAQmx64.m -thunkfile=nicaiu_thunk_pcwin64.c -header=NIDAQmx.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'nicaiu_thunk_pcwin64');

% int32 __stdcall DAQmxLoadTask ( const char taskName [], TaskHandle * taskHandle ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxLoadTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTask ( const char taskName [], TaskHandle * taskHandle ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxCreateTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% % int32 __stdcall DAQmxAddGlobalChansToTask ( TaskHandle taskHandle , const char channelNames []); 
% fcns.thunkname{fcnNum}='longulongcstringThunk';fcns.name{fcnNum}='DAQmxAddGlobalChansToTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxStartTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='DAQmxStartTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxStopTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='DAQmxStopTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxClearTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='DAQmxClearTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWaitUntilTaskDone ( TaskHandle taskHandle , float64 timeToWait ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxWaitUntilTaskDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxIsTaskDone ( TaskHandle taskHandle , bool32 * isTaskDone ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='DAQmxIsTaskDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longulongcstringcstringlongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIVoltageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetErrorString ( int32 errorCode , char errorString [], uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longlongcstringulongThunk';fcns.name{fcnNum}='DAQmxGetErrorString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateDOChan ( TaskHandle taskHandle , const char lines [], const char nameToAssignToLines [], int32 lineGrouping ); 
fcns.thunkname{fcnNum}='longulongcstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCreateDOChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalLines ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt8 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longulonglongulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'uint8Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateDIChan ( TaskHandle taskHandle , const char lines [], const char nameToAssignToLines [], int32 lineGrouping ); 
fcns.thunkname{fcnNum}='longulongcstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCreateDIChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalLines ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt8 readArray [], uInt32 arraySizeInBytes , int32 * sampsPerChanRead , int32 * numBytesPerSamp , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longulonglongdoubleulongvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'uint8Ptr', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadAnalogF64 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , float64 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longulonglongdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadAnalogF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgSampClkTiming ( TaskHandle taskHandle , const char source [], float64 rate , int32 activeEdge , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.thunkname{fcnNum}='longulongcstringdoublelonglonguint64Thunk';fcns.name{fcnNum}='DAQmxCfgSampClkTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'long', 'long', 'uint64'};fcnNum=fcnNum+1;


methodinfo=fcns;