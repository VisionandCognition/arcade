classdef MSNamedSharedMemory < handle
    
    properties
        handle = [];
        pointer = [];
        isServer = [];
    end
    
    methods
        
        function this = MSNamedSharedMemory
            if ~libisloaded('kernel32'); loadlibrary('kernel32', @win_kernel32); end;
        end
        
        function this = mCreateFileMapping(this, mapName, bufferSize)
            assert(rem(bufferSize, 16) == 0, ...
                'Buffer size should be a multiple of 16 bytes')                        
            PAGE_READWRITE = uint32(hex2dec('000004'));
            GENERIC_READ = uint32(hex2dec('80000000'));
            OPEN_EXISTING = uint32(hex2dec('00000003'));
            INVALID_HANDLE_VALUE = calllib('kernel32','CreateFileA', ...
                uint8(['UnexistentFile' 0]), ...
                GENERIC_READ, ...
                0, ...
                [], ...
                OPEN_EXISTING, ...
                0, ...
                []);
            hMap = calllib('kernel32', 'CreateFileMappingA', ...
                INVALID_HANDLE_VALUE, ...   use page file
                [], ...
                PAGE_READWRITE, ...
                0, ...
                bufferSize, ...
                uint8([mapName 0]));
            
            assert(~hMap.isNull, ...
                'Could not create file mapping %s', mapName);
            
            % open view
            FILE_MAP_WRITE = uint32(hex2dec('00000002'));
            pMem = calllib('kernel32', 'MapViewOfFile', ...
                hMap, ...
                FILE_MAP_WRITE, ...
                0, ...
                0, ...
                0);
            assert(~pMem.isNull, ...
                'Could not open view of file mapping %s', mapName);
            this.handle = hMap;
            this.pointer = pMem;
            this.isServer = true;
        end
        
        function this = mOpenFileMapping(this, mapName)
            FILE_MAP_READ = uint32(hex2dec('00000004'));
            hMap = calllib('kernel32', 'OpenFileMappingA', ...
                FILE_MAP_READ, ...
                false, ...
                uint8([mapName 0]));
            assert(~hMap.isNull, ...
                'Could not open file mapping %s', mapName);
            pMem = calllib('kernel32', 'MapViewOfFile', ...
                hMap, ...
                FILE_MAP_READ, ...
                0, ...
                0, ...
                0);
            assert(~pMem.isNull, ...
                'Could not create view of file mapping %s', mapName);
            this.handle = hMap;
            this.pointer = pMem;
            this.isServer = false;
        end
        function delete(this)
            if ~isempty(this.pointer)
                assert(~isequal(0, calllib('kernel32', 'UnmapViewOfFile', this.pointer)));
            end
            if ~isempty(this.handle)
                assert(~isequal(0, calllib('kernel32', 'CloseHandle', this.handle)));
            end
        end
    end
end
